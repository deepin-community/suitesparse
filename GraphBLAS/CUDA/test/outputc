 init called with mode 3 init_size 262144 max_size 268435456
 make_managed_pool called with  init_size 262144 max_size 268435456
GBCUDA_DEV enabled: for development only!
warming up device 0 memsize 3.40875e+10 sms 80
 rmm_wrap_alloc 256 bytes
oooo nice block of memory of size 8
be free, block of memory of size 8
good ol' cudaMalloc just to be sure
GPU 0 nice and toasty now
 rmm_wrap_alloc 8448 bytes
[==========] Running 16 tests from 4 test suites.
[----------] Global test environment set-up.
[----------] 4 tests from AxB_dot3_tests_PLUS_TIMES_1
[ RUN      ] AxB_dot3_tests_PLUS_TIMES_1.tinyxtinyPLUS_TIMES_Cint32_tMboolAint32_tBint32_tXint32_tYint32_tZint32_t
found device 0
inside fill, using seed 12345
 rmm_wrap_alloc 256 bytes
 rmm_wrap_alloc 256 bytes
 rmm_wrap_alloc 256 bytes
fill_random nrows=32ncols=32 need 1024 values, invsparse = 1
fill_random after alloc values
vdim ready 
vlen ready 
ready to fill p
filling dense
 rmm_wrap_alloc 256 bytes
 rmm_wrap_alloc 256 bytes
 rmm_wrap_alloc 2048 bytes
 rmm_wrap_alloc 2048 bytes
 rmm_wrap_alloc 256 bytes
 rmm_wrap_alloc 256 bytes
 rmm_wrap_alloc 256 bytes
 rmm_wrap_alloc 256 bytes
 rmm_wrap_alloc 256 bytes
 rmm_wrap_alloc 1024 bytes
 rmm_wrap_alloc 4096 bytes
 rmm_wrap_alloc 4096 bytes
 rmm_wrap_alloc 8192 bytes
 rmm_wrap_alloc 8192 bytes
 rmm_wrap_alloc 512 bytes
 rmm_wrap_alloc 256 bytes
 rmm_wrap_alloc 256 bytes
 rmm_wrap_alloc 256 bytes
 rmm_wrap_alloc 256 bytes
 rmm_wrap_alloc 256 bytes
 rmm_wrap_alloc 131072 bytes
 rmm_wrap_alloc 512 bytes
inside fill, using seed 54321
fill_random nrows=32ncols=32 need 1024 values, invsparse = 1
fill_random after alloc values
vdim ready 
vlen ready 
ready to fill p
filling dense
 rmm_wrap_alloc 4096 bytes
 rmm_wrap_alloc 8192 bytes
 rmm_wrap_alloc 256 bytes
 rmm_wrap_alloc 512 bytes
filling matrices
inside fill, using seed 4567
fill_random nrows=32ncols=32 need 32 values, invsparse = 32
fill_random after alloc values
vdim ready 
vlen ready 
ready to fill p
filling sparse
32 nonzeroes left to fill..
2 nonzeroes left to fill..
 rmm_wrap_alloc 256 bytes
 rmm_wrap_alloc 256 bytes
 rmm_wrap_alloc 256 bytes
 rmm_wrap_alloc 256 bytes
 rmm_wrap_alloc 256 bytes
 rmm_wrap_alloc 256 bytes
 rmm_wrap_alloc 256 bytes
 rmm_wrap_alloc 256 bytes
 rmm_wrap_alloc 256 bytes
inside fill, using seed 4567
fill_random nrows=32ncols=32 need 32 values, invsparse = 32
fill_random after alloc values
vdim ready 
vlen ready 
ready to fill p
filling sparse
32 nonzeroes left to fill..
2 nonzeroes left to fill..
 rmm_wrap_alloc 512 bytes
32 slots to fill
all pairs to bucket 5, no filling
done assigning buckets
 calling stringify semiring: 0x7f1fea02dc00
inside enumify: 0x7f1fea02dc00

    GraphBLAS Semiring: semiring (user-defined)
    GraphBLAS Monoid: semiring->add (built-in)
    GraphBLAS BinaryOp: monoid->op (built-in) z=plus(x,y)
    GraphBLAS type: ztype int32_t size: 4
    GraphBLAS type: xtype int32_t size: 4
    GraphBLAS type: ytype int32_t size: 4
    identity: [   0 ] 

    GraphBLAS BinaryOp: semiring->multiply (built-in) z=times(x,y)
    GraphBLAS type: ztype int32_t size: 4
    GraphBLAS type: xtype int32_t size: 4
    GraphBLAS type: ytype int32_t size: 4
Getting semiring add
Getting semiring mult
Getting semiring add op
Getting types
Getting opcodes
Getting typecodes
Performing asserts
Invoking boolean rename
Invoking boolean rename
Invoking enumify binop
e 14
Invoking enumify monoid
Calling enumify binop
Inside plus binop code
e 11
Calling enumify identity
Calling enumify terminal
Done enumify monoid
Done invoking enumify monoid
atype
btype
ctype
Invoking enumify_mask, mtype 0x7f2028b57180
GB_enumify_mask gets mcode: 1 Mask_struct: 0 Mask_comp: 0
got mask_ecode: 4
constructing semiring scode
before: add_ecode: 11, id_ecode: 0, term_ecode: 31, mult_ecode: 14, flipxy: 0, zcode: 6, xcode: 6, ycode: 6, mask_ecode: 4, ccode: 6, acode: 6, bcode: 6, csparsity: 0, msparsity: 0, asparsity: 0, bsparsity: 0
serialized_scode: 397409434374399488
done enumify semiring
scode=397409434374399488
done stringify semiring
 returned from  stringify semiring
nanobuckets_size: 384
blockbuckets_size: 12
 rmm_wrap_alloc 3072 bytes
 rmm_wrap_alloc 256 bytes
A TYpe: 0x7f2028b56f40
B TYpe: 0x7f2028b56f40
INside get cached file
looking for prog in file /home/cjnolet/.SuiteSparse/GraphBLAS/6.3.0/GB_semiring_397409434374399488.h
opening /home/cjnolet/.SuiteSparse/GraphBLAS/6.3.0/GB_semiring_397409434374399488.h for write
about to close
 read cache file /home/cjnolet/.SuiteSparse/GraphBLAS/6.3.0/GB_semiring_397409434374399488.h
successful_read: 1
Just closed
GB_jit_AxB_phase1
#include "/home/cjnolet/.SuiteSparse/GraphBLAS/6.3.0/GB_semiring_397409434374399488.h"
#include "GB_jit_AxB_phase1.cuh"
 jit_cache get program GB_jit_AxB_phase1
about to close
 read cache file /home/cjnolet/.SuiteSparse/GraphBLAS/6.3.0/GB_jit_AxB_phase1
 got kernel instance AxB_phase1_bool
about to close
 read cache file /home/cjnolet/.SuiteSparse/GraphBLAS/6.3.0/AxB_phase1_bool
---------------------------------------
--- Linker for void AxB_phase1<bool>(long long*, long long*, GB_Matrix_opaque*, GB_Matrix_opaque*, GB_Matrix_opaque*, GB_Matrix_opaque*) ---
---------------------------------------
info    : 0 bytes gmem
info    : Function properties for '_Z10AxB_phase1IbEvPxS0_P16GB_Matrix_opaqueS2_S2_S2_':
info    : used 199 registers, 4576 stack, 3104 bytes smem, 400 bytes cmem[0], 0 bytes lmem


---------------------------------------
Launching _Z10AxB_phase1IbEvPxS0_P16GB_Matrix_opaqueS2_S2_S2_<<<1,32,0,0>>>(long*,long*,GB_Matrix_opaque*,GB_Matrix_opaque*,GB_Matrix_opaque*,GB_Matrix_opaque*)
returned from phase1 kernel 10.4223ms
Printing Nanobuckets
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
Done.
Printing Blockbucket
0, 0, 62, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
Done.
==== phase1 done=============================
[       OK ] AxB_dot3_tests_PLUS_TIMES_1.tinyxtinyPLUS_TIMES_Cint32_tMboolAint32_tBint32_tXint32_tYint32_tZint32_t (11 ms)
[ RUN      ] AxB_dot3_tests_PLUS_TIMES_1.smallxsmallPLUS_TIMES_Cint32_tMboolAint32_tBint32_tXint32_tYint32_tZint32_t
found device 0
inside fill, using seed 12345
fill_random nrows=1024ncols=1024 need 1048576 values, invsparse = 1
fill_random after alloc values
vdim ready 
vlen ready 
ready to fill p
filling dense
 rmm_wrap_alloc 16384 bytes
 rmm_wrap_alloc 16384 bytes
 rmm_wrap_alloc 32768 bytes
 rmm_wrap_alloc 32768 bytes
 rmm_wrap_alloc 65536 bytes
 rmm_wrap_alloc 65536 bytes
 rmm_wrap_alloc 131072 bytes
 rmm_wrap_alloc 262144 bytes
 rmm_wrap_alloc 262144 bytes
 rmm_wrap_alloc 524288 bytes
 rmm_wrap_alloc 524288 bytes
 rmm_wrap_alloc 1048576 bytes
 rmm_wrap_alloc 1048576 bytes
 rmm_wrap_alloc 524288 bytes
 rmm_wrap_alloc 2097152 bytes
 rmm_wrap_alloc 2097152 bytes
 rmm_wrap_alloc 1048576 bytes
 rmm_wrap_alloc 4194304 bytes
 rmm_wrap_alloc 4194304 bytes
 rmm_wrap_alloc 2097152 bytes
 rmm_wrap_alloc 8388608 bytes
 rmm_wrap_alloc 8388608 bytes
 rmm_wrap_alloc 4194304 bytes
 rmm_wrap_alloc 8192 bytes
 rmm_wrap_alloc 8388608 bytes
 rmm_wrap_alloc 4194304 bytes
 rmm_wrap_alloc 8388608 bytes
inside fill, using seed 54321
fill_random nrows=1024ncols=1024 need 1048576 values, invsparse = 1
fill_random after alloc values
vdim ready 
vlen ready 
ready to fill p
filling dense
 rmm_wrap_alloc 16384 bytes
 rmm_wrap_alloc 524288 bytes
 rmm_wrap_alloc 524288 bytes
 rmm_wrap_alloc 1048576 bytes
 rmm_wrap_alloc 1048576 bytes
 rmm_wrap_alloc 524288 bytes
 rmm_wrap_alloc 2097152 bytes
 rmm_wrap_alloc 2097152 bytes
 rmm_wrap_alloc 1048576 bytes
 rmm_wrap_alloc 4194304 bytes
 rmm_wrap_alloc 4194304 bytes
 rmm_wrap_alloc 2097152 bytes
 rmm_wrap_alloc 8388608 bytes
 rmm_wrap_alloc 8388608 bytes
 rmm_wrap_alloc 4194304 bytes
 rmm_wrap_alloc 8388608 bytes
 rmm_wrap_alloc 4194304 bytes
 rmm_wrap_alloc 8388608 bytes
filling matrices
inside fill, using seed 4567
fill_random nrows=1024ncols=1024 need 1024 values, invsparse = 1024
fill_random after alloc values
vdim ready 
vlen ready 
ready to fill p
filling sparse
1024 nonzeroes left to fill..
35 nonzeroes left to fill..
 rmm_wrap_alloc 8192 bytes
 rmm_wrap_alloc 8192 bytes
 rmm_wrap_alloc 8192 bytes
 rmm_wrap_alloc 8192 bytes
inside fill, using seed 4567
fill_random nrows=1024ncols=1024 need 1024 values, invsparse = 1024
fill_random after alloc values
vdim ready 
vlen ready 
ready to fill p
filling sparse
1024 nonzeroes left to fill..
35 nonzeroes left to fill..
 rmm_wrap_alloc 16384 bytes
1024 slots to fill
all pairs to bucket 5, no filling
done assigning buckets
 calling stringify semiring: 0x7f1fea02dd00
inside enumify: 0x7f1fea02dd00

    GraphBLAS Semiring: semiring (user-defined)
    GraphBLAS Monoid: semiring->add (built-in)
    GraphBLAS BinaryOp: monoid->op (built-in) z=plus(x,y)
    GraphBLAS type: ztype int32_t size: 4
    GraphBLAS type: xtype int32_t size: 4
    GraphBLAS type: ytype int32_t size: 4
    identity: [   0 ] 

    GraphBLAS BinaryOp: semiring->multiply (built-in) z=times(x,y)
    GraphBLAS type: ztype int32_t size: 4
    GraphBLAS type: xtype int32_t size: 4
    GraphBLAS type: ytype int32_t size: 4
Getting semiring add
Getting semiring mult
Getting semiring add op
Getting types
Getting opcodes
Getting typecodes
Performing asserts
Invoking boolean rename
Invoking boolean rename
Invoking enumify binop
e 14
Invoking enumify monoid
Calling enumify binop
Inside plus binop code
e 11
Calling enumify identity
Calling enumify terminal
Done enumify monoid
Done invoking enumify monoid
atype
btype
ctype
Invoking enumify_mask, mtype 0x7f2028b57180
GB_enumify_mask gets mcode: 1 Mask_struct: 0 Mask_comp: 0
got mask_ecode: 4
constructing semiring scode
before: add_ecode: 11, id_ecode: 0, term_ecode: 31, mult_ecode: 14, flipxy: 0, zcode: 6, xcode: 6, ycode: 6, mask_ecode: 4, ccode: 6, acode: 6, bcode: 6, csparsity: 0, msparsity: 0, asparsity: 0, bsparsity: 0
serialized_scode: 397409434374399488
done enumify semiring
scode=397409434374399488
done stringify semiring
 returned from  stringify semiring
nanobuckets_size: 3072
blockbuckets_size: 96
 rmm_wrap_alloc 24576 bytes
 rmm_wrap_alloc 768 bytes
A TYpe: 0x7f2028b56f40
B TYpe: 0x7f2028b56f40
INside get cached file
looking for prog in file /home/cjnolet/.SuiteSparse/GraphBLAS/6.3.0/GB_semiring_397409434374399488.h
opening /home/cjnolet/.SuiteSparse/GraphBLAS/6.3.0/GB_semiring_397409434374399488.h for write
about to close
 read cache file /home/cjnolet/.SuiteSparse/GraphBLAS/6.3.0/GB_semiring_397409434374399488.h
successful_read: 1
Just closed
GB_jit_AxB_phase1
#include "/home/cjnolet/.SuiteSparse/GraphBLAS/6.3.0/GB_semiring_397409434374399488.h"
#include "GB_jit_AxB_phase1.cuh"
 jit_cache get program GB_jit_AxB_phase1
found memory-cached prog GB_jit_AxB_phase1
 got kernel instance AxB_phase1_bool
found memory-cached prog AxB_phase1_bool
Launching _Z10AxB_phase1IbEvPxS0_P16GB_Matrix_opaqueS2_S2_S2_<<<8,32,0,0>>>(long*,long*,GB_Matrix_opaque*,GB_Matrix_opaque*,GB_Matrix_opaque*,GB_Matrix_opaque*)
returned from phase1 kernel 1.93946ms
Printing Nanobuckets
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56, 60, 64, 68, 72, 76, 80, 84, 88, 92, 96, 100, 104, 108, 112, 116, 120, 124, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56, 60, 64, 68, 72, 76, 80, 84, 88, 92, 96, 100, 104, 108, 112, 116, 120, 124, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56, 60, 64, 68, 72, 76, 80, 84, 88, 92, 96, 100, 104, 108, 112, 116, 120, 124, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56, 60, 64, 68, 72, 76, 80, 84, 88, 92, 96, 100, 104, 108, 112, 116, 120, 124, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56, 60, 64, 68, 72, 76, 80, 84, 88, 92, 96, 100, 104, 108, 112, 116, 120, 124, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56, 60, 64, 68, 72, 76, 80, 84, 88, 92, 96, 100, 104, 108, 112, 116, 120, 124, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56, 60, 64, 68, 72, 76, 80, 84, 88, 92, 96, 100, 104, 108, 112, 116, 120, 124, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56, 60, 64, 68, 72, 76, 80, 84, 88, 92, 96, 100, 104, 108, 112, 116, 120, 124, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
Done.
Printing Blockbucket
0, 0, 0, 0, 0, 0, 0, 0, 248, 248, 248, 248, 248, 248, 248, 248, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
Done.
==== phase1 done=============================
[       OK ] AxB_dot3_tests_PLUS_TIMES_1.smallxsmallPLUS_TIMES_Cint32_tMboolAint32_tBint32_tXint32_tYint32_tZint32_t (235 ms)
[ RUN      ] AxB_dot3_tests_PLUS_TIMES_1.tinyxtinyPLUS_TIMES_Cint32_tMint32_tAint32_tBint32_tXint32_tYint32_tZint32_t
found device 0
inside fill, using seed 12345
fill_random nrows=32ncols=32 need 1024 values, invsparse = 1
fill_random after alloc values
vdim ready 
vlen ready 
ready to fill p
filling dense
 rmm_wrap_alloc 512 bytes
 rmm_wrap_alloc 256 bytes
 rmm_wrap_alloc 256 bytes
 rmm_wrap_alloc 512 bytes
inside fill, using seed 54321
fill_random nrows=32ncols=32 need 1024 values, invsparse = 1
fill_random after alloc values
vdim ready 
vlen ready 
ready to fill p
filling dense
 rmm_wrap_alloc 256 bytes
 rmm_wrap_alloc 512 bytes
filling matrices
inside fill, using seed 4567
fill_random nrows=32ncols=32 need 32 values, invsparse = 32
fill_random after alloc values
vdim ready 
vlen ready 
ready to fill p
filling sparse
32 nonzeroes left to fill..
2 nonzeroes left to fill..
 rmm_wrap_alloc 256 bytes
 rmm_wrap_alloc 256 bytes
 rmm_wrap_alloc 256 bytes
 rmm_wrap_alloc 256 bytes
 rmm_wrap_alloc 256 bytes
 rmm_wrap_alloc 256 bytes
 rmm_wrap_alloc 256 bytes
inside fill, using seed 4567
fill_random nrows=32ncols=32 need 32 values, invsparse = 32
fill_random after alloc values
vdim ready 
vlen ready 
ready to fill p
filling sparse
32 nonzeroes left to fill..
2 nonzeroes left to fill..
 rmm_wrap_alloc 256 bytes
 rmm_wrap_alloc 256 bytes
 rmm_wrap_alloc 256 bytes
 rmm_wrap_alloc 512 bytes
32 slots to fill
all pairs to bucket 5, no filling
done assigning buckets
 calling stringify semiring: 0x7f1fea02db00
inside enumify: 0x7f1fea02db00

    GraphBLAS Semiring: semiring (user-defined)
    GraphBLAS Monoid: semiring->add (built-in)
    GraphBLAS BinaryOp: monoid->op (built-in) z=plus(x,y)
    GraphBLAS type: ztype int32_t size: 4
    GraphBLAS type: xtype int32_t size: 4
    GraphBLAS type: ytype int32_t size: 4
    identity: [   0 ] 

    GraphBLAS BinaryOp: semiring->multiply (built-in) z=times(x,y)
    GraphBLAS type: ztype int32_t size: 4
    GraphBLAS type: xtype int32_t size: 4
    GraphBLAS type: ytype int32_t size: 4
Getting semiring add
Getting semiring mult
Getting semiring add op
Getting types
Getting opcodes
Getting typecodes
Performing asserts
Invoking boolean rename
Invoking boolean rename
Invoking enumify binop
e 14
Invoking enumify monoid
Calling enumify binop
Inside plus binop code
e 11
Calling enumify identity
Calling enumify terminal
Done enumify monoid
Done invoking enumify monoid
atype
btype
ctype
Invoking enumify_mask, mtype 0x7f2028b56f40
GB_enumify_mask gets mcode: 6 Mask_struct: 0 Mask_comp: 0
got mask_ecode: 8
constructing semiring scode
before: add_ecode: 11, id_ecode: 0, term_ecode: 31, mult_ecode: 14, flipxy: 0, zcode: 6, xcode: 6, ycode: 6, mask_ecode: 8, ccode: 6, acode: 6, bcode: 6, csparsity: 0, msparsity: 0, asparsity: 0, bsparsity: 0
serialized_scode: 397409434378593792
done enumify semiring
scode=397409434378593792
done stringify semiring
 returned from  stringify semiring
nanobuckets_size: 384
blockbuckets_size: 12
 rmm_wrap_alloc 3072 bytes
 rmm_wrap_alloc 256 bytes
A TYpe: 0x7f2028b56f40
B TYpe: 0x7f2028b56f40
INside get cached file
looking for prog in file /home/cjnolet/.SuiteSparse/GraphBLAS/6.3.0/GB_semiring_397409434378593792.h
opening /home/cjnolet/.SuiteSparse/GraphBLAS/6.3.0/GB_semiring_397409434378593792.h for write
about to close
 read cache file /home/cjnolet/.SuiteSparse/GraphBLAS/6.3.0/GB_semiring_397409434378593792.h
successful_read: 1
Just closed
GB_jit_AxB_phase1
#include "/home/cjnolet/.SuiteSparse/GraphBLAS/6.3.0/GB_semiring_397409434378593792.h"
#include "GB_jit_AxB_phase1.cuh"
 jit_cache get program GB_jit_AxB_phase1
found memory-cached prog GB_jit_AxB_phase1
 got kernel instance AxB_phase1_int32_t
about to close
 read cache file /home/cjnolet/.SuiteSparse/GraphBLAS/6.3.0/AxB_phase1_int32_t
---------------------------------------
--- Linker for void AxB_phase1<int>(long long*, long long*, GB_Matrix_opaque*, GB_Matrix_opaque*, GB_Matrix_opaque*, GB_Matrix_opaque*) ---
---------------------------------------
info    : 0 bytes gmem
info    : Function properties for '_Z10AxB_phase1IiEvPxS0_P16GB_Matrix_opaqueS2_S2_S2_':
info    : used 199 registers, 4576 stack, 3104 bytes smem, 400 bytes cmem[0], 0 bytes lmem


---------------------------------------
Launching _Z10AxB_phase1IiEvPxS0_P16GB_Matrix_opaqueS2_S2_S2_<<<1,32,0,0>>>(long*,long*,GB_Matrix_opaque*,GB_Matrix_opaque*,GB_Matrix_opaque*,GB_Matrix_opaque*)
returned from phase1 kernel 9.86829ms
Printing Nanobuckets
0, 0, 0, 0, 1, 1, 1, 2, 2, 3, 4, 5, 6, 6, 6, 6, 7, 8, 8, 9, 10, 11, 12, 13, 13, 13, 13, 13, 13, 13, 14, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 3, 4, 5, 5, 6, 6, 6, 6, 6, 7, 8, 9, 9, 9, 10, 10, 10, 10, 10, 10, 11, 12, 13, 14, 15, 16, 16, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
Done.
Printing Blockbucket
28, 0, 34, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
Done.
==== phase1 done=============================
[       OK ] AxB_dot3_tests_PLUS_TIMES_1.tinyxtinyPLUS_TIMES_Cint32_tMint32_tAint32_tBint32_tXint32_tYint32_tZint32_t (11 ms)
[ RUN      ] AxB_dot3_tests_PLUS_TIMES_1.smallxsmallPLUS_TIMES_Cint32_tMint32_tAint32_tBint32_tXint32_tYint32_tZint32_t
found device 0
inside fill, using seed 12345
fill_random nrows=1024ncols=1024 need 1048576 values, invsparse = 1
fill_random after alloc values
vdim ready 
vlen ready 
ready to fill p
filling dense
 rmm_wrap_alloc 16384 bytes
 rmm_wrap_alloc 16384 bytes
 rmm_wrap_alloc 524288 bytes
 rmm_wrap_alloc 524288 bytes
 rmm_wrap_alloc 1048576 bytes
 rmm_wrap_alloc 1048576 bytes
 rmm_wrap_alloc 524288 bytes
 rmm_wrap_alloc 2097152 bytes
 rmm_wrap_alloc 2097152 bytes
 rmm_wrap_alloc 1048576 bytes
 rmm_wrap_alloc 4194304 bytes
 rmm_wrap_alloc 4194304 bytes
 rmm_wrap_alloc 2097152 bytes
 rmm_wrap_alloc 8388608 bytes
 rmm_wrap_alloc 8388608 bytes
 rmm_wrap_alloc 4194304 bytes
 rmm_wrap_alloc 8388608 bytes
 rmm_wrap_alloc 4194304 bytes
 rmm_wrap_alloc 8388608 bytes
inside fill, using seed 54321
fill_random nrows=1024ncols=1024 need 1048576 values, invsparse = 1
fill_random after alloc values
vdim ready 
vlen ready 
ready to fill p
filling dense
 rmm_wrap_alloc 16384 bytes
 rmm_wrap_alloc 524288 bytes
 rmm_wrap_alloc 524288 bytes
 rmm_wrap_alloc 1048576 bytes
 rmm_wrap_alloc 1048576 bytes
 rmm_wrap_alloc 524288 bytes
 rmm_wrap_alloc 2097152 bytes
 rmm_wrap_alloc 2097152 bytes
 rmm_wrap_alloc 1048576 bytes
 rmm_wrap_alloc 4194304 bytes
 rmm_wrap_alloc 4194304 bytes
 rmm_wrap_alloc 2097152 bytes
 rmm_wrap_alloc 8388608 bytes
 rmm_wrap_alloc 8388608 bytes
 rmm_wrap_alloc 4194304 bytes
 rmm_wrap_alloc 8388608 bytes
 rmm_wrap_alloc 4194304 bytes
 rmm_wrap_alloc 8388608 bytes
filling matrices
inside fill, using seed 4567
fill_random nrows=1024ncols=1024 need 1024 values, invsparse = 1024
fill_random after alloc values
vdim ready 
vlen ready 
ready to fill p
filling sparse
1024 nonzeroes left to fill..
35 nonzeroes left to fill..
inside fill, using seed 4567
fill_random nrows=1024ncols=1024 need 1024 values, invsparse = 1024
fill_random after alloc values
vdim ready 
vlen ready 
ready to fill p
filling sparse
1024 nonzeroes left to fill..
35 nonzeroes left to fill..
 rmm_wrap_alloc 8192 bytes
 rmm_wrap_alloc 16384 bytes
1024 slots to fill
all pairs to bucket 5, no filling
done assigning buckets
 calling stringify semiring: 0x7f1fea03ef00
inside enumify: 0x7f1fea03ef00

    GraphBLAS Semiring: semiring (user-defined)
    GraphBLAS Monoid: semiring->add (built-in)
    GraphBLAS BinaryOp: monoid->op (built-in) z=plus(x,y)
    GraphBLAS type: ztype int32_t size: 4
    GraphBLAS type: xtype int32_t size: 4
    GraphBLAS type: ytype int32_t size: 4
    identity: [   0 ] 

    GraphBLAS BinaryOp: semiring->multiply (built-in) z=times(x,y)
    GraphBLAS type: ztype int32_t size: 4
    GraphBLAS type: xtype int32_t size: 4
    GraphBLAS type: ytype int32_t size: 4
Getting semiring add
Getting semiring mult
Getting semiring add op
Getting types
Getting opcodes
Getting typecodes
Performing asserts
Invoking boolean rename
Invoking boolean rename
Invoking enumify binop
e 14
Invoking enumify monoid
Calling enumify binop
Inside plus binop code
e 11
Calling enumify identity
Calling enumify terminal
Done enumify monoid
Done invoking enumify monoid
atype
btype
ctype
Invoking enumify_mask, mtype 0x7f2028b56f40
GB_enumify_mask gets mcode: 6 Mask_struct: 0 Mask_comp: 0
got mask_ecode: 8
constructing semiring scode
before: add_ecode: 11, id_ecode: 0, term_ecode: 31, mult_ecode: 14, flipxy: 0, zcode: 6, xcode: 6, ycode: 6, mask_ecode: 8, ccode: 6, acode: 6, bcode: 6, csparsity: 0, msparsity: 0, asparsity: 0, bsparsity: 0
serialized_scode: 397409434378593792
done enumify semiring
scode=397409434378593792
done stringify semiring
 returned from  stringify semiring
nanobuckets_size: 3072
blockbuckets_size: 96
 rmm_wrap_alloc 24576 bytes
 rmm_wrap_alloc 768 bytes
A TYpe: 0x7f2028b56f40
B TYpe: 0x7f2028b56f40
INside get cached file
looking for prog in file /home/cjnolet/.SuiteSparse/GraphBLAS/6.3.0/GB_semiring_397409434378593792.h
opening /home/cjnolet/.SuiteSparse/GraphBLAS/6.3.0/GB_semiring_397409434378593792.h for write
about to close
 read cache file /home/cjnolet/.SuiteSparse/GraphBLAS/6.3.0/GB_semiring_397409434378593792.h
successful_read: 1
Just closed
GB_jit_AxB_phase1
#include "/home/cjnolet/.SuiteSparse/GraphBLAS/6.3.0/GB_semiring_397409434378593792.h"
#include "GB_jit_AxB_phase1.cuh"
 jit_cache get program GB_jit_AxB_phase1
found memory-cached prog GB_jit_AxB_phase1
 got kernel instance AxB_phase1_int32_t
found memory-cached prog AxB_phase1_int32_t
Launching _Z10AxB_phase1IiEvPxS0_P16GB_Matrix_opaqueS2_S2_S2_<<<8,32,0,0>>>(long*,long*,GB_Matrix_opaque*,GB_Matrix_opaque*,GB_Matrix_opaque*,GB_Matrix_opaque*)
returned from phase1 kernel 2.08486ms
Printing Nanobuckets
0, 3, 4, 6, 9, 12, 13, 15, 18, 20, 21, 23, 26, 30, 32, 35, 37, 38, 40, 43, 45, 45, 48, 51, 54, 55, 58, 58, 61, 61, 63, 66, 0, 1, 4, 6, 7, 8, 11, 13, 14, 16, 19, 21, 22, 22, 24, 25, 27, 30, 32, 33, 35, 39, 40, 41, 42, 45, 46, 50, 51, 55, 57, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 4, 8, 12, 15, 19, 19, 22, 23, 25, 27, 30, 32, 33, 34, 37, 39, 40, 42, 45, 48, 50, 50, 54, 57, 61, 63, 65, 67, 68, 69, 0, 2, 4, 4, 4, 5, 5, 9, 10, 13, 15, 17, 18, 20, 23, 26, 27, 29, 32, 34, 35, 36, 38, 42, 42, 43, 43, 45, 47, 49, 52, 55, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 3, 4, 7, 8, 9, 11, 12, 15, 16, 18, 19, 22, 25, 27, 29, 31, 34, 35, 37, 38, 40, 41, 44, 46, 48, 50, 53, 56, 57, 58, 0, 3, 5, 8, 9, 12, 15, 17, 20, 21, 24, 26, 29, 30, 31, 33, 35, 37, 38, 41, 43, 46, 48, 51, 52, 54, 56, 58, 59, 60, 63, 66, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 6, 9, 11, 14, 15, 17, 18, 19, 22, 24, 25, 28, 31, 32, 33, 36, 38, 41, 45, 46, 47, 48, 50, 52, 54, 55, 55, 58, 60, 62, 0, 2, 2, 3, 5, 6, 9, 11, 14, 17, 18, 20, 23, 24, 25, 28, 31, 32, 34, 35, 35, 38, 41, 44, 46, 48, 50, 53, 57, 58, 60, 62, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 4, 7, 8, 12, 14, 15, 16, 20, 23, 26, 29, 32, 34, 35, 38, 40, 41, 45, 47, 48, 50, 53, 57, 59, 61, 63, 66, 68, 71, 72, 0, 1, 4, 5, 8, 8, 10, 13, 16, 16, 17, 18, 19, 20, 22, 25, 26, 28, 31, 31, 33, 36, 38, 39, 39, 41, 43, 45, 46, 48, 49, 52, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 3, 3, 5, 8, 10, 11, 12, 13, 15, 16, 18, 20, 24, 24, 26, 28, 29, 30, 32, 34, 35, 35, 36, 39, 42, 43, 46, 48, 50, 52, 0, 3, 5, 9, 11, 12, 14, 17, 20, 23, 25, 28, 30, 32, 32, 36, 38, 40, 43, 46, 48, 50, 53, 57, 60, 61, 62, 65, 66, 68, 70, 72, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 5, 8, 10, 11, 11, 12, 13, 13, 14, 17, 17, 20, 21, 23, 26, 29, 31, 33, 35, 35, 37, 40, 42, 46, 49, 53, 54, 58, 59, 60, 0, 1, 3, 4, 6, 9, 13, 16, 19, 23, 26, 27, 31, 32, 35, 37, 38, 39, 41, 43, 45, 49, 51, 52, 54, 54, 55, 55, 58, 58, 61, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 4, 7, 9, 11, 13, 15, 18, 20, 22, 24, 25, 27, 27, 28, 28, 29, 31, 35, 38, 39, 41, 44, 47, 50, 52, 54, 58, 58, 59, 59, 0, 3, 4, 5, 7, 9, 11, 13, 14, 16, 18, 20, 23, 25, 29, 32, 36, 39, 41, 41, 42, 45, 47, 48, 49, 50, 52, 54, 54, 58, 61, 65, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
Done.
Printing Blockbucket
132, 138, 116, 124, 144, 104, 120, 118, 116, 110, 132, 124, 104, 144, 128, 130, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
Done.
==== phase1 done=============================
[       OK ] AxB_dot3_tests_PLUS_TIMES_1.smallxsmallPLUS_TIMES_Cint32_tMint32_tAint32_tBint32_tXint32_tYint32_tZint32_t (230 ms)
[----------] 4 tests from AxB_dot3_tests_PLUS_TIMES_1 (489 ms total)

[----------] 4 tests from AxB_dot3_tests_PLUS_TIMES_2
[ RUN      ] AxB_dot3_tests_PLUS_TIMES_2.tinyxtinyPLUS_TIMES_Cint32_tMboolAint32_tBint32_tXint32_tYint32_tZint32_t
found device 0
inside fill, using seed 12345
fill_random nrows=32ncols=32 need 1024 values, invsparse = 1
fill_random after alloc values
vdim ready 
vlen ready 
ready to fill p
filling dense
 rmm_wrap_alloc 512 bytes
 rmm_wrap_alloc 512 bytes
inside fill, using seed 54321
fill_random nrows=32ncols=32 need 1024 values, invsparse = 1
fill_random after alloc values
vdim ready 
vlen ready 
ready to fill p
filling dense
 rmm_wrap_alloc 256 bytes
 rmm_wrap_alloc 512 bytes
filling matrices
inside fill, using seed 4567
fill_random nrows=32ncols=32 need 32 values, invsparse = 32
fill_random after alloc values
vdim ready 
vlen ready 
ready to fill p
filling sparse
32 nonzeroes left to fill..
2 nonzeroes left to fill..
 rmm_wrap_alloc 256 bytes
 rmm_wrap_alloc 256 bytes
 rmm_wrap_alloc 256 bytes
 rmm_wrap_alloc 256 bytes
 rmm_wrap_alloc 256 bytes
 rmm_wrap_alloc 256 bytes
 rmm_wrap_alloc 256 bytes
inside fill, using seed 4567
fill_random nrows=32ncols=32 need 32 values, invsparse = 32
fill_random after alloc values
vdim ready 
vlen ready 
ready to fill p
filling sparse
32 nonzeroes left to fill..
2 nonzeroes left to fill..
 rmm_wrap_alloc 256 bytes
 rmm_wrap_alloc 256 bytes
32 slots to fill
all pairs to bucket 5, no filling
done assigning buckets
 rmm_wrap_alloc 3072 bytes
 rmm_wrap_alloc 256 bytes
 rmm_wrap_alloc 256 bytes
 rmm_wrap_alloc 256 bytes
 rmm_wrap_alloc 256 bytes
nthrd: 32, ntasks: 1
Printing nanobuckets
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
Done.
Printing blockbucket
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
Done.
GB_jit_AxB_phase2
#include "GB_jit_AxB_phase2.cuh"
 jit_cache get program GB_jit_AxB_phase2
about to close
 read cache file /home/cjnolet/.SuiteSparse/GraphBLAS/6.3.0/GB_jit_AxB_phase2
 got kernel instance AxB_phase2
about to close
 read cache file /home/cjnolet/.SuiteSparse/GraphBLAS/6.3.0/AxB_phase2
---------------------------------------
--- Linker for AxB_phase2(long long*, long long*, int) ---
---------------------------------------
info    : 39 bytes gmem
info    : Function properties for '_Z10AxB_phase2PxS_i':
info    : used 88 registers, 720 stack, 32 bytes smem, 372 bytes cmem[0], 0 bytes lmem


---------------------------------------
Launching _Z10AxB_phase2PxS_i<<<1,32,0,0>>>(long*,long*,int)
s_0: 1, s_1=1, s_10=1, s_11=1
GB_jit_AxB_phase2end
#include "GB_jit_AxB_phase2end.cuh"
 jit_cache get program GB_jit_AxB_phase2end
about to close
 read cache file /home/cjnolet/.SuiteSparse/GraphBLAS/6.3.0/GB_jit_AxB_phase2end
 got kernel instance AxB_phase2end
about to close
 read cache file /home/cjnolet/.SuiteSparse/GraphBLAS/6.3.0/AxB_phase2end
---------------------------------------
--- Linker for AxB_phase2end(long long*, long long const*, long long const*, long long*, long long const*, GB_Matrix_opaque*, long long) ---
---------------------------------------
info    : 0 bytes gmem
info    : Function properties for '_Z13AxB_phase2endPxPKxS1_S_S1_P16GB_Matrix_opaquex':
info    : used 107 registers, 0 stack, 0 bytes smem, 408 bytes cmem[0], 0 bytes lmem


---------------------------------------
Launching _Z13AxB_phase2endPxPKxS1_S_S1_P16GB_Matrix_opaquex<<<1,32,0,0>>>(long*,long*,long*,long*,long*,GB_Matrix_opaque*,long)
Printing bucketp
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 
Done.
Printing bucket
0, 16, 5, 8, 9, 12, 15, 17, 20, 21, 24, 26, 29, 30, 31, 33, 35, 37, 38, 41, 43, 46, 48, 51, 52, 54, 56, 58, 59, 60, 63, 66, 
Done.
phase2 kernel done ==================
[       OK ] AxB_dot3_tests_PLUS_TIMES_2.tinyxtinyPLUS_TIMES_Cint32_tMboolAint32_tBint32_tXint32_tYint32_tZint32_t (17 ms)
[ RUN      ] AxB_dot3_tests_PLUS_TIMES_2.smallxsmallPLUS_TIMES_Cint32_tMboolAint32_tBint32_tXint32_tYint32_tZint32_t
found device 0
inside fill, using seed 12345
fill_random nrows=1024ncols=1024 need 1048576 values, invsparse = 1
fill_random after alloc values
vdim ready 
vlen ready 
ready to fill p
filling dense
 rmm_wrap_alloc 1024 bytes
 rmm_wrap_alloc 16384 bytes
 rmm_wrap_alloc 16384 bytes
 rmm_wrap_alloc 524288 bytes
 rmm_wrap_alloc 524288 bytes
 rmm_wrap_alloc 1048576 bytes
 rmm_wrap_alloc 1048576 bytes
 rmm_wrap_alloc 524288 bytes
 rmm_wrap_alloc 2097152 bytes
 rmm_wrap_alloc 2097152 bytes
 rmm_wrap_alloc 1048576 bytes
 rmm_wrap_alloc 4194304 bytes
 rmm_wrap_alloc 4194304 bytes
 rmm_wrap_alloc 2097152 bytes
 rmm_wrap_alloc 8388608 bytes
 rmm_wrap_alloc 8388608 bytes
 rmm_wrap_alloc 4194304 bytes
 rmm_wrap_alloc 8388608 bytes
 rmm_wrap_alloc 4194304 bytes
 rmm_wrap_alloc 8388608 bytes
inside fill, using seed 54321
fill_random nrows=1024ncols=1024 need 1048576 values, invsparse = 1
fill_random after alloc values
vdim ready 
vlen ready 
ready to fill p
filling dense
 rmm_wrap_alloc 16384 bytes
 rmm_wrap_alloc 524288 bytes
 rmm_wrap_alloc 524288 bytes
 rmm_wrap_alloc 1048576 bytes
 rmm_wrap_alloc 1048576 bytes
 rmm_wrap_alloc 524288 bytes
 rmm_wrap_alloc 2097152 bytes
 rmm_wrap_alloc 2097152 bytes
 rmm_wrap_alloc 1048576 bytes
 rmm_wrap_alloc 4194304 bytes
 rmm_wrap_alloc 4194304 bytes
 rmm_wrap_alloc 2097152 bytes
 rmm_wrap_alloc 8388608 bytes
 rmm_wrap_alloc 8388608 bytes
 rmm_wrap_alloc 4194304 bytes
 rmm_wrap_alloc 8388608 bytes
 rmm_wrap_alloc 4194304 bytes
filling matrices
inside fill, using seed 4567
fill_random nrows=1024ncols=1024 need 1024 values, invsparse = 1024
fill_random after alloc values
vdim ready 
vlen ready 
ready to fill p
filling sparse
1024 nonzeroes left to fill..
35 nonzeroes left to fill..
inside fill, using seed 4567
fill_random nrows=1024ncols=1024 need 1024 values, invsparse = 1024
fill_random after alloc values
vdim ready 
vlen ready 
ready to fill p
filling sparse
1024 nonzeroes left to fill..
35 nonzeroes left to fill..
 rmm_wrap_alloc 4096 bytes
1024 slots to fill
all pairs to bucket 5, no filling
done assigning buckets
 rmm_wrap_alloc 24576 bytes
 rmm_wrap_alloc 768 bytes
 rmm_wrap_alloc 256 bytes
 rmm_wrap_alloc 8192 bytes
 rmm_wrap_alloc 256 bytes
nthrd: 32, ntasks: 8
Printing nanobuckets

Done.
Printing blockbucket
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
Done.
GB_jit_AxB_phase2
#include "GB_jit_AxB_phase2.cuh"
 jit_cache get program GB_jit_AxB_phase2
found memory-cached prog GB_jit_AxB_phase2
 got kernel instance AxB_phase2
found memory-cached prog AxB_phase2
Launching _Z10AxB_phase2PxS_i<<<1,32,0,0>>>(long*,long*,int)
s_0: 1, s_1=1, s_10=1, s_11=1
GB_jit_AxB_phase2end
#include "GB_jit_AxB_phase2end.cuh"
 jit_cache get program GB_jit_AxB_phase2end
found memory-cached prog GB_jit_AxB_phase2end
 got kernel instance AxB_phase2end
found memory-cached prog AxB_phase2end
Launching _Z13AxB_phase2endPxPKxS1_S_S1_P16GB_Matrix_opaquex<<<8,32,0,0>>>(long*,long*,long*,long*,long*,GB_Matrix_opaque*,long)
Printing bucketp
0, 2, 4, 4294967302, 4294967303, 8589934600, 12884901897, 17179869194, 17179869195, 21474836492, 21474836493, 25769803791, 
Done.
Printing bucket
1, 656, 816, 848, 880, 1, 4294967296, 0, 0, 4294967296, 1, 1, 4294967297, 4294967296, 4294967296, 4294967296, 1, 4294967297, 0, 0, 0, 0, 0, 1, 4294967296, 0, 1, 1, 0, 4294967297, 4294967296, 0, 0, 4294967296, 4294967296, 0, 1, 1, 0, 4294967296, 0, 4294967296, 1, 1, 1, 1, 4294967296, 4294967297, 0, 4294967297, 4294967296, 0, 0, 0, 4294967297, 1, 1, 4294967297, 4294967296, 0, 4294967296, 0, 0, 4294967296, 4294967297, 4294967296, 1, 0, 0, 4294967297, 4294967296, 4294967296, 4294967297, 0, 0, 4294967297, 0, 1, 4294967297, 4294967297, 4294967296, 4294967297, 4294967296, 4294967297, 4294967296, 4294967296, 4294967297, 4294967296, 1, 4294967297, 4294967296, 4294967297, 0, 4294967296, 4294967296, 4294967296, 0, 4294967296, 4294967296, 4294967297, 4294967297, 4294967296, 1, 4294967296, 4294967296, 4294967296, 4294967296, 0, 4294967297, 1, 4294967296, 0, 4294967296, 4294967296, 4294967297, 0, 1, 4294967297, 0, 0, 0, 4294967296, 4294967297, 4294967297, 0, 4294967296, 4294967297, 1, 0, 0, 0, 0, 1, 4294967297, 1, 4294967296, 0, 4294967296, 4294967296, 4294967296, 1, 4294967297, 1, 4294967296, 4294967296, 0, 4294967297, 4294967297, 1, 0, 4294967296, 0, 1, 0, 1, 0, 0, 0, 4294967297, 0, 1, 1, 4294967296, 1, 4294967297, 4294967297, 1, 4294967296, 4294967297, 4294967297, 1, 0, 0, 4294967297, 4294967296, 0, 4294967297, 4294967297, 4294967297, 4294967296, 4294967296, 0, 0, 1, 0, 0, 1, 4294967296, 1, 4294967296, 4294967296, 1, 4294967297, 1, 4294967297, 1, 4294967296, 4294967297, 4294967297, 4294967296, 4294967296, 4294967297, 4294967296, 4294967296, 1, 4294967297, 4294967297, 0, 4294967297, 4294967296, 0, 0, 1, 4294967296, 0, 4294967297, 4294967297, 1, 0, 4294967296, 0, 4294967296, 0, 1, 4294967296, 1, 4294967297, 1, 0, 1, 4294967296, 1, 4294967296, 1, 4294967297, 4294967296, 0, 4294967296, 4294967296, 0, 1, 0, 4294967297, 4294967297, 1, 4294967297, 4294967296, 1, 0, 4294967297, 4294967296, 0, 0, 4294967296, 0, 0, 4294967297, 1, 0, 4294967296, 4294967297, 1, 4294967297, 4294967297, 0, 4294967296, 1, 4294967297, 4294967297, 4294967297, 4294967296, 0, 4294967297, 4294967297, 1, 0, 4294967297, 4294967297, 0, 4294967296, 0, 0, 4294967296, 1, 4294967297, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 4294967297, 4294967297, 1, 0, 4294967296, 1, 4294967297, 1, 0, 4294967297, 1, 0, 4294967297, 4294967297, 4294967297, 1, 1, 0, 4294967296, 4294967297, 4294967296, 4294967297, 0, 4294967297, 1, 0, 1, 1, 1, 4294967297, 4294967297, 1, 4294967296, 4294967297, 1, 1, 4294967297, 4294967296, 4294967296, 4294967296, 4294967297, 4294967296, 0, 0, 4294967296, 0, 1, 1, 4294967297, 4294967297, 4294967297, 1, 1, 0, 1, 1, 4294967296, 4294967296, 0, 0, 0, 4294967297, 4294967296, 0, 4294967297, 4294967296, 4294967297, 0, 4294967297, 1, 4294967296, 1, 1, 1, 4294967296, 4294967297, 1, 0, 4294967297, 0, 0, 4294967297, 0, 4294967296, 1, 4294967297, 4294967296, 0, 4294967296, 4294967297, 0, 1, 4294967296, 4294967297, 1, 4294967296, 0, 4294967296, 0, 4294967296, 4294967296, 0, 0, 0, 0, 0, 4294967297, 4294967296, 4294967296, 4294967297, 0, 4294967297, 4294967296, 0, 1, 1, 4294967297, 1, 4294967296, 1, 0, 4294967297, 1, 1, 4294967296, 0, 0, 4294967296, 4294967296, 0, 4294967297, 0, 4294967297, 4294967297, 0, 4294967297, 0, 1, 0, 1, 4294967297, 1, 1, 1, 0, 4294967296, 4294967296, 4294967297, 1, 4294967296, 1, 0, 4294967297, 4294967296, 0, 4294967297, 4294967296, 1, 4294967296, 4294967297, 0, 4294967296, 0, 0, 0, 0, 4294967297, 4294967296, 4294967296, 4294967297, 0, 1, 4294967296, 4294967296, 0, 4294967297, 1, 4294967297, 0, 1, 4294967296, 1, 4294967296, 4294967297, 4294967296, 0, 1, 4294967296, 4294967296, 4294967297, 0, 0, 4294967296, 0, 0, 4294967297, 4294967297, 0, 0, 4294967297, 4294967296, 4294967297, 0, 0, 1, 4294967297, 0, 4294967297, 0, 0, 4294967297, 0, 0, 4294967296, 0, 0, 4294967297, 1, 4294967297, 4294967297, 4294967297, 0, 0, 4294967296, 4294967297, 0, 4294967297, 1, 0, 0, 0, 4294967297, 4294967296, 0, 0, 4294967297, 1, 4294967297, 1, 1, 4294967296, 0, 4294967296, 0, 1, 0, 4294967297, 1, 4294967296, 0, 4294967296, 4294967297, 4294967297, 4294967297, 0, 1, 1, 4294967296, 4294967296, 0, 4294967296, 0, 4294967296, 4294967297, 4294967296, 4294967297, 4294967297, 1, 4294967297, 4294967296, 0, 0, 4294967297, 4294967297, 4294967296, 4294967296, 4294967297, 4294967296, 4294967296, 0, 1, 4294967296, 4294967296, 1, 4294967297, 4294967296, 0, 0, 4294967297, 1, 1, 4294967297, 4294967296, 1, 0, 1, 4294967296, 4294967297, 4294967297, 4294967297, 1, 1, 0, 4294967297, 4294967296, 0, 4294967296, 1, 1, 0, 4294967297, 4294967297, 0, 4294967296, 4294967297, 0, 4294967297, 4294967297, 4294967297, 4294967296, 0, 0, 4294967297, 0, 4294967296, 4294967297, 4294967296, 0, 4294967297, 0, 4294967297, 4294967296, 4294967297, 4294967296, 0, 1, 4294967297, 4294967296, 4294967297, 0, 4294967297, 4294967296, 1, 4294967297, 4294967296, 0, 1, 0, 4294967297, 1, 4294967296, 0, 4294967296, 4294967297, 1, 4294967297, 0, 1, 4294967296, 4294967296, 4294967296, 4294967297, 4294967297, 4294967297, 4294967296, 4294967296, 4294967297, 4294967297, 1, 0, 1, 0, 4294967297, 0, 1, 0, 4294967296, 4294967296, 4294967296, 4294967296, 0, 1, 1, 4294967297, 1, 1, 4294967297, 1, 4294967296, 4294967297, 4294967297, 4294967296, 1, 4294967297, 4294967296, 1, 1, 1, 1, 1, 0, 4294967296, 4294967297, 1, 0, 1, 4294967297, 4294967296, 0, 0, 4294967297, 4294967297, 1, 4294967297, 1, 1, 4294967297, 1, 4294967297, 0, 1, 1, 4294967297, 1, 4294967297, 4294967297, 4294967297, 4294967297, 4294967296, 0, 0, 4294967297, 0, 4294967296, 0, 0, 0, 4294967297, 1, 4294967297, 0, 4294967296, 0, 0, 4294967296, 1, 0, 4294967296, 0, 0, 4294967296, 4294967296, 1, 4294967296, 4294967297, 0, 4294967297, 0, 0, 0, 0, 1, 1, 4294967296, 4294967297, 4294967296, 4294967297, 1, 4294967296, 4294967297, 4294967296, 0, 4294967297, 0, 0, 0, 0, 0, 1, 4294967296, 4294967296, 4294967297, 4294967296, 4294967296, 4294967296, 1, 4294967296, 4294967296, 1, 1, 0, 0, 4294967297, 4294967296, 4294967296, 4294967297, 1, 0, 4294967297, 4294967296, 0, 4294967296, 4294967296, 1, 0, 4294967296, 4294967296, 4294967297, 0, 0, 4294967296, 1, 4294967297, 0, 4294967296, 4294967296, 4294967297, 4294967296, 4294967297, 4294967296, 0, 1, 4294967297, 1, 1, 0, 0, 1, 0, 1, 1, 4294967296, 0, 1, 0, 1, 4294967297, 1, 1, 4294967296, 1, 0, 4294967297, 0, 0, 4294967296, 1, 4294967297, 0, 4294967296, 0, 0, 4294967297, 4294967296, 4294967297, 1, 1, 4294967296, 4294967297, 4294967297, 4294967296, 4294967296, 4294967296, 1, 0, 4294967296, 4294967297, 0, 1, 4294967296, 4294967296, 1, 0, 4294967296, 0, 1, 1, 4294967297, 4294967296, 4294967297, 4294967296, 4294967296, 1, 4294967297, 0, 4294967296, 0, 0, 4294967297, 4294967296, 1, 0, 0, 1, 4294967296, 4294967297, 4294967297, 1, 1, 4294967296, 0, 4294967297, 0, 0, 0, 1, 0, 4294967297, 4294967296, 1, 0, 4294967297, 4294967296, 4294967296, 4294967297, 4294967296, 4294967297, 4294967296, 0, 1, 1, 0, 0, 4294967296, 4294967297, 1, 1, 0, 1, 0, 4294967296, 4294967297, 4294967297, 0, 0, 1, 1, 1, 4294967296, 0, 1, 4294967297, 4294967296, 1, 4294967296, 1, 4294967296, 4294967297, 1, 1, 1, 0, 1, 1, 4294967297, 4294967297, 1, 4294967297, 0, 1, 4294967296, 0, 4294967297, 0, 4294967297, 4294967296, 4294967297, 4294967297, 1, 4294967297, 4294967296, 4294967296, 1, 4294967296, 4294967296, 4294967296, 4294967296, 4294967296, 0, 0, 0, 1, 0, 0, 1, 0, 0, 4294967297, 1, 4294967296, 4294967296, 4294967296, 1, 1, 4294967297, 4294967297, 4294967296, 4294967296, 4294967297, 4294967296, 4294967297, 4294967296, 0, 0, 0, 0, 4294967297, 1, 1, 0, 4294967296, 4294967296, 1, 0, 4294967297, 0, 1, 4294967297, 1, 0, 4294967296, 4294967297, 4294967297, 4294967297, 4294967296, 4294967296, 0, 1, 
Done.
phase2 kernel done ==================
 rmm_wrap_alloc 1048576 bytes
 rmm_wrap_alloc 4194304 bytes
[       OK ] AxB_dot3_tests_PLUS_TIMES_2.smallxsmallPLUS_TIMES_Cint32_tMboolAint32_tBint32_tXint32_tYint32_tZint32_t (226 ms)
[ RUN      ] AxB_dot3_tests_PLUS_TIMES_2.tinyxtinyPLUS_TIMES_Cint32_tMint32_tAint32_tBint32_tXint32_tYint32_tZint32_t
found device 0
inside fill, using seed 12345
fill_random nrows=32ncols=32 need 1024 values, invsparse = 1
fill_random after alloc values
vdim ready 
vlen ready 
ready to fill p
filling dense
 rmm_wrap_alloc 512 bytes
 rmm_wrap_alloc 512 bytes
inside fill, using seed 54321
fill_random nrows=32ncols=32 need 1024 values, invsparse = 1
fill_random after alloc values
vdim ready 
vlen ready 
ready to fill p
filling dense
 rmm_wrap_alloc 256 bytes
 rmm_wrap_alloc 512 bytes
filling matrices
inside fill, using seed 4567
fill_random nrows=32ncols=32 need 32 values, invsparse = 32
fill_random after alloc values
vdim ready 
vlen ready 
ready to fill p
filling sparse
32 nonzeroes left to fill..
2 nonzeroes left to fill..
 rmm_wrap_alloc 256 bytes
 rmm_wrap_alloc 256 bytes
 rmm_wrap_alloc 256 bytes
 rmm_wrap_alloc 256 bytes
 rmm_wrap_alloc 256 bytes
inside fill, using seed 4567
fill_random nrows=32ncols=32 need 32 values, invsparse = 32
fill_random after alloc values
vdim ready 
vlen ready 
ready to fill p
filling sparse
32 nonzeroes left to fill..
2 nonzeroes left to fill..
 rmm_wrap_alloc 256 bytes
 rmm_wrap_alloc 256 bytes
32 slots to fill
all pairs to bucket 5, no filling
done assigning buckets
 rmm_wrap_alloc 3072 bytes
 rmm_wrap_alloc 256 bytes
 rmm_wrap_alloc 256 bytes
 rmm_wrap_alloc 256 bytes
 rmm_wrap_alloc 256 bytes
nthrd: 32, ntasks: 1
Printing nanobuckets
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
Done.
Printing blockbucket
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
Done.
GB_jit_AxB_phase2
#include "GB_jit_AxB_phase2.cuh"
 jit_cache get program GB_jit_AxB_phase2
found memory-cached prog GB_jit_AxB_phase2
 got kernel instance AxB_phase2
found memory-cached prog AxB_phase2
Launching _Z10AxB_phase2PxS_i<<<1,32,0,0>>>(long*,long*,int)
s_0: 1, s_1=1, s_10=1, s_11=1
GB_jit_AxB_phase2end
#include "GB_jit_AxB_phase2end.cuh"
 jit_cache get program GB_jit_AxB_phase2end
found memory-cached prog GB_jit_AxB_phase2end
 got kernel instance AxB_phase2end
found memory-cached prog AxB_phase2end
Launching _Z13AxB_phase2endPxPKxS1_S_S1_P16GB_Matrix_opaquex<<<1,32,0,0>>>(long*,long*,long*,long*,long*,GB_Matrix_opaque*,long)
Printing bucketp
0, 1, 2, 4294967299, 4294967300, 4294967302, 4294967303, 8589934600, 8589934601, 8589934603, 8589934605, 8589934606, 
Done.
Printing bucket
0, 16, 4294967296, 1, 1, 1, 0, 0, 4294967297, 1, 0, 4294967296, 0, 4294967296, 4294967296, 4294967297, 1, 4294967296, 4294967297, 4294967296, 4294967297, 4294967296, 0, 0, 4294967297, 4294967297, 4294967296, 1, 0, 1, 4294967296, 4294967296, 
Done.
phase2 kernel done ==================
[       OK ] AxB_dot3_tests_PLUS_TIMES_2.tinyxtinyPLUS_TIMES_Cint32_tMint32_tAint32_tBint32_tXint32_tYint32_tZint32_t (2 ms)
[ RUN      ] AxB_dot3_tests_PLUS_TIMES_2.smallxsmallPLUS_TIMES_Cint32_tMint32_tAint32_tBint32_tXint32_tYint32_tZint32_t
found device 0
inside fill, using seed 12345
fill_random nrows=1024ncols=1024 need 1048576 values, invsparse = 1
fill_random after alloc values
vdim ready 
vlen ready 
ready to fill p
filling dense
 rmm_wrap_alloc 1024 bytes
 rmm_wrap_alloc 16384 bytes
 rmm_wrap_alloc 16384 bytes
 rmm_wrap_alloc 524288 bytes
 rmm_wrap_alloc 524288 bytes
 rmm_wrap_alloc 1048576 bytes
 rmm_wrap_alloc 1048576 bytes
 rmm_wrap_alloc 524288 bytes
 rmm_wrap_alloc 2097152 bytes
 rmm_wrap_alloc 2097152 bytes
 rmm_wrap_alloc 1048576 bytes
 rmm_wrap_alloc 4194304 bytes
 rmm_wrap_alloc 4194304 bytes
 rmm_wrap_alloc 2097152 bytes
 rmm_wrap_alloc 8388608 bytes
 rmm_wrap_alloc 8388608 bytes
 rmm_wrap_alloc 4194304 bytes
 rmm_wrap_alloc 8388608 bytes
 rmm_wrap_alloc 4194304 bytes
 rmm_wrap_alloc 8388608 bytes
inside fill, using seed 54321
fill_random nrows=1024ncols=1024 need 1048576 values, invsparse = 1
fill_random after alloc values
vdim ready 
vlen ready 
ready to fill p
filling dense
 rmm_wrap_alloc 16384 bytes
 rmm_wrap_alloc 524288 bytes
 rmm_wrap_alloc 524288 bytes
 rmm_wrap_alloc 1048576 bytes
 rmm_wrap_alloc 1048576 bytes
 rmm_wrap_alloc 524288 bytes
 rmm_wrap_alloc 2097152 bytes
 rmm_wrap_alloc 2097152 bytes
 rmm_wrap_alloc 1048576 bytes
 rmm_wrap_alloc 4194304 bytes
 rmm_wrap_alloc 4194304 bytes
 rmm_wrap_alloc 2097152 bytes
 rmm_wrap_alloc 8388608 bytes
 rmm_wrap_alloc 8388608 bytes
 rmm_wrap_alloc 4194304 bytes
 rmm_wrap_alloc 8388608 bytes
 rmm_wrap_alloc 4194304 bytes
filling matrices
inside fill, using seed 4567
fill_random nrows=1024ncols=1024 need 1024 values, invsparse = 1024
fill_random after alloc values
vdim ready 
vlen ready 
ready to fill p
filling sparse
1024 nonzeroes left to fill..
35 nonzeroes left to fill..
inside fill, using seed 4567
fill_random nrows=1024ncols=1024 need 1024 values, invsparse = 1024
fill_random after alloc values
vdim ready 
vlen ready 
ready to fill p
filling sparse
1024 nonzeroes left to fill..
35 nonzeroes left to fill..
 rmm_wrap_alloc 4096 bytes
1024 slots to fill
all pairs to bucket 5, no filling
done assigning buckets
 rmm_wrap_alloc 24576 bytes
 rmm_wrap_alloc 768 bytes
 rmm_wrap_alloc 256 bytes
 rmm_wrap_alloc 8192 bytes
 rmm_wrap_alloc 256 bytes
nthrd: 32, ntasks: 8
Printing nanobuckets

Done.
Printing blockbucket
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
Done.
GB_jit_AxB_phase2
#include "GB_jit_AxB_phase2.cuh"
 jit_cache get program GB_jit_AxB_phase2
found memory-cached prog GB_jit_AxB_phase2
 got kernel instance AxB_phase2
found memory-cached prog AxB_phase2
Launching _Z10AxB_phase2PxS_i<<<1,32,0,0>>>(long*,long*,int)
s_0: 1, s_1=1, s_10=1, s_11=1
GB_jit_AxB_phase2end
#include "GB_jit_AxB_phase2end.cuh"
 jit_cache get program GB_jit_AxB_phase2end
found memory-cached prog GB_jit_AxB_phase2end
 got kernel instance AxB_phase2end
found memory-cached prog AxB_phase2end
Launching _Z13AxB_phase2endPxPKxS1_S_S1_P16GB_Matrix_opaquex<<<8,32,0,0>>>(long*,long*,long*,long*,long*,GB_Matrix_opaque*,long)
Printing bucketp
0, 2, 4, 4294967302, 4294967303, 8589934600, 12884901897, 17179869194, 17179869195, 21474836492, 21474836493, 25769803791, 
Done.
Printing bucket
1, 16, 816, 848, 880, 1, 4294967296, 0, 0, 4294967296, 1, 1, 4294967297, 4294967296, 4294967296, 4294967296, 1, 4294967297, 0, 0, 0, 0, 0, 1, 4294967296, 0, 1, 1, 0, 4294967297, 4294967296, 0, 0, 4294967296, 4294967296, 0, 1, 1, 0, 4294967296, 0, 4294967296, 1, 1, 1, 1, 4294967296, 4294967297, 0, 4294967297, 4294967296, 0, 0, 0, 4294967297, 1, 1, 4294967297, 4294967296, 0, 4294967296, 0, 0, 4294967296, 4294967297, 4294967296, 1, 0, 0, 4294967297, 4294967296, 4294967296, 4294967297, 0, 0, 4294967297, 0, 1, 4294967297, 4294967297, 4294967296, 4294967297, 4294967296, 4294967297, 4294967296, 4294967296, 4294967297, 4294967296, 1, 4294967297, 4294967296, 4294967297, 0, 4294967296, 4294967296, 4294967296, 0, 4294967296, 4294967296, 4294967297, 4294967297, 4294967296, 1, 4294967296, 4294967296, 4294967296, 4294967296, 0, 4294967297, 1, 4294967296, 0, 4294967296, 4294967296, 4294967297, 0, 1, 4294967297, 0, 0, 0, 4294967296, 4294967297, 4294967297, 0, 4294967296, 4294967297, 1, 0, 0, 0, 0, 1, 4294967297, 1, 4294967296, 0, 4294967296, 4294967296, 4294967296, 1, 4294967297, 1, 4294967296, 4294967296, 0, 4294967297, 4294967297, 1, 0, 4294967296, 0, 1, 0, 1, 0, 0, 0, 4294967297, 0, 1, 1, 4294967296, 1, 4294967297, 4294967297, 1, 4294967296, 4294967297, 4294967297, 1, 0, 0, 4294967297, 4294967296, 0, 4294967297, 4294967297, 4294967297, 4294967296, 4294967296, 0, 0, 1, 0, 0, 1, 4294967296, 1, 4294967296, 4294967296, 1, 4294967297, 1, 4294967297, 1, 4294967296, 4294967297, 4294967297, 4294967296, 4294967296, 4294967297, 4294967296, 4294967296, 1, 4294967297, 4294967297, 0, 4294967297, 4294967296, 0, 0, 1, 4294967296, 0, 4294967297, 4294967297, 1, 0, 4294967296, 0, 4294967296, 0, 1, 4294967296, 1, 4294967297, 1, 0, 1, 4294967296, 1, 4294967296, 1, 4294967297, 4294967296, 0, 4294967296, 4294967296, 0, 1, 0, 4294967297, 4294967297, 1, 4294967297, 4294967296, 1, 0, 4294967297, 4294967296, 0, 0, 4294967296, 0, 0, 4294967297, 1, 0, 4294967296, 4294967297, 1, 4294967297, 4294967297, 0, 4294967296, 1, 4294967297, 4294967297, 4294967297, 4294967296, 0, 4294967297, 4294967297, 1, 0, 4294967297, 4294967297, 0, 4294967296, 0, 0, 4294967296, 1, 4294967297, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 4294967297, 4294967297, 1, 0, 4294967296, 1, 4294967297, 1, 0, 4294967297, 1, 0, 4294967297, 4294967297, 4294967297, 1, 1, 0, 4294967296, 4294967297, 4294967296, 4294967297, 0, 4294967297, 1, 0, 1, 1, 1, 4294967297, 4294967297, 1, 4294967296, 4294967297, 1, 1, 4294967297, 4294967296, 4294967296, 4294967296, 4294967297, 4294967296, 0, 0, 4294967296, 0, 1, 1, 4294967297, 4294967297, 4294967297, 1, 1, 0, 1, 1, 4294967296, 4294967296, 0, 0, 0, 4294967297, 4294967296, 0, 4294967297, 4294967296, 4294967297, 0, 4294967297, 1, 4294967296, 1, 1, 1, 4294967296, 4294967297, 1, 0, 4294967297, 0, 0, 4294967297, 0, 4294967296, 1, 4294967297, 4294967296, 0, 4294967296, 4294967297, 0, 1, 4294967296, 4294967297, 1, 4294967296, 0, 4294967296, 0, 4294967296, 4294967296, 0, 0, 0, 0, 0, 4294967297, 4294967296, 4294967296, 4294967297, 0, 4294967297, 4294967296, 0, 1, 1, 4294967297, 1, 4294967296, 1, 0, 4294967297, 1, 1, 4294967296, 0, 0, 4294967296, 4294967296, 0, 4294967297, 0, 4294967297, 4294967297, 0, 4294967297, 0, 1, 0, 1, 4294967297, 1, 1, 1, 0, 4294967296, 4294967296, 4294967297, 1, 4294967296, 1, 0, 4294967297, 4294967296, 0, 4294967297, 4294967296, 1, 4294967296, 4294967297, 0, 4294967296, 0, 0, 0, 0, 4294967297, 4294967296, 4294967296, 4294967297, 0, 1, 4294967296, 4294967296, 0, 4294967297, 1, 4294967297, 0, 1, 4294967296, 1, 4294967296, 4294967297, 4294967296, 0, 1, 4294967296, 4294967296, 4294967297, 0, 0, 4294967296, 0, 0, 4294967297, 4294967297, 0, 0, 4294967297, 4294967296, 4294967297, 0, 0, 1, 4294967297, 0, 4294967297, 0, 0, 4294967297, 0, 0, 4294967296, 0, 0, 4294967297, 1, 4294967297, 4294967297, 4294967297, 0, 0, 4294967296, 4294967297, 0, 4294967297, 1, 0, 0, 0, 4294967297, 4294967296, 0, 0, 4294967297, 1, 4294967297, 1, 1, 4294967296, 0, 4294967296, 0, 1, 0, 4294967297, 1, 4294967296, 0, 4294967296, 4294967297, 4294967297, 4294967297, 0, 1, 1, 4294967296, 4294967296, 0, 4294967296, 0, 4294967296, 4294967297, 4294967296, 4294967297, 4294967297, 1, 4294967297, 4294967296, 0, 0, 4294967297, 4294967297, 4294967296, 4294967296, 4294967297, 4294967296, 4294967296, 0, 1, 4294967296, 4294967296, 1, 4294967297, 4294967296, 0, 0, 4294967297, 1, 1, 4294967297, 4294967296, 1, 0, 1, 4294967296, 4294967297, 4294967297, 4294967297, 1, 1, 0, 4294967297, 4294967296, 0, 4294967296, 1, 1, 0, 4294967297, 4294967297, 0, 4294967296, 4294967297, 0, 4294967297, 4294967297, 4294967297, 4294967296, 0, 0, 4294967297, 0, 4294967296, 4294967297, 4294967296, 0, 4294967297, 0, 4294967297, 4294967296, 4294967297, 4294967296, 0, 1, 4294967297, 4294967296, 4294967297, 0, 4294967297, 4294967296, 1, 4294967297, 4294967296, 0, 1, 0, 4294967297, 1, 4294967296, 0, 4294967296, 4294967297, 1, 4294967297, 0, 1, 4294967296, 4294967296, 4294967296, 4294967297, 4294967297, 4294967297, 4294967296, 4294967296, 4294967297, 4294967297, 1, 0, 1, 0, 4294967297, 0, 1, 0, 4294967296, 4294967296, 4294967296, 4294967296, 0, 1, 1, 4294967297, 1, 1, 4294967297, 1, 4294967296, 4294967297, 4294967297, 4294967296, 1, 4294967297, 4294967296, 1, 1, 1, 1, 1, 0, 4294967296, 4294967297, 1, 0, 1, 4294967297, 4294967296, 0, 0, 4294967297, 4294967297, 1, 4294967297, 1, 1, 4294967297, 1, 4294967297, 0, 1, 1, 4294967297, 1, 4294967297, 4294967297, 4294967297, 4294967297, 4294967296, 0, 0, 4294967297, 0, 4294967296, 0, 0, 0, 4294967297, 1, 4294967297, 0, 4294967296, 0, 0, 4294967296, 1, 0, 4294967296, 0, 0, 4294967296, 4294967296, 1, 4294967296, 4294967297, 0, 4294967297, 0, 0, 0, 0, 1, 1, 4294967296, 4294967297, 4294967296, 4294967297, 1, 4294967296, 4294967297, 4294967296, 0, 4294967297, 0, 0, 0, 0, 0, 1, 4294967296, 4294967296, 4294967297, 4294967296, 4294967296, 4294967296, 1, 4294967296, 4294967296, 1, 1, 0, 0, 4294967297, 4294967296, 4294967296, 4294967297, 1, 0, 4294967297, 4294967296, 0, 4294967296, 4294967296, 1, 0, 4294967296, 4294967296, 4294967297, 0, 0, 4294967296, 1, 4294967297, 0, 4294967296, 4294967296, 4294967297, 4294967296, 4294967297, 4294967296, 0, 1, 4294967297, 1, 1, 0, 0, 1, 0, 1, 1, 4294967296, 0, 1, 0, 1, 4294967297, 1, 1, 4294967296, 1, 0, 4294967297, 0, 0, 4294967296, 1, 4294967297, 0, 4294967296, 0, 0, 4294967297, 4294967296, 4294967297, 1, 1, 4294967296, 4294967297, 4294967297, 4294967296, 4294967296, 4294967296, 1, 0, 4294967296, 4294967297, 0, 1, 4294967296, 4294967296, 1, 0, 4294967296, 0, 1, 1, 4294967297, 4294967296, 4294967297, 4294967296, 4294967296, 1, 4294967297, 0, 4294967296, 0, 0, 4294967297, 4294967296, 1, 0, 0, 1, 4294967296, 4294967297, 4294967297, 1, 1, 4294967296, 0, 4294967297, 0, 0, 0, 1, 0, 4294967297, 4294967296, 1, 0, 4294967297, 4294967296, 4294967296, 4294967297, 4294967296, 4294967297, 4294967296, 0, 1, 1, 0, 0, 4294967296, 4294967297, 1, 1, 0, 1, 0, 4294967296, 4294967297, 4294967297, 0, 0, 1, 1, 1, 4294967296, 0, 1, 4294967297, 4294967296, 1, 4294967296, 1, 4294967296, 4294967297, 1, 1, 1, 0, 1, 1, 4294967297, 4294967297, 1, 4294967297, 0, 1, 4294967296, 0, 4294967297, 0, 4294967297, 4294967296, 4294967297, 4294967297, 1, 4294967297, 4294967296, 4294967296, 1, 4294967296, 4294967296, 4294967296, 4294967296, 4294967296, 0, 0, 0, 1, 0, 0, 1, 0, 0, 4294967297, 1, 4294967296, 4294967296, 4294967296, 1, 1, 4294967297, 4294967297, 4294967296, 4294967296, 4294967297, 4294967296, 4294967297, 4294967296, 0, 0, 0, 0, 4294967297, 1, 1, 0, 4294967296, 4294967296, 1, 0, 4294967297, 0, 1, 4294967297, 1, 0, 4294967296, 4294967297, 4294967297, 4294967297, 4294967296, 4294967296, 0, 1, 
Done.
phase2 kernel done ==================
 rmm_wrap_alloc 1048576 bytes
 rmm_wrap_alloc 4194304 bytes
[       OK ] AxB_dot3_tests_PLUS_TIMES_2.smallxsmallPLUS_TIMES_Cint32_tMint32_tAint32_tBint32_tXint32_tYint32_tZint32_t (229 ms)
[----------] 4 tests from AxB_dot3_tests_PLUS_TIMES_2 (475 ms total)

[----------] 4 tests from AxB_dot3_tests_PLUS_TIMES_3
[ RUN      ] AxB_dot3_tests_PLUS_TIMES_3.tinyxtinyPLUS_TIMES_Cint32_tMboolAint32_tBint32_tXint32_tYint32_tZint32_t
Getting test data
Creating problem gen
filling matrices
inside fill, using seed 4567
fill_random nrows=32ncols=32 need 32 values, invsparse = 32
fill_random after alloc values
vdim ready 
vlen ready 
ready to fill p
filling sparse
32 nonzeroes left to fill..
2 nonzeroes left to fill..
 rmm_wrap_alloc 256 bytes
 rmm_wrap_alloc 256 bytes
 rmm_wrap_alloc 256 bytes
 rmm_wrap_alloc 256 bytes
 rmm_wrap_alloc 512 bytes
inside fill, using seed 4567
fill_random nrows=32ncols=32 need 32 values, invsparse = 32
fill_random after alloc values
vdim ready 
vlen ready 
ready to fill p
filling sparse
32 nonzeroes left to fill..
2 nonzeroes left to fill..
 rmm_wrap_alloc 512 bytes
inside fill, using seed 543210
fill_random nrows=32ncols=32 need 1024 values, invsparse = 1
fill_random after alloc values
vdim ready 
vlen ready 
ready to fill p
filling dense
 rmm_wrap_alloc 256 bytes
 rmm_wrap_alloc 512 bytes
 rmm_wrap_alloc 512 bytes
inside fill, using seed 32
fill_random nrows=32ncols=32 need 1024 values, invsparse = 1
fill_random after alloc values
vdim ready 
vlen ready 
ready to fill p
filling dense
 rmm_wrap_alloc 256 bytes
 rmm_wrap_alloc 512 bytes
32 slots to fill
all pairs to bucket 1, no filling
done assigning buckets
Building semiring factgory
 calling stringify semiring: 0x7f1ff50e0200
inside enumify: 0x7f1ff50e0200

    GraphBLAS Semiring: semiring (user-defined)
    GraphBLAS Monoid: semiring->add (built-in)
    GraphBLAS BinaryOp: monoid->op (built-in) z=plus(x,y)
    GraphBLAS type: ztype int32_t size: 4
    GraphBLAS type: xtype int32_t size: 4
    GraphBLAS type: ytype int32_t size: 4
    identity: [   0 ] 

    GraphBLAS BinaryOp: semiring->multiply (built-in) z=times(x,y)
    GraphBLAS type: ztype int32_t size: 4
    GraphBLAS type: xtype int32_t size: 4
    GraphBLAS type: ytype int32_t size: 4
Getting semiring add
Getting semiring mult
Getting semiring add op
Getting types
Getting opcodes
Getting typecodes
Performing asserts
Invoking boolean rename
Invoking boolean rename
Invoking enumify binop
e 14
Invoking enumify monoid
Calling enumify binop
Inside plus binop code
e 11
Calling enumify identity
Calling enumify terminal
Done enumify monoid
Done invoking enumify monoid
atype
btype
ctype
Invoking enumify_mask, mtype 0x7f2028b57180
GB_enumify_mask gets mcode: 1 Mask_struct: 0 Mask_comp: 0
got mask_ecode: 4
constructing semiring scode
before: add_ecode: 11, id_ecode: 0, term_ecode: 31, mult_ecode: 14, flipxy: 0, zcode: 6, xcode: 6, ycode: 6, mask_ecode: 4, ccode: 6, acode: 6, bcode: 6, csparsity: 0, msparsity: 0, asparsity: 0, bsparsity: 0
serialized_scode: 397409434374399488
done enumify semiring
scode=397409434374399488
done stringify semiring
 returned from  stringify semiring
 rmm_wrap_alloc 256 bytes
 rmm_wrap_alloc 256 bytes
32 slots to fill
all pairs to bucket 1, no filling
done assigning buckets
bucket 1 has 32 dots to do
LAUNCHING BUCKET CODE: 1
INside get cached file
looking for prog in file /home/cjnolet/.SuiteSparse/GraphBLAS/6.3.0/GB_semiring_397409434374399488.h
opening /home/cjnolet/.SuiteSparse/GraphBLAS/6.3.0/GB_semiring_397409434374399488.h for write
about to close
 read cache file /home/cjnolet/.SuiteSparse/GraphBLAS/6.3.0/GB_semiring_397409434374399488.h
successful_read: 1
Just closed
 jit_cache get program GB_jit_AxB_dot3_phase3_dndn
about to close
 read cache file /home/cjnolet/.SuiteSparse/GraphBLAS/6.3.0/GB_jit_AxB_dot3_phase3_dndn
 got kernel instance AxB_dot3_phase3_dndn_int32_t_int32_t_int32_t
about to close
 read cache file /home/cjnolet/.SuiteSparse/GraphBLAS/6.3.0/AxB_dot3_phase3_dndn_int32_t_int32_t_int32_t
---------------------------------------
--- Linker for void AxB_dot3_phase3_dndn<int, int, int>(long long, long long, long long*, GB_Matrix_opaque*, GB_Matrix_opaque*, GB_Matrix_opaque*, GB_Matrix_opaque*, int) ---
---------------------------------------
info    : 40 bytes gmem
info    : Function properties for '_Z20AxB_dot3_phase3_dndnIiiiEvxxPxP16GB_Matrix_opaqueS2_S2_S2_i':
info    : used 98 registers, 320 stack, 0 bytes smem, 412 bytes cmem[0], 0 bytes lmem


---------------------------------------
Launching _Z20AxB_dot3_phase3_dndnIiiiEvxxPxP16GB_Matrix_opaqueS2_S2_S2_i<<<1,32,0,0>>>(long,long,long*,GB_Matrix_opaque*,GB_Matrix_opaque*,GB_Matrix_opaque*,GB_Matrix_opaque*,int)
tid=0, i,j = 6,0  nnzA= 32, nnzB=32
tid=0, i,j = 1,1  nnzA= 32, nnzB=32
tid=0, i,j = 12,3  nnzA= 32, nnzB=32
tid=0, i,j = 17,3  nnzA= 32, nnzB=32
tid=0, i,j = 19,4  nnzA= 32, nnzB=32
tid=0, i,j = 19,5  nnzA= 32, nnzB=32
tid=0, i,j = 22,6  nnzA= 32, nnzB=32
tid=0, i,j = 24,6  nnzA= 32, nnzB=32
tid=0, i,j = 10,8  nnzA= 32, nnzB=32
tid=0, i,j = 19,9  nnzA= 32, nnzB=32
tid=0, i,j = 31,9  nnzA= 32, nnzB=32
tid=0, i,j = 13,11  nnzA= 32, nnzB=32
tid=0, i,j = 11,12  nnzA= 32, nnzB=32
tid=0, i,j = 24,14  nnzA= 32, nnzB=32
tid=0, i,j = 30,15  nnzA= 32, nnzB=32
tid=0, i,j = 20,16  nnzA= 32, nnzB=32
tid=0, i,j = 30,17  nnzA= 32, nnzB=32
tid=0, i,j = 18,18  nnzA= 32, nnzB=32
tid=0, i,j = 1,19  nnzA= 32, nnzB=32
tid=0, i,j = 25,20  nnzA= 32, nnzB=32
tid=0, i,j = 24,21  nnzA= 32, nnzB=32
tid=0, i,j = 27,21  nnzA= 32, nnzB=32
tid=0, i,j = 30,22  nnzA= 32, nnzB=32
tid=0, i,j = 30,23  nnzA= 32, nnzB=32
tid=0, i,j = 14,24  nnzA= 32, nnzB=32
tid=0, i,j = 4,25  nnzA= 32, nnzB=32
tid=0, i,j = 15,26  nnzA= 32, nnzB=32
tid=0, i,j = 28,27  nnzA= 32, nnzB=32
tid=0, i,j = 16,28  nnzA= 32, nnzB=32
tid=0, i,j = 9,29  nnzA= 32, nnzB=32
tid=0, i,j = 24,30  nnzA= 32, nnzB=32
tid=0, i,j = 31,31  nnzA= 32, nnzB=32
Printing bucketp
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
Done.
returned from kernel 5.1968ms

  32x32 GraphBLAS int32_t matrix, sparse (jumbled) by row
  sparsity control: sparse only
  C GPU, 32 entries, memory: 1.1 KB

    (0,6)   11
    (1,1)   10
    (3,12)   7
    (3,17)   6
    (4,19)   8
    (5,19)   10
    (6,22)   6
    (6,24)   9
    (8,10)   7
    (9,19)   8
    (9,31)   6
    (11,13)   8
    (12,11)   6
    (14,24)   10
    (15,30)   9
    (16,20)   5
    (17,30)   7
    (18,18)   12
    (19,1)   6
    (20,25)   7
    (21,24)   9
    (21,27)   6
    (22,30)   8
    (23,30)   11
    (24,14)   7
    (25,4)   9
    (26,15)   4
    (27,28)   5
    (28,16)   4
    ...
Not using cuda path. M_is_hypersparse: 0, A->iso: 0, B->iso: 0, A_BITMAP: 0, B_BITMAP: 0, GB_IS_FULL(A): 0, GB_IS_FULL(B): 0, semiring header size: 32
 rmm_wrap_alloc 512 bytes
 rmm_wrap_alloc 512 bytes

  32x32 GraphBLAS bool matrix, sparse by row
  sparsity control: sparse only
  M actual, 32 entries, memory: 1.0 KB

    (0,6)   1
    (1,1)   1
    (3,12)   1
    (3,17)   1
    (4,19)   1
    (5,19)   1
    (6,22)   1
    (6,24)   1
    (8,10)   1
    (9,19)   1
    (9,31)   1
    (11,13)   1
    (12,11)   1
    (14,24)   1
    (15,30)   1
    (16,20)   1
    (17,30)   1
    (18,18)   1
    (19,1)   1
    (20,25)   1
    (21,24)   1
    (21,27)   1
    (22,30)   1
    (23,30)   1
    (24,14)   1
    (25,4)   1
    (26,15)   1
    (27,28)   1
    (28,16)   1
    ...

  32x32 GraphBLAS int32_t matrix, sparse by row
  sparsity control: sparse only
  C GPU, 32 entries, memory: 1.1 KB

    (0,6)   11
    (1,1)   10
    (3,12)   7
    (3,17)   6
    (4,19)   8
    (5,19)   10
    (6,22)   6
    (6,24)   9
    (8,10)   7
    (9,19)   8
    (9,31)   6
    (11,13)   8
    (12,11)   6
    (14,24)   10
    (15,30)   9
    (16,20)   5
    (17,30)   7
    (18,18)   12
    (19,1)   6
    (20,25)   7
    (21,24)   9
    (21,27)   6
    (22,30)   8
    (23,30)   11
    (24,14)   7
    (25,4)   9
    (26,15)   4
    (27,28)   5
    (28,16)   4
    (29,9)   7
    (30,24)   10
    (31,31)   10


  32x32 GraphBLAS int32_t matrix, sparse by row
  C_actual, 32 entries, memory: 1.5 KB

    (0,6)   11
    (1,1)   10
    (3,12)   7
    (3,17)   6
    (4,19)   8
    (5,19)   10
    (6,22)   6
    (6,24)   9
    (8,10)   7
    (9,19)   8
    (9,31)   6
    (11,13)   8
    (12,11)   6
    (14,24)   10
    (15,30)   9
    (16,20)   5
    (17,30)   7
    (18,18)   12
    (19,1)   6
    (20,25)   7
    (21,24)   9
    (21,27)   6
    (22,30)   8
    (23,30)   11
    (24,14)   7
    (25,4)   9
    (26,15)   4
    (27,28)   5
    (28,16)   4
    (29,9)   7
    (30,24)   10
    (31,31)   10

 rmm_wrap_alloc 256 bytes
 rmm_wrap_alloc 256 bytes
 rmm_wrap_alloc 512 bytes
 rmm_wrap_alloc 256 bytes
 rmm_wrap_alloc 256 bytes

  32x32 GraphBLAS double matrix, sparse by row
  Diff actual, 32 entries, memory: 1.2 KB

    (0,6)    0
    (1,1)    0
    (3,12)    0
    (3,17)    0
    (4,19)    0
    (5,19)    0
    (6,22)    0
    (6,24)    0
    (8,10)    0
    (9,19)    0
    (9,31)    0
    (11,13)    0
    (12,11)    0
    (14,24)    0
    (15,30)    0
    (16,20)    0
    (17,30)    0
    (18,18)    0
    (19,1)    0
    (20,25)    0
    (21,24)    0
    (21,27)    0
    (22,30)    0
    (23,30)    0
    (24,14)    0
    (25,4)    0
    (26,15)    0
    (27,28)    0
    (28,16)    0
    (29,9)    0
    (30,24)    0
    (31,31)    0


  32x32 GraphBLAS bool matrix, sparse by row
  T actual, 32 entries, memory: 1.0 KB

    (0,6)   1
    (1,1)   1
    (3,12)   1
    (3,17)   1
    (4,19)   1
    (5,19)   1
    (6,22)   1
    (6,24)   1
    (8,10)   1
    (9,19)   1
    (9,31)   1
    (11,13)   1
    (12,11)   1
    (14,24)   1
    (15,30)   1
    (16,20)   1
    (17,30)   1
    (18,18)   1
    (19,1)   1
    (20,25)   1
    (21,24)   1
    (21,27)   1
    (22,30)   1
    (23,30)   1
    (24,14)   1
    (25,4)   1
    (26,15)   1
    (27,28)   1
    (28,16)   1
    ...
 work:32 gpus:0 Getting test data
Creating problem gen
filling matrices
inside fill, using seed 4567
fill_random nrows=32ncols=32 need 32 values, invsparse = 32
fill_random after alloc values
vdim ready 
vlen ready 
ready to fill p
filling sparse
32 nonzeroes left to fill..
2 nonzeroes left to fill..
 rmm_wrap_alloc 256 bytes
 rmm_wrap_alloc 256 bytes
inside fill, using seed 4567
fill_random nrows=32ncols=32 need 32 values, invsparse = 32
fill_random after alloc values
vdim ready 
vlen ready 
ready to fill p
filling sparse
32 nonzeroes left to fill..
2 nonzeroes left to fill..
inside fill, using seed 543210
fill_random nrows=32ncols=32 need 1024 values, invsparse = 1
fill_random after alloc values
vdim ready 
vlen ready 
ready to fill p
filling dense
 rmm_wrap_alloc 512 bytes
 rmm_wrap_alloc 512 bytes
inside fill, using seed 32
fill_random nrows=32ncols=32 need 160 values, invsparse = 7
fill_random after alloc values
vdim ready 
vlen ready 
ready to fill p
filling sparse
160 nonzeroes left to fill..
62 nonzeroes left to fill..
 rmm_wrap_alloc 2048 bytes
 rmm_wrap_alloc 1024 bytes
 rmm_wrap_alloc 256 bytes
 rmm_wrap_alloc 256 bytes
 rmm_wrap_alloc 256 bytes
32 slots to fill
all pairs to bucket 5, no filling
done assigning buckets
Building semiring factgory
 calling stringify semiring: 0x7f1fea03f000
inside enumify: 0x7f1fea03f000

    GraphBLAS Semiring: semiring (user-defined)
    GraphBLAS Monoid: semiring->add (built-in)
    GraphBLAS BinaryOp: monoid->op (built-in) z=plus(x,y)
    GraphBLAS type: ztype int32_t size: 4
    GraphBLAS type: xtype int32_t size: 4
    GraphBLAS type: ytype int32_t size: 4
    identity: [   0 ] 

    GraphBLAS BinaryOp: semiring->multiply (built-in) z=times(x,y)
    GraphBLAS type: ztype int32_t size: 4
    GraphBLAS type: xtype int32_t size: 4
    GraphBLAS type: ytype int32_t size: 4
Getting semiring add
Getting semiring mult
Getting semiring add op
Getting types
Getting opcodes
Getting typecodes
Performing asserts
Invoking boolean rename
Invoking boolean rename
Invoking enumify binop
e 14
Invoking enumify monoid
Calling enumify binop
Inside plus binop code
e 11
Calling enumify identity
Calling enumify terminal
Done enumify monoid
Done invoking enumify monoid
atype
btype
ctype
Invoking enumify_mask, mtype 0x7f2028b57180
GB_enumify_mask gets mcode: 1 Mask_struct: 0 Mask_comp: 0
got mask_ecode: 4
constructing semiring scode
before: add_ecode: 11, id_ecode: 0, term_ecode: 31, mult_ecode: 14, flipxy: 0, zcode: 6, xcode: 6, ycode: 6, mask_ecode: 4, ccode: 6, acode: 6, bcode: 6, csparsity: 0, msparsity: 0, asparsity: 0, bsparsity: 0
serialized_scode: 397409434374399488
done enumify semiring
scode=397409434374399488
done stringify semiring
 returned from  stringify semiring
 rmm_wrap_alloc 256 bytes
 rmm_wrap_alloc 256 bytes
32 slots to fill
all pairs to bucket 5, no filling
done assigning buckets
bucket 5 has 32 dots to do
LAUNCHING BUCKET CODE: 5
Confiring spdnINside get cached file
looking for prog in file /home/cjnolet/.SuiteSparse/GraphBLAS/6.3.0/GB_semiring_397409434374399488.h
opening /home/cjnolet/.SuiteSparse/GraphBLAS/6.3.0/GB_semiring_397409434374399488.h for write
about to close
 read cache file /home/cjnolet/.SuiteSparse/GraphBLAS/6.3.0/GB_semiring_397409434374399488.h
successful_read: 1
Just closed
 jit_cache get program GB_jit_AxB_dot3_phase3_spdn
about to close
 read cache file /home/cjnolet/.SuiteSparse/GraphBLAS/6.3.0/GB_jit_AxB_dot3_phase3_spdn
 got kernel instance AxB_dot3_phase3_spdn_int32_t_int32_t_int32_t
about to close
 read cache file /home/cjnolet/.SuiteSparse/GraphBLAS/6.3.0/AxB_dot3_phase3_spdn_int32_t_int32_t_int32_t
---------------------------------------
--- Linker for void AxB_dot3_phase3_spdn<int, int, int>(long long, long long, long long*, GB_Matrix_opaque*, GB_Matrix_opaque*, GB_Matrix_opaque*, GB_Matrix_opaque*, int) ---
---------------------------------------
info    : 0 bytes gmem
info    : Function properties for '_Z20AxB_dot3_phase3_spdnIiiiEvxxPxP16GB_Matrix_opaqueS2_S2_S2_i':
info    : used 112 registers, 296 stack, 0 bytes smem, 412 bytes cmem[0], 0 bytes lmem


---------------------------------------
Launching _Z20AxB_dot3_phase3_spdnIiiiEvxxPxP16GB_Matrix_opaqueS2_S2_S2_i<<<1,32,0,0>>>(long,long,long*,GB_Matrix_opaque*,GB_Matrix_opaque*,GB_Matrix_opaque*,GB_Matrix_opaque*,int)
Printing bucketp
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
Done.
returned from kernel 2.00294ms

  32x32 GraphBLAS int32_t matrix, sparse (jumbled) by row
  sparsity control: sparse only
  C GPU, 32 entries, memory: 1.1 KB
  pending tuples: 0 max pending: 0 zombies: 6

    (0,6) zombie
    (1,1)   2
    (3,12)   2
    (3,17)   2
    (4,19) zombie
    (5,19) zombie
    (6,22)   2
    (6,24)   0
    (8,10)   0
    (9,19) zombie
    (9,31)   4
    (11,13)   3
    (12,11)   2
    (14,24)   1
    (15,30)   1
    (16,20)   0
    (17,30)   0
    (18,18) zombie
    (19,1)   3
    (20,25) zombie
    (21,24)   1
    (21,27)   0
    (22,30)   1
    (23,30)   0
    (24,14)   1
    (25,4)   0
    (26,15)   1
    (27,28)   2
    (28,16)   1
    ...
Not using cuda path. M_is_hypersparse: 0, A->iso: 0, B->iso: 0, A_BITMAP: 0, B_BITMAP: 0, GB_IS_FULL(A): 0, GB_IS_FULL(B): 0, semiring header size: 32
 rmm_wrap_alloc 512 bytes
 rmm_wrap_alloc 512 bytes
 rmm_wrap_alloc 512 bytes

  32x32 GraphBLAS bool matrix, sparse by row
  sparsity control: sparse only
  M actual, 32 entries, memory: 1.0 KB

    (0,6)   1
    (1,1)   1
    (3,12)   1
    (3,17)   1
    (4,19)   1
    (5,19)   1
    (6,22)   1
    (6,24)   1
    (8,10)   1
    (9,19)   1
    (9,31)   1
    (11,13)   1
    (12,11)   1
    (14,24)   1
    (15,30)   1
    (16,20)   1
    (17,30)   1
    (18,18)   1
    (19,1)   1
    (20,25)   1
    (21,24)   1
    (21,27)   1
    (22,30)   1
    (23,30)   1
    (24,14)   1
    (25,4)   1
    (26,15)   1
    (27,28)   1
    (28,16)   1
    ...

  32x32 GraphBLAS int32_t matrix, sparse by row
  sparsity control: sparse only
  C GPU, 26 entries, memory: 1.1 KB

    (1,1)   2
    (3,12)   2
    (3,17)   2
    (6,22)   2
    (6,24)   0
    (8,10)   0
    (9,31)   4
    (11,13)   3
    (12,11)   2
    (14,24)   1
    (15,30)   1
    (16,20)   0
    (17,30)   0
    (19,1)   3
    (21,24)   1
    (21,27)   0
    (22,30)   1
    (23,30)   0
    (24,14)   1
    (25,4)   0
    (26,15)   1
    (27,28)   2
    (28,16)   1
    (29,9)   0
    (30,24)   1
    (31,31)   2


  32x32 GraphBLAS int32_t matrix, sparse by row
  C_actual, 26 entries, memory: 1.1 KB

    (1,1)   2
    (3,12)   2
    (3,17)   2
    (6,22)   2
    (6,24)   0
    (8,10)   0
    (9,31)   4
    (11,13)   3
    (12,11)   2
    (14,24)   1
    (15,30)   1
    (16,20)   0
    (17,30)   0
    (19,1)   3
    (21,24)   1
    (21,27)   0
    (22,30)   1
    (23,30)   0
    (24,14)   1
    (25,4)   0
    (26,15)   1
    (27,28)   2
    (28,16)   1
    (29,9)   0
    (30,24)   1
    (31,31)   2

 rmm_wrap_alloc 256 bytes
 rmm_wrap_alloc 256 bytes

  32x32 GraphBLAS double matrix, sparse by row
  Diff actual, 26 entries, memory: 1.2 KB

    (1,1)    0
    (3,12)    0
    (3,17)    0
    (6,22)    0
    (6,24)    0
    (8,10)    0
    (9,31)    0
    (11,13)    0
    (12,11)    0
    (14,24)    0
    (15,30)    0
    (16,20)    0
    (17,30)    0
    (19,1)    0
    (21,24)    0
    (21,27)    0
    (22,30)    0
    (23,30)    0
    (24,14)    0
    (25,4)    0
    (26,15)    0
    (27,28)    0
    (28,16)    0
    (29,9)    0
    (30,24)    0
    (31,31)    0


  32x32 GraphBLAS bool matrix, sparse by row
  T actual, 26 entries, memory: 1.0 KB

    (1,1)   1
    (3,12)   1
    (3,17)   1
    (6,22)   1
    (6,24)   1
    (8,10)   1
    (9,31)   1
    (11,13)   1
    (12,11)   1
    (14,24)   1
    (15,30)   1
    (16,20)   1
    (17,30)   1
    (19,1)   1
    (21,24)   1
    (21,27)   1
    (22,30)   1
    (23,30)   1
    (24,14)   1
    (25,4)   1
    (26,15)   1
    (27,28)   1
    (28,16)   1
    (29,9)   1
    (30,24)   1
    (31,31)   1
 work:26 gpus:0 Getting test data
Creating problem gen
filling matrices
inside fill, using seed 4567
fill_random nrows=32ncols=32 need 32 values, invsparse = 32
fill_random after alloc values
vdim ready 
vlen ready 
ready to fill p
filling sparse
32 nonzeroes left to fill..
2 nonzeroes left to fill..
 rmm_wrap_alloc 256 bytes
 rmm_wrap_alloc 256 bytes
inside fill, using seed 4567
fill_random nrows=32ncols=32 need 32 values, invsparse = 32
fill_random after alloc values
vdim ready 
vlen ready 
ready to fill p
filling sparse
32 nonzeroes left to fill..
2 nonzeroes left to fill..
inside fill, using seed 543210
fill_random nrows=32ncols=32 need 64 values, invsparse = 16
fill_random after alloc values
vdim ready 
vlen ready 
ready to fill p
filling sparse
64 nonzeroes left to fill..
21 nonzeroes left to fill..
 rmm_wrap_alloc 256 bytes
 rmm_wrap_alloc 256 bytes
 rmm_wrap_alloc 256 bytes
 rmm_wrap_alloc 512 bytes
 rmm_wrap_alloc 512 bytes
 rmm_wrap_alloc 512 bytes
 rmm_wrap_alloc 512 bytes
 rmm_wrap_alloc 256 bytes
inside fill, using seed 32
fill_random nrows=32ncols=32 need 320 values, invsparse = 4
fill_random after alloc values
vdim ready 
vlen ready 
ready to fill p
filling sparse
320 nonzeroes left to fill..
140 nonzeroes left to fill..
 rmm_wrap_alloc 256 bytes
 rmm_wrap_alloc 256 bytes
 rmm_wrap_alloc 256 bytes
32 slots to fill
all pairs to bucket 6, no filling
done assigning buckets
Building semiring factgory
 calling stringify semiring: 0x7f1ff52fd100
inside enumify: 0x7f1ff52fd100

    GraphBLAS Semiring: semiring (user-defined)
    GraphBLAS Monoid: semiring->add (built-in)
    GraphBLAS BinaryOp: monoid->op (built-in) z=plus(x,y)
    GraphBLAS type: ztype int32_t size: 4
    GraphBLAS type: xtype int32_t size: 4
    GraphBLAS type: ytype int32_t size: 4
    identity: [   0 ] 

    GraphBLAS BinaryOp: semiring->multiply (built-in) z=times(x,y)
    GraphBLAS type: ztype int32_t size: 4
    GraphBLAS type: xtype int32_t size: 4
    GraphBLAS type: ytype int32_t size: 4
Getting semiring add
Getting semiring mult
Getting semiring add op
Getting types
Getting opcodes
Getting typecodes
Performing asserts
Invoking boolean rename
Invoking boolean rename
Invoking enumify binop
e 14
Invoking enumify monoid
Calling enumify binop
Inside plus binop code
e 11
Calling enumify identity
Calling enumify terminal
Done enumify monoid
Done invoking enumify monoid
atype
btype
ctype
Invoking enumify_mask, mtype 0x7f2028b57180
GB_enumify_mask gets mcode: 1 Mask_struct: 0 Mask_comp: 0
got mask_ecode: 4
constructing semiring scode
before: add_ecode: 11, id_ecode: 0, term_ecode: 31, mult_ecode: 14, flipxy: 0, zcode: 6, xcode: 6, ycode: 6, mask_ecode: 4, ccode: 6, acode: 6, bcode: 6, csparsity: 0, msparsity: 0, asparsity: 0, bsparsity: 0
serialized_scode: 397409434374399488
done enumify semiring
scode=397409434374399488
done stringify semiring
 returned from  stringify semiring
 rmm_wrap_alloc 256 bytes
 rmm_wrap_alloc 256 bytes
32 slots to fill
all pairs to bucket 6, no filling
done assigning buckets
bucket 6 has 32 dots to do
LAUNCHING BUCKET CODE: 6
INside get cached file
looking for prog in file /home/cjnolet/.SuiteSparse/GraphBLAS/6.3.0/GB_semiring_397409434374399488.h
opening /home/cjnolet/.SuiteSparse/GraphBLAS/6.3.0/GB_semiring_397409434374399488.h for write
about to close
 read cache file /home/cjnolet/.SuiteSparse/GraphBLAS/6.3.0/GB_semiring_397409434374399488.h
successful_read: 1
Just closed
 jit_cache get program GB_jit_AxB_dot3_phase3_vssp
about to close
 read cache file /home/cjnolet/.SuiteSparse/GraphBLAS/6.3.0/GB_jit_AxB_dot3_phase3_vssp
 got kernel instance AxB_dot3_phase3_vssp_int32_t_int32_t_int32_t
about to close
 read cache file /home/cjnolet/.SuiteSparse/GraphBLAS/6.3.0/AxB_dot3_phase3_vssp_int32_t_int32_t_int32_t
---------------------------------------
--- Linker for void AxB_dot3_phase3_vssp<int, int, int>(long long, long long, long long*, GB_Matrix_opaque*, GB_Matrix_opaque*, GB_Matrix_opaque*, GB_Matrix_opaque*, int) ---
---------------------------------------
info    : 0 bytes gmem
info    : Function properties for '_Z20AxB_dot3_phase3_vsspIiiiEvxxPxP16GB_Matrix_opaqueS2_S2_S2_i':
info    : used 215 registers, 296 stack, 0 bytes smem, 412 bytes cmem[0], 0 bytes lmem


---------------------------------------
Launching _Z20AxB_dot3_phase3_vsspIiiiEvxxPxP16GB_Matrix_opaqueS2_S2_S2_i<<<1,32,0,0>>>(long,long,long*,GB_Matrix_opaque*,GB_Matrix_opaque*,GB_Matrix_opaque*,GB_Matrix_opaque*,int)
Printing bucketp
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
Done.
returned from kernel 2.62758ms

  32x32 GraphBLAS int32_t matrix, sparse by row
  sparsity control: sparse only
  C GPU, 32 entries, memory: 1.1 KB
  pending tuples: 0 max pending: 0 zombies: 15

    (0,6) zombie
    (1,1)   1
    (3,12) zombie
    (3,17)   0
    (4,19) zombie
    (5,19) zombie
    (6,22)   0
    (6,24)   0
    (8,10)   0
    (9,19) zombie
    (9,31)   1
    (11,13) zombie
    (12,11)   0
    (14,24)   1
    (15,30)   1
    (16,20) zombie
    (17,30) zombie
    (18,18) zombie
    (19,1)   1
    (20,25) zombie
    (21,24) zombie
    (21,27)   1
    (22,30)   0
    (23,30)   0
    (24,14) zombie
    (25,4) zombie
    (26,15)   0
    (27,28) zombie
    (28,16)   0
    ...
Not using cuda path. M_is_hypersparse: 0, A->iso: 0, B->iso: 0, A_BITMAP: 0, B_BITMAP: 0, GB_IS_FULL(A): 0, GB_IS_FULL(B): 0, semiring header size: 32
 rmm_wrap_alloc 512 bytes
 rmm_wrap_alloc 512 bytes

  32x32 GraphBLAS bool matrix, sparse by row
  sparsity control: sparse only
  M actual, 32 entries, memory: 1.0 KB

    (0,6)   1
    (1,1)   1
    (3,12)   1
    (3,17)   1
    (4,19)   1
    (5,19)   1
    (6,22)   1
    (6,24)   1
    (8,10)   1
    (9,19)   1
    (9,31)   1
    (11,13)   1
    (12,11)   1
    (14,24)   1
    (15,30)   1
    (16,20)   1
    (17,30)   1
    (18,18)   1
    (19,1)   1
    (20,25)   1
    (21,24)   1
    (21,27)   1
    (22,30)   1
    (23,30)   1
    (24,14)   1
    (25,4)   1
    (26,15)   1
    (27,28)   1
    (28,16)   1
    ...

  32x32 GraphBLAS int32_t matrix, sparse by row
  sparsity control: sparse only
  C GPU, 17 entries, memory: 1.1 KB

    (1,1)   1
    (3,17)   0
    (6,22)   0
    (6,24)   0
    (8,10)   0
    (9,31)   1
    (12,11)   0
    (14,24)   1
    (15,30)   1
    (19,1)   1
    (21,27)   1
    (22,30)   0
    (23,30)   0
    (26,15)   0
    (28,16)   0
    (30,24)   0
    (31,31)   0


  32x32 GraphBLAS int32_t matrix, sparse by row
  C_actual, 17 entries, memory: 1.1 KB

    (1,1)   1
    (3,17)   0
    (6,22)   0
    (6,24)   0
    (8,10)   0
    (9,31)   1
    (12,11)   0
    (14,24)   1
    (15,30)   1
    (19,1)   1
    (21,27)   1
    (22,30)   0
    (23,30)   0
    (26,15)   0
    (28,16)   0
    (30,24)   0
    (31,31)   0

 rmm_wrap_alloc 256 bytes
 rmm_wrap_alloc 256 bytes

  32x32 GraphBLAS double matrix, sparse by row
  Diff actual, 17 entries, memory: 1.2 KB

    (1,1)    0
    (3,17)    0
    (6,22)    0
    (6,24)    0
    (8,10)    0
    (9,31)    0
    (12,11)    0
    (14,24)    0
    (15,30)    0
    (19,1)    0
    (21,27)    0
    (22,30)    0
    (23,30)    0
    (26,15)    0
    (28,16)    0
    (30,24)    0
    (31,31)    0


  32x32 GraphBLAS bool matrix, sparse by row
  T actual, 17 entries, memory: 1.0 KB

    (1,1)   1
    (3,17)   1
    (6,22)   1
    (6,24)   1
    (8,10)   1
    (9,31)   1
    (12,11)   1
    (14,24)   1
    (15,30)   1
    (19,1)   1
    (21,27)   1
    (22,30)   1
    (23,30)   1
    (26,15)   1
    (28,16)   1
    (30,24)   1
    (31,31)   1
 work:17 gpus:0 Getting test data
Creating problem gen
filling matrices
inside fill, using seed 4567
fill_random nrows=32ncols=32 need 32 values, invsparse = 32
fill_random after alloc values
vdim ready 
vlen ready 
ready to fill p
filling sparse
32 nonzeroes left to fill..
2 nonzeroes left to fill..
 rmm_wrap_alloc 256 bytes
 rmm_wrap_alloc 256 bytes
inside fill, using seed 4567
fill_random nrows=32ncols=32 need 32 values, invsparse = 32
fill_random after alloc values
vdim ready 
vlen ready 
ready to fill p
filling sparse
32 nonzeroes left to fill..
2 nonzeroes left to fill..
inside fill, using seed 543210
fill_random nrows=32ncols=32 need 64 values, invsparse = 16
fill_random after alloc values
vdim ready 
vlen ready 
ready to fill p
filling sparse
64 nonzeroes left to fill..
21 nonzeroes left to fill..
 rmm_wrap_alloc 512 bytes
 rmm_wrap_alloc 512 bytes
 rmm_wrap_alloc 512 bytes
 rmm_wrap_alloc 256 bytes
inside fill, using seed 32
fill_random nrows=32ncols=32 need 128 values, invsparse = 8
fill_random after alloc values
vdim ready 
vlen ready 
ready to fill p
filling sparse
128 nonzeroes left to fill..
43 nonzeroes left to fill..
 rmm_wrap_alloc 1024 bytes
 rmm_wrap_alloc 256 bytes
 rmm_wrap_alloc 256 bytes
 rmm_wrap_alloc 256 bytes
32 slots to fill
all pairs to bucket 7, no filling
done assigning buckets
Building semiring factgory
 calling stringify semiring: 0x7f1ff50e0300
inside enumify: 0x7f1ff50e0300

    GraphBLAS Semiring: semiring (user-defined)
    GraphBLAS Monoid: semiring->add (built-in)
    GraphBLAS BinaryOp: monoid->op (built-in) z=plus(x,y)
    GraphBLAS type: ztype int32_t size: 4
    GraphBLAS type: xtype int32_t size: 4
    GraphBLAS type: ytype int32_t size: 4
    identity: [   0 ] 

    GraphBLAS BinaryOp: semiring->multiply (built-in) z=times(x,y)
    GraphBLAS type: ztype int32_t size: 4
    GraphBLAS type: xtype int32_t size: 4
    GraphBLAS type: ytype int32_t size: 4
Getting semiring add
Getting semiring mult
Getting semiring add op
Getting types
Getting opcodes
Getting typecodes
Performing asserts
Invoking boolean rename
Invoking boolean rename
Invoking enumify binop
e 14
Invoking enumify monoid
Calling enumify binop
Inside plus binop code
e 11
Calling enumify identity
Calling enumify terminal
Done enumify monoid
Done invoking enumify monoid
atype
btype
ctype
Invoking enumify_mask, mtype 0x7f2028b57180
GB_enumify_mask gets mcode: 1 Mask_struct: 0 Mask_comp: 0
got mask_ecode: 4
constructing semiring scode
before: add_ecode: 11, id_ecode: 0, term_ecode: 31, mult_ecode: 14, flipxy: 0, zcode: 6, xcode: 6, ycode: 6, mask_ecode: 4, ccode: 6, acode: 6, bcode: 6, csparsity: 0, msparsity: 0, asparsity: 0, bsparsity: 0
serialized_scode: 397409434374399488
done enumify semiring
scode=397409434374399488
done stringify semiring
 returned from  stringify semiring
 rmm_wrap_alloc 256 bytes
 rmm_wrap_alloc 256 bytes
32 slots to fill
all pairs to bucket 7, no filling
done assigning buckets
bucket 7 has 32 dots to do
LAUNCHING BUCKET CODE: 7
INside get cached file
looking for prog in file /home/cjnolet/.SuiteSparse/GraphBLAS/6.3.0/GB_semiring_397409434374399488.h
opening /home/cjnolet/.SuiteSparse/GraphBLAS/6.3.0/GB_semiring_397409434374399488.h for write
about to close
 read cache file /home/cjnolet/.SuiteSparse/GraphBLAS/6.3.0/GB_semiring_397409434374399488.h
successful_read: 1
Just closed
 jit_cache get program GB_jit_AxB_dot3_phase3_vsvs
about to close
 read cache file /home/cjnolet/.SuiteSparse/GraphBLAS/6.3.0/GB_jit_AxB_dot3_phase3_vsvs
 got kernel instance AxB_dot3_phase3_vsvs_int32_t_int32_t_int32_t
about to close
 read cache file /home/cjnolet/.SuiteSparse/GraphBLAS/6.3.0/AxB_dot3_phase3_vsvs_int32_t_int32_t_int32_t
---------------------------------------
--- Linker for void AxB_dot3_phase3_vsvs<int, int, int>(long long, long long, long long*, GB_Matrix_opaque*, GB_Matrix_opaque*, GB_Matrix_opaque*, GB_Matrix_opaque*, int) ---
---------------------------------------
info    : 0 bytes gmem
info    : Function properties for '_Z20AxB_dot3_phase3_vsvsIiiiEvxxPxP16GB_Matrix_opaqueS2_S2_S2_i':
info    : used 88 registers, 336 stack, 128 bytes smem, 412 bytes cmem[0], 0 bytes lmem


---------------------------------------
Launching _Z20AxB_dot3_phase3_vsvsIiiiEvxxPxP16GB_Matrix_opaqueS2_S2_S2_i<<<1,512,0,0>>>(long,long,long*,GB_Matrix_opaque*,GB_Matrix_opaque*,GB_Matrix_opaque*,GB_Matrix_opaque*,int)
Printing bucketp
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
Done.
returned from kernel 2.37363ms

  32x32 GraphBLAS int32_t matrix, sparse (jumbled) by row
  sparsity control: sparse only
  C GPU, 32 entries, memory: 1.1 KB
  pending tuples: 0 max pending: 0 zombies: 24

    (0,6) zombie
    (1,1)   0
    (3,12) zombie
    (3,17)   0
    (4,19) zombie
    (5,19) zombie
    (6,22) zombie
    (6,24) zombie
    (8,10) zombie
    (9,19) zombie
    (9,31)   0
    (11,13) zombie
    (12,11) zombie
    (14,24) zombie
    (15,30)   1
    (16,20) zombie
    (17,30) zombie
    (18,18) zombie
    (19,1)   0
    (20,25) zombie
    (21,24) zombie
    (21,27) zombie
    (22,30) zombie
    (23,30) zombie
    (24,14) zombie
    (25,4)   1
    (26,15) zombie
    (27,28) zombie
    (28,16) zombie
    ...
Not using cuda path. M_is_hypersparse: 0, A->iso: 0, B->iso: 0, A_BITMAP: 0, B_BITMAP: 0, GB_IS_FULL(A): 0, GB_IS_FULL(B): 0, semiring header size: 32
 rmm_wrap_alloc 512 bytes
 rmm_wrap_alloc 512 bytes
 rmm_wrap_alloc 512 bytes

  32x32 GraphBLAS bool matrix, sparse by row
  sparsity control: sparse only
  M actual, 32 entries, memory: 1.0 KB

    (0,6)   1
    (1,1)   1
    (3,12)   1
    (3,17)   1
    (4,19)   1
    (5,19)   1
    (6,22)   1
    (6,24)   1
    (8,10)   1
    (9,19)   1
    (9,31)   1
    (11,13)   1
    (12,11)   1
    (14,24)   1
    (15,30)   1
    (16,20)   1
    (17,30)   1
    (18,18)   1
    (19,1)   1
    (20,25)   1
    (21,24)   1
    (21,27)   1
    (22,30)   1
    (23,30)   1
    (24,14)   1
    (25,4)   1
    (26,15)   1
    (27,28)   1
    (28,16)   1
    ...
 rmm_wrap_alloc 256 bytes

  32x32 GraphBLAS int32_t matrix, sparse by row
  sparsity control: sparse only
  C GPU, 8 entries, memory: 864 bytes

    (1,1)   0
    (3,17)   0
    (9,31)   0
    (15,30)   1
    (19,1)   0
    (25,4)   1
    (30,24)   0
    (31,31)   0


  32x32 GraphBLAS int32_t matrix, sparse by row
  C_actual, 8 entries, memory: 864 bytes

    (1,1)   0
    (3,17)   0
    (9,31)   0
    (15,30)   1
    (19,1)   0
    (25,4)   1
    (30,24)   0
    (31,31)   0

 rmm_wrap_alloc 256 bytes
 rmm_wrap_alloc 256 bytes
 rmm_wrap_alloc 256 bytes

  32x32 GraphBLAS double matrix, sparse by row
  Diff actual, 8 entries, memory: 896 bytes

    (1,1)    0
    (3,17)    0
    (9,31)    0
    (15,30)    0
    (19,1)    0
    (25,4)    0
    (30,24)    0
    (31,31)    0


  32x32 GraphBLAS bool matrix, sparse by row
  T actual, 8 entries, memory: 840 bytes

    (1,1)   1
    (3,17)   1
    (9,31)   1
    (15,30)   1
    (19,1)   1
    (25,4)   1
    (30,24)   1
    (31,31)   1
 work:8 gpus:0 Getting test data
Creating problem gen
filling matrices
inside fill, using seed 4567
fill_random nrows=32ncols=32 need 32 values, invsparse = 32
fill_random after alloc values
vdim ready 
vlen ready 
ready to fill p
filling sparse
32 nonzeroes left to fill..
2 nonzeroes left to fill..
 rmm_wrap_alloc 256 bytes
 rmm_wrap_alloc 256 bytes
inside fill, using seed 4567
fill_random nrows=32ncols=32 need 32 values, invsparse = 32
fill_random after alloc values
vdim ready 
vlen ready 
ready to fill p
filling sparse
32 nonzeroes left to fill..
2 nonzeroes left to fill..
inside fill, using seed 543210
fill_random nrows=32ncols=32 need 64 values, invsparse = 16
fill_random after alloc values
vdim ready 
vlen ready 
ready to fill p
filling sparse
64 nonzeroes left to fill..
21 nonzeroes left to fill..
 rmm_wrap_alloc 512 bytes
 rmm_wrap_alloc 512 bytes
 rmm_wrap_alloc 256 bytes
inside fill, using seed 32
fill_random nrows=32ncols=32 need 128 values, invsparse = 8
fill_random after alloc values
vdim ready 
vlen ready 
ready to fill p
filling sparse
128 nonzeroes left to fill..
43 nonzeroes left to fill..
 rmm_wrap_alloc 256 bytes
 rmm_wrap_alloc 256 bytes
 rmm_wrap_alloc 256 bytes
32 slots to fill
all pairs to bucket 8, no filling
done assigning buckets
Building semiring factgory
 calling stringify semiring: 0x7f1ff52ff000
inside enumify: 0x7f1ff52ff000

    GraphBLAS Semiring: semiring (user-defined)
    GraphBLAS Monoid: semiring->add (built-in)
    GraphBLAS BinaryOp: monoid->op (built-in) z=plus(x,y)
    GraphBLAS type: ztype int32_t size: 4
    GraphBLAS type: xtype int32_t size: 4
    GraphBLAS type: ytype int32_t size: 4
    identity: [   0 ] 

    GraphBLAS BinaryOp: semiring->multiply (built-in) z=times(x,y)
    GraphBLAS type: ztype int32_t size: 4
    GraphBLAS type: xtype int32_t size: 4
    GraphBLAS type: ytype int32_t size: 4
Getting semiring add
Getting semiring mult
Getting semiring add op
Getting types
Getting opcodes
Getting typecodes
Performing asserts
Invoking boolean rename
Invoking boolean rename
Invoking enumify binop
e 14
Invoking enumify monoid
Calling enumify binop
Inside plus binop code
e 11
Calling enumify identity
Calling enumify terminal
Done enumify monoid
Done invoking enumify monoid
atype
btype
ctype
Invoking enumify_mask, mtype 0x7f2028b57180
GB_enumify_mask gets mcode: 1 Mask_struct: 0 Mask_comp: 0
got mask_ecode: 4
constructing semiring scode
before: add_ecode: 11, id_ecode: 0, term_ecode: 31, mult_ecode: 14, flipxy: 0, zcode: 6, xcode: 6, ycode: 6, mask_ecode: 4, ccode: 6, acode: 6, bcode: 6, csparsity: 0, msparsity: 0, asparsity: 0, bsparsity: 0
serialized_scode: 397409434374399488
done enumify semiring
scode=397409434374399488
done stringify semiring
 returned from  stringify semiring
 rmm_wrap_alloc 256 bytes
 rmm_wrap_alloc 256 bytes
32 slots to fill
all pairs to bucket 8, no filling
done assigning buckets
bucket 8 has 32 dots to do
LAUNCHING BUCKET CODE: 8
INside get cached file
looking for prog in file /home/cjnolet/.SuiteSparse/GraphBLAS/6.3.0/GB_semiring_397409434374399488.h
opening /home/cjnolet/.SuiteSparse/GraphBLAS/6.3.0/GB_semiring_397409434374399488.h for write
about to close
 read cache file /home/cjnolet/.SuiteSparse/GraphBLAS/6.3.0/GB_semiring_397409434374399488.h
successful_read: 1
Just closed
 jit_cache get program GB_jit_AxB_dot3_phase3_vsvs
found memory-cached prog GB_jit_AxB_dot3_phase3_vsvs
 got kernel instance AxB_dot3_phase3_vsvs_int32_t_int32_t_int32_t
found memory-cached prog AxB_dot3_phase3_vsvs_int32_t_int32_t_int32_t
Launching _Z20AxB_dot3_phase3_vsvsIiiiEvxxPxP16GB_Matrix_opaqueS2_S2_S2_i<<<1,512,0,0>>>(long,long,long*,GB_Matrix_opaque*,GB_Matrix_opaque*,GB_Matrix_opaque*,GB_Matrix_opaque*,int)
Printing bucketp
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
Done.
returned from kernel 0.387072ms

  32x32 GraphBLAS int32_t matrix, sparse (jumbled) by row
  sparsity control: sparse only
  C GPU, 32 entries, memory: 1.1 KB
  pending tuples: 0 max pending: 0 zombies: 24

    (0,6) zombie
    (1,1)   0
    (3,12) zombie
    (3,17)   0
    (4,19) zombie
    (5,19) zombie
    (6,22) zombie
    (6,24) zombie
    (8,10) zombie
    (9,19) zombie
    (9,31)   0
    (11,13) zombie
    (12,11) zombie
    (14,24) zombie
    (15,30)   1
    (16,20) zombie
    (17,30) zombie
    (18,18) zombie
    (19,1)   0
    (20,25) zombie
    (21,24) zombie
    (21,27) zombie
    (22,30) zombie
    (23,30) zombie
    (24,14) zombie
    (25,4)   1
    (26,15) zombie
    (27,28) zombie
    (28,16) zombie
    ...
Not using cuda path. M_is_hypersparse: 0, A->iso: 0, B->iso: 0, A_BITMAP: 0, B_BITMAP: 0, GB_IS_FULL(A): 0, GB_IS_FULL(B): 0, semiring header size: 32
 rmm_wrap_alloc 512 bytes
 rmm_wrap_alloc 512 bytes
 rmm_wrap_alloc 512 bytes

  32x32 GraphBLAS bool matrix, sparse by row
  sparsity control: sparse only
  M actual, 32 entries, memory: 1.0 KB

    (0,6)   1
    (1,1)   1
    (3,12)   1
    (3,17)   1
    (4,19)   1
    (5,19)   1
    (6,22)   1
    (6,24)   1
    (8,10)   1
    (9,19)   1
    (9,31)   1
    (11,13)   1
    (12,11)   1
    (14,24)   1
    (15,30)   1
    (16,20)   1
    (17,30)   1
    (18,18)   1
    (19,1)   1
    (20,25)   1
    (21,24)   1
    (21,27)   1
    (22,30)   1
    (23,30)   1
    (24,14)   1
    (25,4)   1
    (26,15)   1
    (27,28)   1
    (28,16)   1
    ...
 rmm_wrap_alloc 256 bytes

  32x32 GraphBLAS int32_t matrix, sparse by row
  sparsity control: sparse only
  C GPU, 8 entries, memory: 864 bytes

    (1,1)   0
    (3,17)   0
    (9,31)   0
    (15,30)   1
    (19,1)   0
    (25,4)   1
    (30,24)   0
    (31,31)   0


  32x32 GraphBLAS int32_t matrix, sparse by row
  C_actual, 8 entries, memory: 864 bytes

    (1,1)   0
    (3,17)   0
    (9,31)   0
    (15,30)   1
    (19,1)   0
    (25,4)   1
    (30,24)   0
    (31,31)   0

 rmm_wrap_alloc 256 bytes

  32x32 GraphBLAS double matrix, sparse by row
  Diff actual, 8 entries, memory: 896 bytes

    (1,1)    0
    (3,17)    0
    (9,31)    0
    (15,30)    0
    (19,1)    0
    (25,4)    0
    (30,24)    0
    (31,31)    0


  32x32 GraphBLAS bool matrix, sparse by row
  T actual, 8 entries, memory: 840 bytes

    (1,1)   1
    (3,17)   1
    (9,31)   1
    (15,30)   1
    (19,1)   1
    (25,4)   1
    (30,24)   1
    (31,31)   1
 work:8 gpus:0 Getting test data
Creating problem gen
filling matrices
inside fill, using seed 4567
fill_random nrows=32ncols=32 need 32 values, invsparse = 32
fill_random after alloc values
vdim ready 
vlen ready 
ready to fill p
filling sparse
32 nonzeroes left to fill..
2 nonzeroes left to fill..
 rmm_wrap_alloc 256 bytes
 rmm_wrap_alloc 256 bytes
inside fill, using seed 4567
fill_random nrows=32ncols=32 need 32 values, invsparse = 32
fill_random after alloc values
vdim ready 
vlen ready 
ready to fill p
filling sparse
32 nonzeroes left to fill..
2 nonzeroes left to fill..
inside fill, using seed 543210
fill_random nrows=32ncols=32 need 64 values, invsparse = 16
fill_random after alloc values
vdim ready 
vlen ready 
ready to fill p
filling sparse
64 nonzeroes left to fill..
21 nonzeroes left to fill..
 rmm_wrap_alloc 512 bytes
 rmm_wrap_alloc 512 bytes
 rmm_wrap_alloc 256 bytes
inside fill, using seed 32
fill_random nrows=32ncols=32 need 128 values, invsparse = 8
fill_random after alloc values
vdim ready 
vlen ready 
ready to fill p
filling sparse
128 nonzeroes left to fill..
43 nonzeroes left to fill..
 rmm_wrap_alloc 256 bytes
 rmm_wrap_alloc 256 bytes
 rmm_wrap_alloc 256 bytes
32 slots to fill
all pairs to bucket 9, no filling
done assigning buckets
Building semiring factgory
 calling stringify semiring: 0x7f1ff5300900
inside enumify: 0x7f1ff5300900

    GraphBLAS Semiring: semiring (user-defined)
    GraphBLAS Monoid: semiring->add (built-in)
    GraphBLAS BinaryOp: monoid->op (built-in) z=plus(x,y)
    GraphBLAS type: ztype int32_t size: 4
    GraphBLAS type: xtype int32_t size: 4
    GraphBLAS type: ytype int32_t size: 4
    identity: [   0 ] 

    GraphBLAS BinaryOp: semiring->multiply (built-in) z=times(x,y)
    GraphBLAS type: ztype int32_t size: 4
    GraphBLAS type: xtype int32_t size: 4
    GraphBLAS type: ytype int32_t size: 4
Getting semiring add
Getting semiring mult
Getting semiring add op
Getting types
Getting opcodes
Getting typecodes
Performing asserts
Invoking boolean rename
Invoking boolean rename
Invoking enumify binop
e 14
Invoking enumify monoid
Calling enumify binop
Inside plus binop code
e 11
Calling enumify identity
Calling enumify terminal
Done enumify monoid
Done invoking enumify monoid
atype
btype
ctype
Invoking enumify_mask, mtype 0x7f2028b57180
GB_enumify_mask gets mcode: 1 Mask_struct: 0 Mask_comp: 0
got mask_ecode: 4
constructing semiring scode
before: add_ecode: 11, id_ecode: 0, term_ecode: 31, mult_ecode: 14, flipxy: 0, zcode: 6, xcode: 6, ycode: 6, mask_ecode: 4, ccode: 6, acode: 6, bcode: 6, csparsity: 0, msparsity: 0, asparsity: 0, bsparsity: 0
serialized_scode: 397409434374399488
done enumify semiring
scode=397409434374399488
done stringify semiring
 returned from  stringify semiring
 rmm_wrap_alloc 256 bytes
 rmm_wrap_alloc 256 bytes
32 slots to fill
all pairs to bucket 9, no filling
done assigning buckets
bucket 9 has 32 dots to do
LAUNCHING BUCKET CODE: 9
INside get cached file
looking for prog in file /home/cjnolet/.SuiteSparse/GraphBLAS/6.3.0/GB_semiring_397409434374399488.h
opening /home/cjnolet/.SuiteSparse/GraphBLAS/6.3.0/GB_semiring_397409434374399488.h for write
about to close
 read cache file /home/cjnolet/.SuiteSparse/GraphBLAS/6.3.0/GB_semiring_397409434374399488.h
successful_read: 1
Just closed
 jit_cache get program GB_jit_AxB_dot3_phase3_vsvs
found memory-cached prog GB_jit_AxB_dot3_phase3_vsvs
 got kernel instance AxB_dot3_phase3_vsvs_int32_t_int32_t_int32_t
found memory-cached prog AxB_dot3_phase3_vsvs_int32_t_int32_t_int32_t
Launching _Z20AxB_dot3_phase3_vsvsIiiiEvxxPxP16GB_Matrix_opaqueS2_S2_S2_i<<<1,512,0,0>>>(long,long,long*,GB_Matrix_opaque*,GB_Matrix_opaque*,GB_Matrix_opaque*,GB_Matrix_opaque*,int)
Printing bucketp
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
Done.
returned from kernel 0.468992ms

  32x32 GraphBLAS int32_t matrix, sparse (jumbled) by row
  sparsity control: sparse only
  C GPU, 32 entries, memory: 1.1 KB
  pending tuples: 0 max pending: 0 zombies: 24

    (0,6) zombie
    (1,1)   0
    (3,12) zombie
    (3,17)   0
    (4,19) zombie
    (5,19) zombie
    (6,22) zombie
    (6,24) zombie
    (8,10) zombie
    (9,19) zombie
    (9,31)   0
    (11,13) zombie
    (12,11) zombie
    (14,24) zombie
    (15,30)   1
    (16,20) zombie
    (17,30) zombie
    (18,18) zombie
    (19,1)   0
    (20,25) zombie
    (21,24) zombie
    (21,27) zombie
    (22,30) zombie
    (23,30) zombie
    (24,14) zombie
    (25,4)   1
    (26,15) zombie
    (27,28) zombie
    (28,16) zombie
    ...
Not using cuda path. M_is_hypersparse: 0, A->iso: 0, B->iso: 0, A_BITMAP: 0, B_BITMAP: 0, GB_IS_FULL(A): 0, GB_IS_FULL(B): 0, semiring header size: 32
 rmm_wrap_alloc 512 bytes
 rmm_wrap_alloc 512 bytes
 rmm_wrap_alloc 512 bytes

  32x32 GraphBLAS bool matrix, sparse by row
  sparsity control: sparse only
  M actual, 32 entries, memory: 1.0 KB

    (0,6)   1
    (1,1)   1
    (3,12)   1
    (3,17)   1
    (4,19)   1
    (5,19)   1
    (6,22)   1
    (6,24)   1
    (8,10)   1
    (9,19)   1
    (9,31)   1
    (11,13)   1
    (12,11)   1
    (14,24)   1
    (15,30)   1
    (16,20)   1
    (17,30)   1
    (18,18)   1
    (19,1)   1
    (20,25)   1
    (21,24)   1
    (21,27)   1
    (22,30)   1
    (23,30)   1
    (24,14)   1
    (25,4)   1
    (26,15)   1
    (27,28)   1
    (28,16)   1
    ...
 rmm_wrap_alloc 256 bytes

  32x32 GraphBLAS int32_t matrix, sparse by row
  sparsity control: sparse only
  C GPU, 8 entries, memory: 864 bytes

    (1,1)   0
    (3,17)   0
    (9,31)   0
    (15,30)   1
    (19,1)   0
    (25,4)   1
    (30,24)   0
    (31,31)   0


  32x32 GraphBLAS int32_t matrix, sparse by row
  C_actual, 8 entries, memory: 864 bytes

    (1,1)   0
    (3,17)   0
    (9,31)   0
    (15,30)   1
    (19,1)   0
    (25,4)   1
    (30,24)   0
    (31,31)   0

 rmm_wrap_alloc 256 bytes

  32x32 GraphBLAS double matrix, sparse by row
  Diff actual, 8 entries, memory: 896 bytes

    (1,1)    0
    (3,17)    0
    (9,31)    0
    (15,30)    0
    (19,1)    0
    (25,4)    0
    (30,24)    0
    (31,31)    0


  32x32 GraphBLAS bool matrix, sparse by row
  T actual, 8 entries, memory: 840 bytes

    (1,1)   1
    (3,17)   1
    (9,31)   1
    (15,30)   1
    (19,1)   1
    (25,4)   1
    (30,24)   1
    (31,31)   1
 work:8 gpus:0 Getting test data
Creating problem gen
filling matrices
inside fill, using seed 4567
fill_random nrows=32ncols=32 need 32 values, invsparse = 32
fill_random after alloc values
vdim ready 
vlen ready 
ready to fill p
filling sparse
32 nonzeroes left to fill..
2 nonzeroes left to fill..
 rmm_wrap_alloc 256 bytes
 rmm_wrap_alloc 256 bytes
inside fill, using seed 4567
fill_random nrows=32ncols=32 need 32 values, invsparse = 32
fill_random after alloc values
vdim ready 
vlen ready 
ready to fill p
filling sparse
32 nonzeroes left to fill..
2 nonzeroes left to fill..
inside fill, using seed 543210
fill_random nrows=32ncols=32 need 64 values, invsparse = 16
fill_random after alloc values
vdim ready 
vlen ready 
ready to fill p
filling sparse
64 nonzeroes left to fill..
21 nonzeroes left to fill..
 rmm_wrap_alloc 512 bytes
 rmm_wrap_alloc 512 bytes
 rmm_wrap_alloc 256 bytes
inside fill, using seed 32
fill_random nrows=32ncols=32 need 128 values, invsparse = 8
fill_random after alloc values
vdim ready 
vlen ready 
ready to fill p
filling sparse
128 nonzeroes left to fill..
43 nonzeroes left to fill..
 rmm_wrap_alloc 256 bytes
 rmm_wrap_alloc 256 bytes
 rmm_wrap_alloc 256 bytes
32 slots to fill
all pairs to bucket 10, no filling
done assigning buckets
Building semiring factgory
 calling stringify semiring: 0x7f1ff5301f00
inside enumify: 0x7f1ff5301f00

    GraphBLAS Semiring: semiring (user-defined)
    GraphBLAS Monoid: semiring->add (built-in)
    GraphBLAS BinaryOp: monoid->op (built-in) z=plus(x,y)
    GraphBLAS type: ztype int32_t size: 4
    GraphBLAS type: xtype int32_t size: 4
    GraphBLAS type: ytype int32_t size: 4
    identity: [   0 ] 

    GraphBLAS BinaryOp: semiring->multiply (built-in) z=times(x,y)
    GraphBLAS type: ztype int32_t size: 4
    GraphBLAS type: xtype int32_t size: 4
    GraphBLAS type: ytype int32_t size: 4
Getting semiring add
Getting semiring mult
Getting semiring add op
Getting types
Getting opcodes
Getting typecodes
Performing asserts
Invoking boolean rename
Invoking boolean rename
Invoking enumify binop
e 14
Invoking enumify monoid
Calling enumify binop
Inside plus binop code
e 11
Calling enumify identity
Calling enumify terminal
Done enumify monoid
Done invoking enumify monoid
atype
btype
ctype
Invoking enumify_mask, mtype 0x7f2028b57180
GB_enumify_mask gets mcode: 1 Mask_struct: 0 Mask_comp: 0
got mask_ecode: 4
constructing semiring scode
before: add_ecode: 11, id_ecode: 0, term_ecode: 31, mult_ecode: 14, flipxy: 0, zcode: 6, xcode: 6, ycode: 6, mask_ecode: 4, ccode: 6, acode: 6, bcode: 6, csparsity: 0, msparsity: 0, asparsity: 0, bsparsity: 0
serialized_scode: 397409434374399488
done enumify semiring
scode=397409434374399488
done stringify semiring
 returned from  stringify semiring
 rmm_wrap_alloc 256 bytes
 rmm_wrap_alloc 256 bytes
32 slots to fill
all pairs to bucket 10, no filling
done assigning buckets
bucket 10 has 32 dots to do
LAUNCHING BUCKET CODE: 10
INside get cached file
looking for prog in file /home/cjnolet/.SuiteSparse/GraphBLAS/6.3.0/GB_semiring_397409434374399488.h
opening /home/cjnolet/.SuiteSparse/GraphBLAS/6.3.0/GB_semiring_397409434374399488.h for write
about to close
 read cache file /home/cjnolet/.SuiteSparse/GraphBLAS/6.3.0/GB_semiring_397409434374399488.h
successful_read: 1
Just closed
 jit_cache get program GB_jit_AxB_dot3_phase3_vsvs
found memory-cached prog GB_jit_AxB_dot3_phase3_vsvs
 got kernel instance AxB_dot3_phase3_vsvs_int32_t_int32_t_int32_t
found memory-cached prog AxB_dot3_phase3_vsvs_int32_t_int32_t_int32_t
Launching _Z20AxB_dot3_phase3_vsvsIiiiEvxxPxP16GB_Matrix_opaqueS2_S2_S2_i<<<1,512,0,0>>>(long,long,long*,GB_Matrix_opaque*,GB_Matrix_opaque*,GB_Matrix_opaque*,GB_Matrix_opaque*,int)
Printing bucketp
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
Done.
returned from kernel 0.418816ms

  32x32 GraphBLAS int32_t matrix, sparse (jumbled) by row
  sparsity control: sparse only
  C GPU, 32 entries, memory: 1.1 KB
  pending tuples: 0 max pending: 0 zombies: 24

    (0,6) zombie
    (1,1)   0
    (3,12) zombie
    (3,17)   0
    (4,19) zombie
    (5,19) zombie
    (6,22) zombie
    (6,24) zombie
    (8,10) zombie
    (9,19) zombie
    (9,31)   0
    (11,13) zombie
    (12,11) zombie
    (14,24) zombie
    (15,30)   1
    (16,20) zombie
    (17,30) zombie
    (18,18) zombie
    (19,1)   0
    (20,25) zombie
    (21,24) zombie
    (21,27) zombie
    (22,30) zombie
    (23,30) zombie
    (24,14) zombie
    (25,4)   1
    (26,15) zombie
    (27,28) zombie
    (28,16) zombie
    ...
Not using cuda path. M_is_hypersparse: 0, A->iso: 0, B->iso: 0, A_BITMAP: 0, B_BITMAP: 0, GB_IS_FULL(A): 0, GB_IS_FULL(B): 0, semiring header size: 32
 rmm_wrap_alloc 512 bytes
 rmm_wrap_alloc 512 bytes
 rmm_wrap_alloc 512 bytes

  32x32 GraphBLAS bool matrix, sparse by row
  sparsity control: sparse only
  M actual, 32 entries, memory: 1.0 KB

    (0,6)   1
    (1,1)   1
    (3,12)   1
    (3,17)   1
    (4,19)   1
    (5,19)   1
    (6,22)   1
    (6,24)   1
    (8,10)   1
    (9,19)   1
    (9,31)   1
    (11,13)   1
    (12,11)   1
    (14,24)   1
    (15,30)   1
    (16,20)   1
    (17,30)   1
    (18,18)   1
    (19,1)   1
    (20,25)   1
    (21,24)   1
    (21,27)   1
    (22,30)   1
    (23,30)   1
    (24,14)   1
    (25,4)   1
    (26,15)   1
    (27,28)   1
    (28,16)   1
    ...
 rmm_wrap_alloc 256 bytes

  32x32 GraphBLAS int32_t matrix, sparse by row
  sparsity control: sparse only
  C GPU, 8 entries, memory: 864 bytes

    (1,1)   0
    (3,17)   0
    (9,31)   0
    (15,30)   1
    (19,1)   0
    (25,4)   1
    (30,24)   0
    (31,31)   0


  32x32 GraphBLAS int32_t matrix, sparse by row
  C_actual, 8 entries, memory: 864 bytes

    (1,1)   0
    (3,17)   0
    (9,31)   0
    (15,30)   1
    (19,1)   0
    (25,4)   1
    (30,24)   0
    (31,31)   0

 rmm_wrap_alloc 256 bytes

  32x32 GraphBLAS double matrix, sparse by row
  Diff actual, 8 entries, memory: 896 bytes

    (1,1)    0
    (3,17)    0
    (9,31)    0
    (15,30)    0
    (19,1)    0
    (25,4)    0
    (30,24)    0
    (31,31)    0


  32x32 GraphBLAS bool matrix, sparse by row
  T actual, 8 entries, memory: 840 bytes

    (1,1)   1
    (3,17)   1
    (9,31)   1
    (15,30)   1
    (19,1)   1
    (25,4)   1
    (30,24)   1
    (31,31)   1
 work:8 gpus:0 Getting test data
Creating problem gen
filling matrices
inside fill, using seed 4567
fill_random nrows=32ncols=32 need 32 values, invsparse = 32
fill_random after alloc values
vdim ready 
vlen ready 
ready to fill p
filling sparse
32 nonzeroes left to fill..
2 nonzeroes left to fill..
 rmm_wrap_alloc 256 bytes
 rmm_wrap_alloc 256 bytes
inside fill, using seed 4567
fill_random nrows=32ncols=32 need 32 values, invsparse = 32
fill_random after alloc values
vdim ready 
vlen ready 
ready to fill p
filling sparse
32 nonzeroes left to fill..
2 nonzeroes left to fill..
inside fill, using seed 543210
fill_random nrows=32ncols=32 need 160 values, invsparse = 7
fill_random after alloc values
vdim ready 
vlen ready 
ready to fill p
filling sparse
160 nonzeroes left to fill..
51 nonzeroes left to fill..
 rmm_wrap_alloc 256 bytes
 rmm_wrap_alloc 256 bytes
inside fill, using seed 32
fill_random nrows=32ncols=32 need 64 values, invsparse = 16
fill_random after alloc values
vdim ready 
vlen ready 
ready to fill p
filling sparse
64 nonzeroes left to fill..
20 nonzeroes left to fill..
 rmm_wrap_alloc 256 bytes
 rmm_wrap_alloc 512 bytes
 rmm_wrap_alloc 256 bytes
 rmm_wrap_alloc 256 bytes
 rmm_wrap_alloc 256 bytes
32 slots to fill
all pairs to bucket 11, no filling
done assigning buckets
Building semiring factgory
 calling stringify semiring: 0x7f1ff5306300
inside enumify: 0x7f1ff5306300

    GraphBLAS Semiring: semiring (user-defined)
    GraphBLAS Monoid: semiring->add (built-in)
    GraphBLAS BinaryOp: monoid->op (built-in) z=plus(x,y)
    GraphBLAS type: ztype int32_t size: 4
    GraphBLAS type: xtype int32_t size: 4
    GraphBLAS type: ytype int32_t size: 4
    identity: [   0 ] 

    GraphBLAS BinaryOp: semiring->multiply (built-in) z=times(x,y)
    GraphBLAS type: ztype int32_t size: 4
    GraphBLAS type: xtype int32_t size: 4
    GraphBLAS type: ytype int32_t size: 4
Getting semiring add
Getting semiring mult
Getting semiring add op
Getting types
Getting opcodes
Getting typecodes
Performing asserts
Invoking boolean rename
Invoking boolean rename
Invoking enumify binop
e 14
Invoking enumify monoid
Calling enumify binop
Inside plus binop code
e 11
Calling enumify identity
Calling enumify terminal
Done enumify monoid
Done invoking enumify monoid
atype
btype
ctype
Invoking enumify_mask, mtype 0x7f2028b57180
GB_enumify_mask gets mcode: 1 Mask_struct: 0 Mask_comp: 0
got mask_ecode: 4
constructing semiring scode
before: add_ecode: 11, id_ecode: 0, term_ecode: 31, mult_ecode: 14, flipxy: 0, zcode: 6, xcode: 6, ycode: 6, mask_ecode: 4, ccode: 6, acode: 6, bcode: 6, csparsity: 0, msparsity: 0, asparsity: 0, bsparsity: 0
serialized_scode: 397409434374399488
done enumify semiring
scode=397409434374399488
done stringify semiring
 returned from  stringify semiring
 rmm_wrap_alloc 256 bytes
 rmm_wrap_alloc 256 bytes
32 slots to fill
all pairs to bucket 11, no filling
done assigning buckets
bucket 11 has 32 dots to do
LAUNCHING BUCKET CODE: 11
INside get cached file
looking for prog in file /home/cjnolet/.SuiteSparse/GraphBLAS/6.3.0/GB_semiring_397409434374399488.h
opening /home/cjnolet/.SuiteSparse/GraphBLAS/6.3.0/GB_semiring_397409434374399488.h for write
about to close
 read cache file /home/cjnolet/.SuiteSparse/GraphBLAS/6.3.0/GB_semiring_397409434374399488.h
successful_read: 1
Just closed
 jit_cache get program GB_jit_AxB_dot3_phase3_mp
 failed to open cache file /home/cjnolet/.SuiteSparse/GraphBLAS/6.3.0/GB_jit_AxB_dot3_phase3_mp
compiling now
---------------------------------------
--- Source of GB_jit_AxB_dot3_phase3_mp ---
---------------------------------------
  1 #include "/home/cjnolet/.SuiteSparse/GraphBLAS/6.3.0/GB_semiring_397409434374399488.h"
  2 #include "GB_jit_AxB_dot3_phase3_mp.cuh"
---------------------------------------
Found #include GB_jit_AxB_dot3_phase3_mp.cuh from GB_jit_AxB_dot3_phase3_mp:2 [] at:
  ../templates/GB_jit_AxB_dot3_phase3_mp.cuh
Found #include limits from GB_jit_AxB_dot3_phase3_mp.cuh:36 [../templates/GB_jit_AxB_dot3_phase3_mp.cuh] at:
  __jitify_builtin/limits
Found #include climits from limits:4 [__jitify_builtin/limits] at:
  __jitify_builtin/climits
Found #include cfloat from limits:5 [__jitify_builtin/limits] at:
  __jitify_builtin/cfloat
Found #include cstdint from GB_jit_AxB_dot3_phase3_mp.cuh:37 [../templates/GB_jit_AxB_dot3_phase3_mp.cuh] at:
  __jitify_builtin/cstdint
Found #include cooperative_groups.h from GB_jit_AxB_dot3_phase3_mp.cuh:38 [../templates/GB_jit_AxB_dot3_phase3_mp.cuh] at:
  /usr/local/cuda/include/cooperative_groups.h
Found #include cooperative_groups/details/info.h from cooperative_groups.h:55 [/usr/local/cuda/include/cooperative_groups.h] at:
  /usr/local/cuda/include/cooperative_groups/details/info.h
Found #include cooperative_groups/details/driver_abi.h from cooperative_groups.h:56 [/usr/local/cuda/include/cooperative_groups.h] at:
  /usr/local/cuda/include/cooperative_groups/details/driver_abi.h
Found #include cooperative_groups/details/helpers.h from cooperative_groups.h:57 [/usr/local/cuda/include/cooperative_groups.h] at:
  /usr/local/cuda/include/cooperative_groups/details/helpers.h
Found #include sync.h from cooperative_groups/details/helpers.h:53 [/usr/local/cuda/include/cooperative_groups/details/helpers.h] at:
  /usr/local/cuda/include/cooperative_groups/details/sync.h
Found #include info.h from sync.h:52 [/usr/local/cuda/include/cooperative_groups/details/sync.h] at:
  /usr/local/cuda/include/cooperative_groups/details/info.h
Found #include cooperative_groups/details/partitioning.h from cooperative_groups.h:1810 [/usr/local/cuda/include/cooperative_groups.h] at:
  /usr/local/cuda/include/cooperative_groups/details/partitioning.h
Found #include matrix.h from GB_jit_AxB_dot3_phase3_mp.cuh:39 [../templates/GB_jit_AxB_dot3_phase3_mp.cuh] at:
  ../matrix.h
matrix.h(52): warning: stdbool.h: [jitify] File not found
Found #include stddef.h from matrix.h:53 [../matrix.h] at:
  __jitify_builtin/stddef.h
Found #include GB_opaque.h from matrix.h:131 [../matrix.h] at:
  ../../Source/GB_opaque.h
Found #include GB_Operator.h from GB_opaque.h:397 [../../Source/GB_opaque.h] at:
  ../../Source/Template/GB_Operator.h
Found #include GB_matrix.h from GB_opaque.h:495 [../../Source/GB_opaque.h] at:
  ../../Source/Template/GB_matrix.h
Found #include GB_imin.h from matrix.h:135 [../matrix.h] at:
  ../../Source/GB_imin.h
Found #include GB_zombie.h from matrix.h:136 [../matrix.h] at:
  ../../Source/GB_zombie.h
Found #include GB_nnz.h from matrix.h:137 [../matrix.h] at:
  ../../Source/GB_nnz.h
Found #include GB_partition.h from matrix.h:138 [../matrix.h] at:
  ../../Source/GB_partition.h
Found #include GB_binary_search.h from matrix.h:139 [../matrix.h] at:
  ../../Source/GB_binary_search.h
Found #include GB_lookup_template.c from GB_binary_search.h:230 [../../Source/GB_binary_search.h] at:
  ../../Source/Template/GB_lookup_template.c
Found #include GB_search_for_vector_template.c from matrix.h:140 [../matrix.h] at:
  ../../Source/Template/GB_search_for_vector_template.c
completed func()
 compiled serialized prog GB_jit_AxB_dot3_phase3_mp
writing prog in file /home/cjnolet/.SuiteSparse/GraphBLAS/6.3.0/GB_jit_AxB_dot3_phase3_mp
 got kernel instance AxB_dot3_phase3_mp_int32_t_int32_t_int32_t
 failed to open cache file /home/cjnolet/.SuiteSparse/GraphBLAS/6.3.0/AxB_dot3_phase3_mp_int32_t_int32_t_int32_t
compiling now
About to instantiate kernel
ABout to compile kernel
done compilling
---------------------------------------
_Z18AxB_dot3_phase3_mpIiiiEvxxPxP16GB_Matrix_opaqueS2_S2_S2_i
---------------------------------------
--- PTX for 0x7ffcc2488c20 in GB_jit_AxB_dot3_phase3_mp ---
---------------------------------------
//
// Generated by NVIDIA NVVM Compiler
//
// Compiler Build ID: CL-30794723
// Cuda compilation tools, release 11.6, V11.6.55
// Based on NVVM 7.0.1
//

.version 7.6
.target sm_70, debug
.address_size 64

	// .weak	_Z18AxB_dot3_phase3_mpIiiiEvxxPxP16GB_Matrix_opaqueS2_S2_S2_i
.weak .func  (.param .b32 func_retval0) _Z13GB_reduce_sumIiLi32EET_N18cooperative_groups4__v117thread_block_tileIXT0_EvEES0_
(
	.param .align 8 .b8 _Z13GB_reduce_sumIiLi32EET_N18cooperative_groups4__v117thread_block_tileIXT0_EvEES0__param_0[16],
	.param .b32 _Z13GB_reduce_sumIiLi32EET_N18cooperative_groups4__v117thread_block_tileIXT0_EvEES0__param_1
)
;
.extern .func  (.param .b32 func_retval0) vprintf
(
	.param .b64 vprintf_param_0,
	.param .b64 vprintf_param_1
)
;
.weak .func _ZN18cooperative_groups4__v117thread_group_baseILj4EEC2Ev
(
	.param .b64 _ZN18cooperative_groups4__v117thread_group_baseILj4EEC2Ev_param_0
)
;
.weak .func _ZN18cooperative_groups4__v17details22thread_block_tile_implILj32EvLb0EEC2ILj32ENS0_12thread_blockELb0EEERKNS2_IXT_ET0_XT1_EEE
(
	.param .b64 _ZN18cooperative_groups4__v17details22thread_block_tile_implILj32EvLb0EEC2ILj32ENS0_12thread_blockELb0EEERKNS2_IXT_ET0_XT1_EEE_param_0,
	.param .b64 _ZN18cooperative_groups4__v17details22thread_block_tile_implILj32EvLb0EEC2ILj32ENS0_12thread_blockELb0EEERKNS2_IXT_ET0_XT1_EEE_param_1
)
;
.weak .func _ZN18cooperative_groups4__v117thread_block_tileILj32ENS0_12thread_blockEEC2ERKS2_
(
	.param .b64 _ZN18cooperative_groups4__v117thread_block_tileILj32ENS0_12thread_blockEEC2ERKS2__param_0,
	.param .b64 _ZN18cooperative_groups4__v117thread_block_tileILj32ENS0_12thread_blockEEC2ERKS2__param_1
)
;
.func  (.param .b64 func_retval0) _Z9atomicAddPyy
(
	.param .b64 _Z9atomicAddPyy_param_0,
	.param .b64 _Z9atomicAddPyy_param_1
)
;
.func  (.param .b32 func_retval0) _Z13__ballot_syncji
(
	.param .b32 _Z13__ballot_syncji_param_0,
	.param .b32 _Z13__ballot_syncji_param_1
)
;
.func  (.param .b32 func_retval0) _Z16__shfl_down_syncjiji
(
	.param .b32 _Z16__shfl_down_syncjiji_param_0,
	.param .b32 _Z16__shfl_down_syncjiji_param_1,
	.param .b32 _Z16__shfl_down_syncjiji_param_2,
	.param .b32 _Z16__shfl_down_syncjiji_param_3
)
;
.func  (.param .b64 func_retval0) __ullAtomicAdd
(
	.param .b64 __ullAtomicAdd_param_0,
	.param .b64 __ullAtomicAdd_param_1
)
;
.global .align 1 .b8 $str[42] = {119, 97, 114, 112, 32, 37, 100, 32, 122, 111, 109, 98, 105, 101, 32, 99, 111, 117, 110, 116, 32, 61, 32, 37, 100, 44, 32, 110, 122, 111, 109, 98, 105, 101, 115, 32, 61, 32, 37, 100, 10, 0};
.global .align 1 .b8 $str$1[17] = {32, 67, 122, 111, 109, 98, 105, 101, 32, 61, 32, 37, 108, 108, 100, 10, 0};

.weak .entry _Z18AxB_dot3_phase3_mpIiiiEvxxPxP16GB_Matrix_opaqueS2_S2_S2_i(
	.param .u64 _Z18AxB_dot3_phase3_mpIiiiEvxxPxP16GB_Matrix_opaqueS2_S2_S2_i_param_0,
	.param .u64 _Z18AxB_dot3_phase3_mpIiiiEvxxPxP16GB_Matrix_opaqueS2_S2_S2_i_param_1,
	.param .u64 _Z18AxB_dot3_phase3_mpIiiiEvxxPxP16GB_Matrix_opaqueS2_S2_S2_i_param_2,
	.param .u64 _Z18AxB_dot3_phase3_mpIiiiEvxxPxP16GB_Matrix_opaqueS2_S2_S2_i_param_3,
	.param .u64 _Z18AxB_dot3_phase3_mpIiiiEvxxPxP16GB_Matrix_opaqueS2_S2_S2_i_param_4,
	.param .u64 _Z18AxB_dot3_phase3_mpIiiiEvxxPxP16GB_Matrix_opaqueS2_S2_S2_i_param_5,
	.param .u64 _Z18AxB_dot3_phase3_mpIiiiEvxxPxP16GB_Matrix_opaqueS2_S2_S2_i_param_6,
	.param .u32 _Z18AxB_dot3_phase3_mpIiiiEvxxPxP16GB_Matrix_opaqueS2_S2_S2_i_param_7
)
{
	.local .align 8 .b8 	__local_depot0[160];
	.reg .b64 	%SP;
	.reg .b64 	%SPL;
	.reg .pred 	%p<81>;
	.reg .b16 	%rs<2>;
	.reg .b32 	%r<141>;
	.reg .b64 	%rd<224>;
	.loc	10 76 0
$L__func_begin0:
	.loc	10 76 0


	mov.u64 	%SPL, __local_depot0;
	cvta.local.u64 	%SP, %SPL;
	ld.param.u64 	%rd31, [_Z18AxB_dot3_phase3_mpIiiiEvxxPxP16GB_Matrix_opaqueS2_S2_S2_i_param_0];
	ld.param.u64 	%rd32, [_Z18AxB_dot3_phase3_mpIiiiEvxxPxP16GB_Matrix_opaqueS2_S2_S2_i_param_1];
	ld.param.u64 	%rd33, [_Z18AxB_dot3_phase3_mpIiiiEvxxPxP16GB_Matrix_opaqueS2_S2_S2_i_param_2];
	ld.param.u64 	%rd34, [_Z18AxB_dot3_phase3_mpIiiiEvxxPxP16GB_Matrix_opaqueS2_S2_S2_i_param_3];
	ld.param.u64 	%rd35, [_Z18AxB_dot3_phase3_mpIiiiEvxxPxP16GB_Matrix_opaqueS2_S2_S2_i_param_4];
	ld.param.u64 	%rd36, [_Z18AxB_dot3_phase3_mpIiiiEvxxPxP16GB_Matrix_opaqueS2_S2_S2_i_param_5];
	ld.param.u64 	%rd37, [_Z18AxB_dot3_phase3_mpIiiiEvxxPxP16GB_Matrix_opaqueS2_S2_S2_i_param_6];
	ld.param.u32 	%r67, [_Z18AxB_dot3_phase3_mpIiiiEvxxPxP16GB_Matrix_opaqueS2_S2_S2_i_param_7];
	mov.b64 	%rd38, %rd33;
	mov.b32 	%r68, %r67;
$L__tmp0:
	.loc	10 89 5
	mov.u16 	%rs1, 1;
	st.u8 	[%rd34+203], %rs1;
	.loc	10 90 13
	ld.u64 	%rd1, [%rd36+104];
$L__tmp1:
	.loc	10 91 13
	ld.u64 	%rd2, [%rd37+104];
$L__tmp2:
	.loc	10 92 13
	ld.u64 	%rd3, [%rd34+104];
$L__tmp3:
	.loc	10 93 17
	ld.u64 	%rd39, [%rd34+96];
	mov.b64 	%rd4, %rd39;
$L__tmp4:
	.loc	10 94 17
	ld.u64 	%rd40, [%rd35+96];
	mov.b64 	%rd5, %rd40;
$L__tmp5:
	.loc	10 95 17
	ld.u64 	%rd41, [%rd36+96];
	mov.b64 	%rd6, %rd41;
$L__tmp6:
	.loc	10 96 17
	ld.u64 	%rd42, [%rd37+96];
	mov.b64 	%rd7, %rd42;
$L__tmp7:
	.loc	10 97 17
	ld.u64 	%rd43, [%rd36+88];
	mov.b64 	%rd8, %rd43;
$L__tmp8:
	.loc	10 98 17
	ld.u64 	%rd44, [%rd37+88];
	mov.b64 	%rd9, %rd44;
$L__tmp9:
	.loc	10 102 12
	mov.u32 	%r69, 0;
	mov.b32 	%r1, %r69;
$L__tmp10:
	.loc	10 108 20
	mov.u32 	%r70, %tid.x;
	mov.u32 	%r71, %ntid.x;
	mov.u32 	%r72, %ctaid.x;
	mul.lo.s32 	%r73, %r71, %r72;
	add.s32 	%r74, %r70, %r73;
	mov.b32 	%r75, %r74;
$L__tmp11:
	.loc	10 109 13
	mov.u32 	%r76, %tid.x;
	mov.b32 	%r2, %r76;
$L__tmp12:
	.loc	10 111 11
	mov.u32 	%r77, %ctaid.x;
	mov.b32 	%r78, %r77;
$L__tmp13:
	.loc	10 114 18
	mov.u64 	%rd45, 0;
	mov.b64 	%rd46, %rd45;
$L__tmp14:
	.loc	10 115 18
	mov.b64 	%rd47, %rd45;
$L__tmp15:
	.loc	10 116 25
	mov.b64 	%rd48, %rd45;
$L__tmp16:
	.loc	10 0 25
	add.u64 	%rd49, %SP, 88;
	mov.b64 	%rd50, %rd49;
	st.u64 	[%SP+80], %rd50;
	.loc	3 682 5
	bra.uni	$L__tmp17;
$L__tmp17:
	.loc	3 609 5
	ld.u64 	%rd51, [%SP+80];
	{ // callseq 0, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd51;
	call.uni 
	_ZN18cooperative_groups4__v117thread_group_baseILj4EEC2Ev, 
	(
	param0
	);
	} // callseq 0
$L__tmp18:
	.loc	3 682 5
	ld.u64 	%rd52, [%SP+88];
	ld.u64 	%rd53, [%SP+96];
$L__tmp19:
	.loc	10 118 65
	st.u64 	[%SP+120], %rd53;
	st.u64 	[%SP+112], %rd52;
	add.u64 	%rd54, %SP, 112;
	mov.b64 	%rd55, %rd54;
	st.u64 	[%SP+64], %rd55;
	.loc	10 118 39
	bra.uni	$L__tmp20;
$L__tmp20:
	.loc	3 1684 5
	ld.u64 	%rd56, [%SP+64];
	add.u64 	%rd57, %SP, 72;
	mov.b64 	%rd58, %rd57;
	st.u64 	[%SP+48], %rd58;
	mov.b64 	%rd59, %rd56;
	st.u64 	[%SP+56], %rd59;
	.loc	3 1684 5
	bra.uni	$L__tmp21;
$L__tmp21:
	.loc	3 1648 13
	ld.u64 	%rd60, [%SP+48];
	ld.u64 	%rd61, [%SP+56];
	{ // callseq 1, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd60;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd61;
	call.uni 
	_ZN18cooperative_groups4__v117thread_block_tileILj32ENS0_12thread_blockEEC2ERKS2_, 
	(
	param0, 
	param1
	);
	} // callseq 1
	add.u64 	%rd62, %SP, 104;
	mov.b64 	%rd63, %rd62;
	st.u64 	[%SP+24], %rd63;
$L__tmp22:
	.loc	10 118 39
	bra.uni	$L__tmp23;
$L__tmp23:
	.loc	3 1612 9
	ld.u64 	%rd64, [%SP+24];
	add.u64 	%rd65, %SP, 32;
	mov.b64 	%rd66, %rd65;
	st.u64 	[%SP+8], %rd66;
	mov.b64 	%rd67, %rd64;
	st.u64 	[%SP+16], %rd67;
	.loc	3 1612 9
	bra.uni	$L__tmp24;
$L__tmp24:
	.loc	3 1630 9
	ld.u64 	%rd68, [%SP+8];
	ld.u64 	%rd69, [%SP+16];
	{ // callseq 2, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd68;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd69;
	call.uni 
	_ZN18cooperative_groups4__v17details22thread_block_tile_implILj32EvLb0EEC2ILj32ENS0_12thread_blockELb0EEERKNS2_IXT_ET0_XT1_EEE, 
	(
	param0, 
	param1
	);
	} // callseq 2
$L__tmp25:
	.loc	3 1612 9
	ld.u64 	%rd70, [%SP+32];
	ld.u64 	%rd71, [%SP+40];
$L__tmp26:
	.loc	10 118 39
	st.u64 	[%SP+136], %rd71;
	st.u64 	[%SP+128], %rd70;
	.loc	10 120 15
	mov.u32 	%r79, %ntid.x;
	mov.b32 	%r3, %r79;
$L__tmp27:
	.loc	10 125 10
	mov.u32 	%r80, %ctaid.x;
	cvt.u64.u32 	%rd72, %r80;
	add.s64 	%rd10, %rd31, %rd72;
$L__tmp28:
	.loc	10 125 5
	mov.u32 	%r116, %r1;
$L__tmp29:
	mov.u64 	%rd219, %rd10;
$L__tmp30:
	bra.uni 	$L__BB0_1;

$L__BB0_1:
	mov.u64 	%rd11, %rd219;
	mov.u32 	%r4, %r116;
$L__tmp31:
	setp.lt.s64 	%p15, %rd11, %rd32;
	not.pred 	%p16, %p15;
	@%p16 bra 	$L__BB0_69;
	bra.uni 	$L__BB0_2;

$L__BB0_2:
$L__tmp32:
	.loc	10 130 20
	shl.b64 	%rd83, %rd11, 3;
	add.s64 	%rd84, %rd5, %rd83;
	ld.u64 	%rd85, [%rd84];
	mov.b64 	%rd12, %rd85;
$L__tmp33:
	.loc	10 131 20
	shl.b64 	%rd86, %rd11, 3;
	add.s64 	%rd87, %rd4, %rd86;
	ld.u64 	%rd88, [%rd87];
	shr.s64 	%rd89, %rd88, 4;
$L__tmp34:
	.loc	10 133 25
	shl.b64 	%rd90, %rd12, 3;
	add.s64 	%rd91, %rd8, %rd90;
	ld.u64 	%rd92, [%rd91];
	mov.b64 	%rd13, %rd92;
$L__tmp35:
	.loc	10 134 25
	shl.b64 	%rd93, %rd12, 3;
	add.s64 	%rd94, %rd93, 8;
	add.s64 	%rd95, %rd8, %rd94;
	ld.u64 	%rd96, [%rd95];
	mov.b64 	%rd14, %rd96;
$L__tmp36:
	.loc	10 135 10
	sub.s64 	%rd15, %rd14, %rd13;
$L__tmp37:
	.loc	10 137 25
	shl.b64 	%rd97, %rd89, 3;
	add.s64 	%rd98, %rd9, %rd97;
	ld.u64 	%rd99, [%rd98];
	mov.b64 	%rd16, %rd99;
$L__tmp38:
	.loc	10 138 25
	shl.b64 	%rd100, %rd89, 3;
	add.s64 	%rd101, %rd100, 8;
	add.s64 	%rd102, %rd9, %rd101;
	ld.u64 	%rd103, [%rd102];
	mov.b64 	%rd17, %rd103;
$L__tmp39:
	.loc	10 139 10
	sub.s64 	%rd18, %rd17, %rd16;
$L__tmp40:
	.loc	10 144 10
	sub.s64 	%rd104, %rd14, %rd13;
	sub.s64 	%rd105, %rd17, %rd16;
	setp.lt.s64 	%p21, %rd104, %rd105;
	not.pred 	%p22, %p21;
	@%p22 bra 	$L__BB0_4;
	bra.uni 	$L__BB0_3;

$L__BB0_3:
	sub.s64 	%rd19, %rd14, %rd13;
	bra.uni 	$L__BB0_5;

$L__BB0_4:
	sub.s64 	%rd20, %rd17, %rd16;
	bra.uni 	$L__BB0_5;

$L__BB0_5:
$L__tmp41:
	.loc	10 151 17
	add.s64 	%rd21, %rd15, %rd18;
$L__tmp42:
	.loc	10 153 25
	cvt.s64.s32 	%rd107, %r3;
	add.s64 	%rd108, %rd21, %rd107;
	sub.s64 	%rd109, %rd108, 1;
	cvt.s64.s32 	%rd110, %r3;
	div.s64 	%rd111, %rd109, %rd110;
	cvt.u32.u64 	%r5, %rd111;
$L__tmp43:
	.loc	10 154 14
	mul.lo.s32 	%r84, %r5, %r2;
	cvt.s64.s32 	%rd112, %r84;
	setp.lt.s64 	%p23, %rd112, %rd21;
	not.pred 	%p24, %p23;
	@%p24 bra 	$L__BB0_7;
	bra.uni 	$L__BB0_6;

$L__BB0_6:
	mul.lo.s32 	%r85, %r5, %r2;
	cvt.s64.s32 	%rd22, %r85;
	mov.u64 	%rd220, %rd22;
	bra.uni 	$L__BB0_8;

$L__BB0_7:
	mov.u64 	%rd220, %rd21;
$L__tmp44:
	bra.uni 	$L__BB0_8;

$L__BB0_8:
	mov.u64 	%rd23, %rd220;
	cvt.u32.u64 	%r6, %rd23;
$L__tmp45:
	.loc	10 155 18
	add.s32 	%r86, %r6, %r5;
	cvt.s64.s32 	%rd113, %r86;
	setp.lt.s64 	%p25, %rd113, %rd21;
	not.pred 	%p26, %p25;
	@%p26 bra 	$L__BB0_10;
	bra.uni 	$L__BB0_9;

$L__BB0_9:
	add.s32 	%r87, %r6, %r5;
	cvt.s64.s32 	%rd24, %r87;
	mov.u64 	%rd221, %rd24;
	bra.uni 	$L__BB0_11;

$L__BB0_10:
	mov.u64 	%rd221, %rd21;
$L__tmp46:
	bra.uni 	$L__BB0_11;

$L__BB0_11:
	mov.u64 	%rd25, %rd221;
	cvt.u32.u64 	%r7, %rd25;
$L__tmp47:
	.loc	10 158 15
	cvt.s64.s32 	%rd114, %r6;
	sub.s64 	%rd115, %rd114, %rd18;
	cvt.u32.u64 	%r88, %rd115;
	setp.gt.s32 	%p27, %r88, 0;
	not.pred 	%p28, %p27;
	@%p28 bra 	$L__BB0_13;
	bra.uni 	$L__BB0_12;

$L__BB0_12:
	cvt.s64.s32 	%rd116, %r6;
	sub.s64 	%rd117, %rd116, %rd18;
	cvt.u32.u64 	%r8, %rd117;
	mov.u32 	%r117, %r8;
	bra.uni 	$L__BB0_14;

$L__BB0_13:
	.loc	10 0 15
	mov.u32 	%r89, 0;
	.loc	10 158 15
	mov.u32 	%r117, %r89;
	bra.uni 	$L__BB0_14;

$L__BB0_14:
	mov.u32 	%r9, %r117;
$L__tmp48:
	.loc	10 159 15
	cvt.s64.s32 	%rd118, %r6;
	setp.lt.s64 	%p29, %rd118, %rd15;
	not.pred 	%p30, %p29;
	@%p30 bra 	$L__BB0_16;
	bra.uni 	$L__BB0_15;

$L__BB0_15:
	cvt.s64.s32 	%rd26, %r6;
	mov.u64 	%rd222, %rd26;
	bra.uni 	$L__BB0_17;

$L__BB0_16:
	mov.u64 	%rd222, %rd15;
$L__tmp49:
	bra.uni 	$L__BB0_17;

$L__BB0_17:
	mov.u64 	%rd27, %rd222;
	cvt.u32.u64 	%r10, %rd27;
$L__tmp50:
	.loc	10 162 5
	mov.u32 	%r118, %r9;
$L__tmp51:
	mov.u32 	%r119, %r10;
$L__tmp52:
	bra.uni 	$L__BB0_18;

$L__BB0_18:
	mov.u32 	%r12, %r119;
	mov.u32 	%r11, %r118;
$L__tmp53:
	setp.lt.s32 	%p31, %r11, %r12;
	not.pred 	%p32, %p31;
	@%p32 bra 	$L__BB0_23;
	bra.uni 	$L__BB0_19;

$L__BB0_19:
$L__tmp54:
	.loc	10 163 17
	add.s32 	%r113, %r11, %r12;
	div.s32 	%r13, %r113, 2;
$L__tmp55:
	.loc	10 164 7
	cvt.s64.s32 	%rd209, %r13;
	add.s64 	%rd210, %rd209, %rd13;
	shl.b64 	%rd211, %rd210, 3;
	add.s64 	%rd212, %rd6, %rd211;
	ld.u64 	%rd213, [%rd212];
	sub.s32 	%r114, %r6, %r13;
	sub.s32 	%r115, %r114, 1;
	cvt.s64.s32 	%rd214, %r115;
	add.s64 	%rd215, %rd214, %rd16;
	shl.b64 	%rd216, %rd215, 3;
	add.s64 	%rd217, %rd7, %rd216;
	ld.u64 	%rd218, [%rd217];
	setp.lt.s64 	%p72, %rd213, %rd218;
	not.pred 	%p73, %p72;
	@%p73 bra 	$L__BB0_21;
	bra.uni 	$L__BB0_20;

$L__BB0_20:
$L__tmp56:
	.loc	10 165 10
	add.s32 	%r14, %r13, 1;
$L__tmp57:
	mov.u32 	%r120, %r14;
$L__tmp58:
	mov.u32 	%r121, %r12;
$L__tmp59:
	bra.uni 	$L__BB0_22;
$L__tmp60:

$L__BB0_21:
	.loc	10 168 10
	mov.b32 	%r15, %r13;
$L__tmp61:
	mov.u32 	%r120, %r11;
$L__tmp62:
	mov.u32 	%r121, %r15;
$L__tmp63:
	bra.uni 	$L__BB0_22;

$L__BB0_22:
	mov.u32 	%r17, %r121;
	mov.u32 	%r16, %r120;
$L__tmp64:
	mov.u32 	%r118, %r16;
$L__tmp65:
	mov.u32 	%r119, %r17;
$L__tmp66:
	bra.uni 	$L__BB0_18;
$L__tmp67:

$L__BB0_23:
	.loc	10 171 16
	mov.b32 	%r18, %r11;
$L__tmp68:
	.loc	10 172 16
	sub.s32 	%r90, %r6, %r11;
	sub.s32 	%r19, %r90, 1;
$L__tmp69:
	.loc	10 173 5
	setp.gt.s32 	%p34, %r6, 0;
	mov.pred 	%p33, 0;
	not.pred 	%p35, %p34;
	mov.pred 	%p74, %p33;
	@%p35 bra 	$L__BB0_25;
	bra.uni 	$L__BB0_24;

$L__BB0_24:
	cvt.s64.s32 	%rd119, %r6;
	add.s64 	%rd120, %rd15, %rd18;
	setp.lt.s64 	%p1, %rd119, %rd120;
	mov.pred 	%p74, %p1;
	bra.uni 	$L__BB0_25;

$L__BB0_25:
	mov.pred 	%p2, %p74;
	mov.pred 	%p36, 0;
	not.pred 	%p37, %p2;
	mov.pred 	%p75, %p36;
	@%p37 bra 	$L__BB0_27;
	bra.uni 	$L__BB0_26;

$L__BB0_26:
	cvt.s64.s32 	%rd121, %r18;
	add.s64 	%rd122, %rd121, %rd13;
	shl.b64 	%rd123, %rd122, 3;
	add.s64 	%rd124, %rd6, %rd123;
	ld.u64 	%rd125, [%rd124];
	cvt.s64.s32 	%rd126, %r19;
	add.s64 	%rd127, %rd126, %rd16;
	shl.b64 	%rd128, %rd127, 3;
	add.s64 	%rd129, %rd7, %rd128;
	ld.u64 	%rd130, [%rd129];
	setp.eq.s64 	%p3, %rd125, %rd130;
	mov.pred 	%p75, %p3;
	bra.uni 	$L__BB0_27;

$L__BB0_27:
	mov.pred 	%p4, %p75;
	not.pred 	%p38, %p4;
	mov.u32 	%r122, %r6;
$L__tmp70:
	@%p38 bra 	$L__BB0_29;
	bra.uni 	$L__BB0_28;

$L__BB0_28:
$L__tmp71:
	.loc	10 174 8
	add.s32 	%r20, %r6, -1;
$L__tmp72:
	mov.u32 	%r122, %r20;
$L__tmp73:
	bra.uni 	$L__BB0_29;
$L__tmp74:

$L__BB0_29:
	.loc	10 177 18
	mov.u32 	%r21, %r122;
$L__tmp75:
	cvt.s64.s32 	%rd131, %r18;
	add.s64 	%rd132, %rd131, %rd13;
	cvt.u32.u64 	%r22, %rd132;
$L__tmp76:
	.loc	10 178 18
	sub.s32 	%r91, %r21, %r18;
	cvt.s64.s32 	%rd133, %r91;
	add.s64 	%rd134, %rd133, %rd16;
	cvt.u32.u64 	%r23, %rd134;
$L__tmp77:
	.loc	10 183 5
	cvt.s64.s32 	%rd135, %r7;
	sub.s64 	%rd136, %rd135, %rd18;
	cvt.u32.u64 	%r92, %rd136;
	setp.gt.s32 	%p39, %r92, 0;
	not.pred 	%p40, %p39;
	@%p40 bra 	$L__BB0_31;
	bra.uni 	$L__BB0_30;

$L__BB0_30:
	cvt.s64.s32 	%rd137, %r7;
	sub.s64 	%rd138, %rd137, %rd18;
	cvt.u32.u64 	%r24, %rd138;
	mov.u32 	%r123, %r24;
	bra.uni 	$L__BB0_32;

$L__BB0_31:
	.loc	10 0 5
	mov.u32 	%r93, 0;
	.loc	10 183 5
	mov.u32 	%r123, %r93;
	bra.uni 	$L__BB0_32;

$L__BB0_32:
	mov.u32 	%r25, %r123;
$L__tmp78:
	.loc	10 184 5
	cvt.s64.s32 	%rd139, %r7;
	setp.lt.s64 	%p41, %rd139, %rd15;
	not.pred 	%p42, %p41;
	@%p42 bra 	$L__BB0_34;
	bra.uni 	$L__BB0_33;

$L__BB0_33:
	cvt.s64.s32 	%rd28, %r7;
	mov.u64 	%rd223, %rd28;
	bra.uni 	$L__BB0_35;

$L__BB0_34:
	mov.u64 	%rd223, %rd15;
$L__tmp79:
	bra.uni 	$L__BB0_35;

$L__BB0_35:
	mov.u64 	%rd29, %rd223;
	cvt.u32.u64 	%r26, %rd29;
$L__tmp80:
	.loc	10 186 5
	mov.u32 	%r124, %r25;
$L__tmp81:
	mov.u32 	%r125, %r26;
$L__tmp82:
	bra.uni 	$L__BB0_36;

$L__BB0_36:
	mov.u32 	%r28, %r125;
	mov.u32 	%r27, %r124;
$L__tmp83:
	setp.lt.s32 	%p43, %r27, %r28;
	not.pred 	%p44, %p43;
	@%p44 bra 	$L__BB0_41;
	bra.uni 	$L__BB0_37;

$L__BB0_37:
$L__tmp84:
	.loc	10 187 18
	add.s32 	%r110, %r27, %r28;
	div.s32 	%r29, %r110, 2;
$L__tmp85:
	.loc	10 189 8
	cvt.s64.s32 	%rd199, %r29;
	add.s64 	%rd200, %rd199, %rd13;
	shl.b64 	%rd201, %rd200, 3;
	add.s64 	%rd202, %rd6, %rd201;
	ld.u64 	%rd203, [%rd202];
	sub.s32 	%r111, %r7, %r29;
	sub.s32 	%r112, %r111, 1;
	cvt.s64.s32 	%rd204, %r112;
	add.s64 	%rd205, %rd204, %rd16;
	shl.b64 	%rd206, %rd205, 3;
	add.s64 	%rd207, %rd7, %rd206;
	ld.u64 	%rd208, [%rd207];
	setp.lt.s64 	%p70, %rd203, %rd208;
	not.pred 	%p71, %p70;
	@%p71 bra 	$L__BB0_39;
	bra.uni 	$L__BB0_38;

$L__BB0_38:
$L__tmp86:
	.loc	10 190 11
	add.s32 	%r30, %r29, 1;
$L__tmp87:
	mov.u32 	%r126, %r30;
$L__tmp88:
	mov.u32 	%r127, %r28;
$L__tmp89:
	bra.uni 	$L__BB0_40;
$L__tmp90:

$L__BB0_39:
	.loc	10 193 11
	mov.b32 	%r31, %r29;
$L__tmp91:
	mov.u32 	%r126, %r27;
$L__tmp92:
	mov.u32 	%r127, %r31;
$L__tmp93:
	bra.uni 	$L__BB0_40;

$L__BB0_40:
	mov.u32 	%r33, %r127;
	mov.u32 	%r32, %r126;
$L__tmp94:
	mov.u32 	%r124, %r32;
$L__tmp95:
	mov.u32 	%r125, %r33;
$L__tmp96:
	bra.uni 	$L__BB0_36;
$L__tmp97:

$L__BB0_41:
	.loc	10 197 5
	mov.b32 	%r34, %r27;
$L__tmp98:
	.loc	10 198 5
	sub.s32 	%r94, %r7, %r27;
	sub.s32 	%r35, %r94, 1;
$L__tmp99:
	.loc	10 199 5
	cvt.s64.s32 	%rd140, %r7;
	add.s64 	%rd141, %rd15, %rd18;
	setp.lt.s64 	%p46, %rd140, %rd141;
	mov.pred 	%p45, 0;
	not.pred 	%p47, %p46;
	mov.pred 	%p76, %p45;
	@%p47 bra 	$L__BB0_43;
	bra.uni 	$L__BB0_42;

$L__BB0_42:
	cvt.s64.s32 	%rd142, %r34;
	add.s64 	%rd143, %rd142, %rd13;
	shl.b64 	%rd144, %rd143, 3;
	add.s64 	%rd145, %rd6, %rd144;
	ld.u64 	%rd146, [%rd145];
	cvt.s64.s32 	%rd147, %r35;
	add.s64 	%rd148, %rd147, %rd16;
	shl.b64 	%rd149, %rd148, 3;
	add.s64 	%rd150, %rd7, %rd149;
	ld.u64 	%rd151, [%rd150];
	setp.eq.s64 	%p5, %rd146, %rd151;
	mov.pred 	%p76, %p5;
	bra.uni 	$L__BB0_43;

$L__BB0_43:
	mov.pred 	%p6, %p76;
	not.pred 	%p48, %p6;
	@%p48 bra 	$L__BB0_45;
	bra.uni 	$L__BB0_44;

$L__BB0_44:
$L__tmp100:
	.loc	10 200 9
	bra.uni 	$L__BB0_45;
$L__tmp101:

$L__BB0_45:
	.loc	10 203 16
	cvt.s64.s32 	%rd152, %r34;
	add.s64 	%rd153, %rd152, %rd13;
	cvt.u32.u64 	%r36, %rd153;
$L__tmp102:
	.loc	10 204 16
	sub.s32 	%r95, %r7, %r34;
	cvt.s64.s32 	%rd154, %r95;
	add.s64 	%rd155, %rd154, %rd16;
	cvt.u32.u64 	%r37, %rd155;
$L__tmp103:
	.loc	10 208 13
	mov.u32 	%r96, 0;
	mov.b32 	%r38, %r96;
$L__tmp104:
	.loc	10 213 21
	mov.b32 	%r39, %r96;
$L__tmp105:
	.loc	10 217 11
	mov.b32 	%r40, %r22;
$L__tmp106:
	.loc	10 218 11
	mov.b32 	%r41, %r23;
$L__tmp107:
	.loc	10 224 5
	mov.u32 	%r128, %r38;
$L__tmp108:
	mov.u32 	%r129, %r39;
$L__tmp109:
	mov.u32 	%r130, %r40;
$L__tmp110:
	mov.u32 	%r131, %r41;
$L__tmp111:
	bra.uni 	$L__BB0_46;

$L__BB0_46:
	mov.u32 	%r45, %r131;
	mov.u32 	%r44, %r130;
	mov.u32 	%r43, %r129;
	mov.u32 	%r42, %r128;
$L__tmp112:
	setp.lt.s32 	%p50, %r44, %r36;
	mov.pred 	%p49, 0;
	not.pred 	%p51, %p50;
	mov.pred 	%p77, %p49;
	@%p51 bra 	$L__BB0_48;
	bra.uni 	$L__BB0_47;

$L__BB0_47:
	setp.lt.s32 	%p7, %r45, %r37;
	mov.pred 	%p77, %p7;
	bra.uni 	$L__BB0_48;

$L__BB0_48:
	mov.pred 	%p8, %p77;
	mov.pred 	%p52, 0;
	not.pred 	%p53, %p8;
	mov.pred 	%p78, %p52;
	@%p53 bra 	$L__BB0_50;
	bra.uni 	$L__BB0_49;

$L__BB0_49:
	setp.ne.s64 	%p9, %rd15, 0;
	mov.pred 	%p78, %p9;
	bra.uni 	$L__BB0_50;

$L__BB0_50:
	mov.pred 	%p10, %p78;
	mov.pred 	%p54, 0;
	not.pred 	%p55, %p10;
	mov.pred 	%p79, %p54;
	@%p55 bra 	$L__BB0_52;
	bra.uni 	$L__BB0_51;

$L__BB0_51:
	setp.ne.s64 	%p11, %rd18, 0;
	mov.pred 	%p79, %p11;
	bra.uni 	$L__BB0_52;

$L__BB0_52:
	mov.pred 	%p12, %p79;
	not.pred 	%p56, %p12;
	@%p56 bra 	$L__BB0_60;
	bra.uni 	$L__BB0_53;

$L__BB0_53:
$L__tmp113:
	.loc	10 226 9
	cvt.s64.s32 	%rd169, %r44;
	shl.b64 	%rd170, %rd169, 3;
	add.s64 	%rd171, %rd6, %rd170;
	ld.u64 	%rd172, [%rd171];
	cvt.s64.s32 	%rd173, %r45;
	shl.b64 	%rd174, %rd173, 3;
	add.s64 	%rd175, %rd7, %rd174;
	ld.u64 	%rd176, [%rd175];
	setp.eq.s64 	%p64, %rd172, %rd176;
	not.pred 	%p65, %p64;
	@%p65 bra 	$L__BB0_58;
	bra.uni 	$L__BB0_54;

$L__BB0_54:
$L__tmp114:
	.loc	10 228 13
	cvt.s64.s32 	%rd193, %r44;
	shl.b64 	%rd194, %rd193, 2;
	add.s64 	%rd195, %rd1, %rd194;
	ld.u32 	%r106, [%rd195];
	mov.b32 	%r46, %r106;
$L__tmp115:
	.loc	10 229 13
	cvt.s64.s32 	%rd196, %r45;
	shl.b64 	%rd197, %rd196, 2;
	add.s64 	%rd198, %rd2, %rd197;
	ld.u32 	%r107, [%rd198];
	mov.b32 	%r47, %r107;
$L__tmp116:
	.loc	10 230 13
	setp.ne.s32 	%p68, %r43, 0;
	not.pred 	%p69, %p68;
	@%p69 bra 	$L__BB0_56;
	bra.uni 	$L__BB0_55;

$L__BB0_55:
$L__tmp117:
	.loc	10 232 23
	mul.lo.s32 	%r109, %r46, %r47;
$L__tmp118:
	.loc	10 233 17
	add.s32 	%r48, %r42, %r109;
$L__tmp119:
	mov.u32 	%r132, %r48;
$L__tmp120:
	mov.u32 	%r133, %r43;
$L__tmp121:
	bra.uni 	$L__BB0_57;
$L__tmp122:

$L__BB0_56:
	.loc	10 239 17
	mov.u32 	%r108, 1;
	mov.b32 	%r49, %r108;
$L__tmp123:
	.loc	10 240 17
	mul.lo.s32 	%r50, %r46, %r47;
$L__tmp124:
	mov.u32 	%r132, %r50;
$L__tmp125:
	mov.u32 	%r133, %r49;
$L__tmp126:
	bra.uni 	$L__BB0_57;
$L__tmp127:

$L__BB0_57:
	.loc	10 245 13
	mov.u32 	%r52, %r133;
	mov.u32 	%r51, %r132;
$L__tmp128:
	add.s32 	%r53, %r44, 1;
$L__tmp129:
	.loc	10 246 13
	add.s32 	%r54, %r45, 1;
$L__tmp130:
	mov.u32 	%r134, %r51;
$L__tmp131:
	mov.u32 	%r135, %r52;
$L__tmp132:
	mov.u32 	%r136, %r53;
$L__tmp133:
	mov.u32 	%r137, %r54;
$L__tmp134:
	bra.uni 	$L__BB0_59;
$L__tmp135:

$L__BB0_58:
	.loc	10 252 13
	cvt.s64.s32 	%rd177, %r44;
	shl.b64 	%rd178, %rd177, 3;
	add.s64 	%rd179, %rd6, %rd178;
	ld.u64 	%rd180, [%rd179];
	cvt.s64.s32 	%rd181, %r45;
	shl.b64 	%rd182, %rd181, 3;
	add.s64 	%rd183, %rd7, %rd182;
	ld.u64 	%rd184, [%rd183];
	setp.lt.s64 	%p66, %rd180, %rd184;
	selp.u32 	%r104, 1, 0, %p66;
	add.s32 	%r55, %r44, %r104;
$L__tmp136:
	.loc	10 253 13
	cvt.s64.s32 	%rd185, %r55;
	shl.b64 	%rd186, %rd185, 3;
	add.s64 	%rd187, %rd6, %rd186;
	ld.u64 	%rd188, [%rd187];
	cvt.s64.s32 	%rd189, %r45;
	shl.b64 	%rd190, %rd189, 3;
	add.s64 	%rd191, %rd7, %rd190;
	ld.u64 	%rd192, [%rd191];
	setp.gt.s64 	%p67, %rd188, %rd192;
	selp.u32 	%r105, 1, 0, %p67;
	add.s32 	%r56, %r45, %r105;
$L__tmp137:
	mov.u32 	%r134, %r42;
$L__tmp138:
	mov.u32 	%r135, %r43;
$L__tmp139:
	mov.u32 	%r136, %r55;
$L__tmp140:
	mov.u32 	%r137, %r56;
$L__tmp141:
	bra.uni 	$L__BB0_59;

$L__BB0_59:
	mov.u32 	%r60, %r137;
	mov.u32 	%r59, %r136;
	mov.u32 	%r58, %r135;
	mov.u32 	%r57, %r134;
$L__tmp142:
	mov.u32 	%r128, %r57;
$L__tmp143:
	mov.u32 	%r129, %r58;
$L__tmp144:
	mov.u32 	%r130, %r59;
$L__tmp145:
	mov.u32 	%r131, %r60;
$L__tmp146:
	bra.uni 	$L__BB0_46;
$L__tmp147:

$L__BB0_60:
	.loc	10 0 13
	add.u64 	%rd156, %SP, 128;
	mov.b64 	%rd157, %rd156;
	st.u64 	[%SP+0], %rd157;
	mov.b32 	%r97, %r43;
$L__tmp148:
	.loc	3 1081 50
	bra.uni	$L__tmp149;
$L__tmp149:
	.loc	3 1012 27
	mov.u32 	%r98, -1;
	mov.b32 	%r99, %r98;
$L__tmp150:
	.loc	3 1019 9
	mov.b32 	%r100, %r99;
$L__tmp151:
	.loc	3 1081 36
	{ // callseq 6, 0
	.reg .b32 temp_param_reg;
	.param .b32 param0;
	st.param.b32 	[param0+0], %r100;
	.param .b32 param1;
	st.param.b32 	[param1+0], %r97;
	.param .b32 retval0;
	call.uni (retval0), 
	_Z13__ballot_syncji, 
	(
	param0, 
	param1
	);
	ld.param.b32 	%r101, [retval0+0];
$L__tmp152:
	} // callseq 6
	.loc	3 1082 9
	setp.ne.s32 	%p57, %r101, 0;
	selp.u32 	%r102, 1, 0, %p57;
$L__tmp153:
	.loc	10 270 19
	mov.b32 	%r61, %r102;
$L__tmp154:
	.loc	10 273 5
	setp.ne.s32 	%p58, %r61, 0;
	not.pred 	%p59, %p58;
	mov.u32 	%r138, %r42;
$L__tmp155:
	@%p59 bra 	$L__BB0_62;
	bra.uni 	$L__BB0_61;

$L__BB0_61:
$L__tmp156:
	.loc	10 275 8
	ld.u64 	%rd158, [%SP+136];
	ld.u64 	%rd159, [%SP+128];
	.loc	10 275 14
	{ // callseq 7, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd159;
	st.param.b64 	[param0+8], %rd158;
	.param .b32 param1;
	st.param.b32 	[param1+0], %r42;
	.param .b32 retval0;
	call.uni (retval0), 
	_Z13GB_reduce_sumIiLi32EET_N18cooperative_groups4__v117thread_block_tileIXT0_EvEES0_, 
	(
	param0, 
	param1
	);
	ld.param.b32 	%r62, [retval0+0];
$L__tmp157:
	} // callseq 7
	mov.u32 	%r138, %r62;
$L__tmp158:
	bra.uni 	$L__BB0_62;
$L__tmp159:

$L__BB0_62:
	.loc	10 284 5
	mov.u32 	%r63, %r138;
$L__tmp160:
	setp.eq.s32 	%p60, %r2, 0;
	not.pred 	%p61, %p60;
	mov.u32 	%r140, %r4;
$L__tmp161:
	@%p61 bra 	$L__BB0_67;
	bra.uni 	$L__BB0_63;

$L__BB0_63:
$L__tmp162:
	.loc	10 287 9
	setp.ne.s32 	%p62, %r61, 0;
	not.pred 	%p63, %p62;
	@%p63 bra 	$L__BB0_65;
	bra.uni 	$L__BB0_64;

$L__BB0_64:
$L__tmp163:
	.loc	10 295 12
	shl.b64 	%rd164, %rd11, 2;
	add.s64 	%rd165, %rd3, %rd164;
	st.u32 	[%rd165], %r63;
	.loc	10 296 12
	shl.b64 	%rd166, %rd11, 3;
	add.s64 	%rd167, %rd4, %rd166;
	st.u64 	[%rd167], %rd12;
	mov.u32 	%r139, %r4;
$L__tmp164:
	bra.uni 	$L__BB0_66;
$L__tmp165:

$L__BB0_65:
	.loc	10 301 12
	add.s32 	%r64, %r4, 1;
$L__tmp166:
	.loc	10 302 12
	neg.s64 	%rd160, %rd12;
	sub.s64 	%rd161, %rd160, 2;
	shl.b64 	%rd162, %rd11, 3;
	add.s64 	%rd163, %rd4, %rd162;
	st.u64 	[%rd163], %rd161;
	mov.u32 	%r139, %r64;
$L__tmp167:
	bra.uni 	$L__BB0_66;

$L__BB0_66:
	mov.u32 	%r65, %r139;
$L__tmp168:
	mov.u32 	%r140, %r65;
$L__tmp169:
	bra.uni 	$L__BB0_67;
$L__tmp170:

$L__BB0_67:
	.loc	10 127 10
	mov.u32 	%r66, %r140;
$L__tmp171:
	bra.uni 	$L__BB0_68;

$L__BB0_68:
	mov.u32 	%r103, %nctaid.x;
	cvt.u64.u32 	%rd168, %r103;
	add.s64 	%rd30, %rd11, %rd168;
$L__tmp172:
	mov.u32 	%r116, %r66;
$L__tmp173:
	mov.u64 	%rd219, %rd30;
$L__tmp174:
	bra.uni 	$L__BB0_1;
$L__tmp175:

$L__BB0_69:
	.loc	10 310 3
	setp.eq.s32 	%p18, %r2, 0;
	mov.pred 	%p17, 0;
	not.pred 	%p19, %p18;
	mov.pred 	%p80, %p17;
	@%p19 bra 	$L__BB0_71;
	bra.uni 	$L__BB0_70;

$L__BB0_70:
	setp.gt.s32 	%p13, %r4, 0;
	mov.pred 	%p80, %p13;
	bra.uni 	$L__BB0_71;

$L__BB0_71:
	mov.pred 	%p14, %p80;
	not.pred 	%p20, %p14;
	@%p20 bra 	$L__BB0_73;
	bra.uni 	$L__BB0_72;

$L__BB0_72:
$L__tmp176:
	.loc	10 312 7
	mov.u32 	%r81, %ctaid.x;
	ld.u64 	%rd73, [%rd34+176];
	st.u32 	[%SP+144], %r81;
	st.u32 	[%SP+148], %r4;
	st.u64 	[%SP+152], %rd73;
	mov.u64 	%rd74, $str;
	cvta.global.u64 	%rd75, %rd74;
	add.u64 	%rd76, %SP, 144;
	{ // callseq 3, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd75;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd76;
	.param .b32 retval0;
	call.uni (retval0), 
	vprintf, 
	(
	param0, 
	param1
	);
	ld.param.b32 	%r82, [retval0+0];
	} // callseq 3
	.loc	10 313 7
	add.s64 	%rd77, %rd34, 176;
	cvt.s64.s32 	%rd78, %r4;
	{ // callseq 4, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd77;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd78;
	.param .b64 retval0;
	call.uni (retval0), 
	_Z9atomicAddPyy, 
	(
	param0, 
	param1
	);
	ld.param.b64 	%rd79, [retval0+0];
	} // callseq 4
	.loc	10 314 7
	ld.u64 	%rd80, [%rd34+176];
	st.u64 	[%SP+144], %rd80;
	mov.u64 	%rd81, $str$1;
	cvta.global.u64 	%rd82, %rd81;
	{ // callseq 5, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd82;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd76;
	.param .b32 retval0;
	call.uni (retval0), 
	vprintf, 
	(
	param0, 
	param1
	);
	ld.param.b32 	%r83, [retval0+0];
	} // callseq 5
	bra.uni 	$L__BB0_73;
$L__tmp177:

$L__BB0_73:
	.loc	10 319 1
	ret;
$L__tmp178:
$L__func_end0:

}
	// .weak	_Z13GB_reduce_sumIiLi32EET_N18cooperative_groups4__v117thread_block_tileIXT0_EvEES0_
.weak .func  (.param .b32 func_retval0) _Z13GB_reduce_sumIiLi32EET_N18cooperative_groups4__v117thread_block_tileIXT0_EvEES0_(
	.param .align 8 .b8 _Z13GB_reduce_sumIiLi32EET_N18cooperative_groups4__v117thread_block_tileIXT0_EvEES0__param_0[16],
	.param .b32 _Z13GB_reduce_sumIiLi32EET_N18cooperative_groups4__v117thread_block_tileIXT0_EvEES0__param_1
)
{
	.local .align 8 .b8 	__local_depot1[32];
	.reg .b64 	%SP;
	.reg .b64 	%SPL;
	.reg .pred 	%p<3>;
	.reg .b32 	%r<24>;
	.reg .b64 	%rd<9>;
	.loc	10 48 0
$L__func_begin1:
	.loc	10 48 0


	mov.u64 	%SPL, __local_depot1;
	cvta.local.u64 	%SP, %SPL;
	ld.param.u64 	%rd2, [_Z13GB_reduce_sumIiLi32EET_N18cooperative_groups4__v117thread_block_tileIXT0_EvEES0__param_0+8];
	ld.param.u32 	%r4, [_Z13GB_reduce_sumIiLi32EET_N18cooperative_groups4__v117thread_block_tileIXT0_EvEES0__param_1];
	ld.param.u64 	%rd1, [_Z13GB_reduce_sumIiLi32EET_N18cooperative_groups4__v117thread_block_tileIXT0_EvEES0__param_0];
	st.u64 	[%SP+16], %rd2;
	st.u64 	[%SP+8], %rd1;
	st.u32 	[%SP+24], %r4;
$L__tmp179:
	.loc	10 52 16
	mov.u32 	%r5, 16;
	mov.b32 	%r1, %r5;
$L__tmp180:
	.loc	10 52 5
	mov.u32 	%r23, %r1;
$L__tmp181:
	bra.uni 	$L__BB1_1;

$L__BB1_1:
	mov.u32 	%r2, %r23;
$L__tmp182:
	setp.gt.s32 	%p1, %r2, 0;
	not.pred 	%p2, %p1;
	@%p2 bra 	$L__BB1_4;
	bra.uni 	$L__BB1_2;

$L__BB1_2:
	.loc	10 0 5
	add.u64 	%rd3, %SP, 8;
	mov.b64 	%rd4, %rd3;
	st.u64 	[%SP+0], %rd4;
	add.u64 	%rd5, %SP, 24;
	mov.b64 	%rd6, %rd5;
$L__tmp183:
	mov.b32 	%r8, %r2;
$L__tmp184:
	mov.b64 	%rd7, %rd6;
$L__tmp185:
	.loc	3 1040 13
	bra.uni	$L__tmp186;
$L__tmp186:
	.loc	4 232 5
	mov.b64 	%rd8, %rd7;
$L__tmp187:
	.loc	3 1040 13
	ld.u32 	%r9, [%rd8];
	.loc	3 1040 55
	bra.uni	$L__tmp188;
$L__tmp188:
	.loc	3 1012 27
	mov.u32 	%r10, -1;
	mov.b32 	%r11, %r10;
$L__tmp189:
	.loc	3 1019 9
	mov.b32 	%r12, %r11;
	mov.b32 	%r13, %r9;
$L__tmp190:
	.loc	3 0 9
	mov.b32 	%r14, %r12;
$L__tmp191:
	mov.b32 	%r15, %r8;
$L__tmp192:
	mov.u32 	%r16, 32;
	mov.b32 	%r17, %r16;
$L__tmp193:
	.loc	3 1039 16
	bra.uni	$L__tmp194;
$L__tmp194:
	.loc	5 327 44
	{ // callseq 8, 0
	.reg .b32 temp_param_reg;
	.param .b32 param0;
	st.param.b32 	[param0+0], %r14;
	.param .b32 param1;
	st.param.b32 	[param1+0], %r13;
	.param .b32 param2;
	st.param.b32 	[param2+0], %r15;
	.param .b32 param3;
	st.param.b32 	[param3+0], %r17;
	.param .b32 retval0;
	call.uni (retval0), 
	_Z16__shfl_down_syncjiji, 
	(
	param0, 
	param1, 
	param2, 
	param3
	);
	ld.param.b32 	%r18, [retval0+0];
	} // callseq 8
$L__tmp195:
	.loc	3 1039 16
	mov.b32 	%r19, %r18;
$L__tmp196:
	.loc	10 54 18
	mov.b32 	%r20, %r19;
$L__tmp197:
	.loc	10 55 9
	ld.u32 	%r21, [%SP+24];
	add.s32 	%r22, %r21, %r20;
	st.u32 	[%SP+24], %r22;
$L__tmp198:
	.loc	10 52 39
	bra.uni 	$L__BB1_3;

$L__BB1_3:
	div.s32 	%r3, %r2, 2;
$L__tmp199:
	mov.u32 	%r23, %r3;
$L__tmp200:
	bra.uni 	$L__BB1_1;
$L__tmp201:

$L__BB1_4:
	.loc	10 57 5
	ld.u32 	%r6, [%SP+24];
	mov.b32 	%r7, %r6;
	st.param.b32 	[func_retval0+0], %r7;
	ret;
$L__tmp202:
$L__func_end1:

}
	// .weak	_ZN4dim3C1E5uint3
.weak .func _ZN4dim3C1E5uint3(
	.param .b64 _ZN4dim3C1E5uint3_param_0,
	.param .align 4 .b8 _ZN4dim3C1E5uint3_param_1[12]
)
{
	.local .align 4 .b8 	__local_depot2[12];
	.reg .b64 	%SP;
	.reg .b64 	%SPL;
	.reg .b32 	%r<7>;
	.reg .b64 	%rd<2>;
	.loc	7 979 0
$L__func_begin2:
	.loc	7 979 0


	mov.u64 	%SPL, __local_depot2;
	cvta.local.u64 	%SP, %SPL;
	ld.param.u64 	%rd1, [_ZN4dim3C1E5uint3_param_0];
	ld.param.u32 	%r2, [_ZN4dim3C1E5uint3_param_1+4];
	ld.param.u32 	%r3, [_ZN4dim3C1E5uint3_param_1+8];
	ld.param.u32 	%r1, [_ZN4dim3C1E5uint3_param_1];
	st.u32 	[%SP+8], %r3;
	st.u32 	[%SP+4], %r2;
	st.u32 	[%SP+0], %r1;
$L__tmp203:
	.loc	7 979 47
	ld.u32 	%r4, [%SP+0];
	st.u32 	[%rd1], %r4;
	.loc	7 979 55
	ld.u32 	%r5, [%SP+4];
	st.u32 	[%rd1+4], %r5;
	.loc	7 979 63
	ld.u32 	%r6, [%SP+8];
	st.u32 	[%rd1+8], %r6;
	.loc	7 979 71
	ret;
$L__tmp204:
$L__func_end2:

}
	// .weak	_ZN18cooperative_groups4__v112thread_groupC2Ej
.weak .func _ZN18cooperative_groups4__v112thread_groupC2Ej(
	.param .b64 _ZN18cooperative_groups4__v112thread_groupC2Ej_param_0,
	.param .b32 _ZN18cooperative_groups4__v112thread_groupC2Ej_param_1
)
{
	.local .align 8 .b8 	__local_depot3[8];
	.reg .b64 	%SP;
	.reg .b64 	%SPL;
	.reg .b32 	%r<10>;
	.reg .b64 	%rd<5>;


	mov.u64 	%SPL, __local_depot3;
	cvta.local.u64 	%SP, %SPL;
	ld.param.u64 	%rd1, [_ZN18cooperative_groups4__v112thread_groupC2Ej_param_0];
	ld.param.u32 	%r1, [_ZN18cooperative_groups4__v112thread_groupC2Ej_param_1];
	mov.b64 	%rd2, %rd1;
	st.u64 	[%SP+0], %rd2;
	mov.b32 	%r2, %r1;
	ld.u64 	%rd3, [%SP+0];
	and.b32  	%r3, %r2, 127;
	ld.u32 	%r4, [%rd3];
	and.b32  	%r5, %r4, -255;
	shl.b32 	%r6, %r3, 1;
	or.b32  	%r7, %r5, %r6;
	st.u32 	[%rd3], %r7;
	ld.u64 	%rd4, [%SP+0];
	ld.u32 	%r8, [%rd4];
	and.b32  	%r9, %r8, -2;
	st.u32 	[%rd4], %r9;
	ret;

}
	// .weak	_ZN18cooperative_groups4__v117thread_group_baseILj4EEC2Ev
.weak .func _ZN18cooperative_groups4__v117thread_group_baseILj4EEC2Ev(
	.param .b64 _ZN18cooperative_groups4__v117thread_group_baseILj4EEC2Ev_param_0
)
{
	.local .align 8 .b8 	__local_depot4[8];
	.reg .b64 	%SP;
	.reg .b64 	%SPL;
	.reg .b32 	%r<2>;
	.reg .b64 	%rd<4>;


	mov.u64 	%SPL, __local_depot4;
	cvta.local.u64 	%SP, %SPL;
	ld.param.u64 	%rd1, [_ZN18cooperative_groups4__v117thread_group_baseILj4EEC2Ev_param_0];
	mov.b64 	%rd2, %rd1;
	st.u64 	[%SP+0], %rd2;
	ld.u64 	%rd3, [%SP+0];
	mov.u32 	%r1, 4;
	{ // callseq 9, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd3;
	.param .b32 param1;
	st.param.b32 	[param1+0], %r1;
	call.uni 
	_ZN18cooperative_groups4__v112thread_groupC2Ej, 
	(
	param0, 
	param1
	);
	} // callseq 9
	ret;

}
	// .weak	_ZN18cooperative_groups4__v117thread_group_baseILj1EEC2Ev
.weak .func _ZN18cooperative_groups4__v117thread_group_baseILj1EEC2Ev(
	.param .b64 _ZN18cooperative_groups4__v117thread_group_baseILj1EEC2Ev_param_0
)
{
	.local .align 8 .b8 	__local_depot5[8];
	.reg .b64 	%SP;
	.reg .b64 	%SPL;
	.reg .b32 	%r<2>;
	.reg .b64 	%rd<4>;


	mov.u64 	%SPL, __local_depot5;
	cvta.local.u64 	%SP, %SPL;
	ld.param.u64 	%rd1, [_ZN18cooperative_groups4__v117thread_group_baseILj1EEC2Ev_param_0];
	mov.b64 	%rd2, %rd1;
	st.u64 	[%SP+0], %rd2;
	ld.u64 	%rd3, [%SP+0];
	mov.u32 	%r1, 1;
	{ // callseq 10, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd3;
	.param .b32 param1;
	st.param.b32 	[param1+0], %r1;
	call.uni 
	_ZN18cooperative_groups4__v112thread_groupC2Ej, 
	(
	param0, 
	param1
	);
	} // callseq 10
	ret;

}
	// .weak	_ZN18cooperative_groups4__v131__single_warp_thread_block_tileILj32EvEC2Ejj
.weak .func _ZN18cooperative_groups4__v131__single_warp_thread_block_tileILj32EvEC2Ejj(
	.param .b64 _ZN18cooperative_groups4__v131__single_warp_thread_block_tileILj32EvEC2Ejj_param_0,
	.param .b32 _ZN18cooperative_groups4__v131__single_warp_thread_block_tileILj32EvEC2Ejj_param_1,
	.param .b32 _ZN18cooperative_groups4__v131__single_warp_thread_block_tileILj32EvEC2Ejj_param_2
)
{
	.local .align 8 .b8 	__local_depot6[8];
	.reg .b64 	%SP;
	.reg .b64 	%SPL;
	.reg .b32 	%r<23>;
	.reg .b64 	%rd<9>;


	mov.u64 	%SPL, __local_depot6;
	cvta.local.u64 	%SP, %SPL;
	ld.param.u64 	%rd1, [_ZN18cooperative_groups4__v131__single_warp_thread_block_tileILj32EvEC2Ejj_param_0];
	ld.param.u32 	%r1, [_ZN18cooperative_groups4__v131__single_warp_thread_block_tileILj32EvEC2Ejj_param_1];
	ld.param.u32 	%r2, [_ZN18cooperative_groups4__v131__single_warp_thread_block_tileILj32EvEC2Ejj_param_2];
	mov.b64 	%rd2, %rd1;
	st.u64 	[%SP+0], %rd2;
	mov.b32 	%r3, %r1;
	mov.b32 	%r4, %r2;
	ld.u64 	%rd3, [%SP+0];
	{ // callseq 11, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd3;
	call.uni 
	_ZN18cooperative_groups4__v117thread_group_baseILj1EEC2Ev, 
	(
	param0
	);
	} // callseq 11
	mov.u32 	%r5, -1;
	mov.b32 	%r6, %r5;
	mov.b32 	%r7, %r6;
	ld.u64 	%rd4, [%SP+0];
	st.u32 	[%rd4+8], %r7;
	ld.u64 	%rd5, [%SP+0];
	ld.u32 	%r8, [%rd5];
	and.b32  	%r9, %r8, 255;
	or.b32  	%r10, %r9, 8192;
	st.u32 	[%rd5], %r10;
	ld.u64 	%rd6, [%SP+0];
	and.b32  	%r11, %r3, 65535;
	ld.u32 	%r12, [%rd6+4];
	and.b32  	%r13, %r12, 65535;
	shl.b32 	%r14, %r11, 16;
	or.b32  	%r15, %r13, %r14;
	st.u32 	[%rd6+4], %r15;
	ld.u64 	%rd7, [%SP+0];
	and.b32  	%r16, %r4, 65535;
	ld.u32 	%r17, [%rd7+4];
	and.b32  	%r18, %r17, -65536;
	or.b32  	%r19, %r18, %r16;
	st.u32 	[%rd7+4], %r19;
	ld.u64 	%rd8, [%SP+0];
	ld.u32 	%r20, [%rd8];
	and.b32  	%r21, %r20, -2;
	or.b32  	%r22, %r21, 1;
	st.u32 	[%rd8], %r22;
	ret;

}
	// .weak	_ZN18cooperative_groups4__v17details22thread_block_tile_implILj32EvLb0EEC2ILj32ENS0_12thread_blockELb0EEERKNS2_IXT_ET0_XT1_EEE
.weak .func _ZN18cooperative_groups4__v17details22thread_block_tile_implILj32EvLb0EEC2ILj32ENS0_12thread_blockELb0EEERKNS2_IXT_ET0_XT1_EEE(
	.param .b64 _ZN18cooperative_groups4__v17details22thread_block_tile_implILj32EvLb0EEC2ILj32ENS0_12thread_blockELb0EEERKNS2_IXT_ET0_XT1_EEE_param_0,
	.param .b64 _ZN18cooperative_groups4__v17details22thread_block_tile_implILj32EvLb0EEC2ILj32ENS0_12thread_blockELb0EEERKNS2_IXT_ET0_XT1_EEE_param_1
)
{
	.local .align 8 .b8 	__local_depot7[80];
	.reg .b64 	%SP;
	.reg .b64 	%SPL;
	.reg .b32 	%r<40>;
	.reg .b64 	%rd<7>;


	mov.u64 	%SPL, __local_depot7;
	cvta.local.u64 	%SP, %SPL;
	ld.param.u64 	%rd1, [_ZN18cooperative_groups4__v17details22thread_block_tile_implILj32EvLb0EEC2ILj32ENS0_12thread_blockELb0EEERKNS2_IXT_ET0_XT1_EEE_param_0];
	ld.param.u64 	%rd2, [_ZN18cooperative_groups4__v17details22thread_block_tile_implILj32EvLb0EEC2ILj32ENS0_12thread_blockELb0EEERKNS2_IXT_ET0_XT1_EEE_param_1];
	mov.b64 	%rd3, %rd1;
	st.u64 	[%SP+64], %rd3;
	mov.b64 	%rd4, %rd2;
	st.u64 	[%SP+72], %rd4;
	ld.u64 	%rd5, [%SP+64];
	mov.u32 	%r1, %tid.x;
	st.u32 	[%SP+36], %r1;
	mov.u32 	%r2, %tid.y;
	st.u32 	[%SP+40], %r2;
	mov.u32 	%r3, %tid.z;
	st.u32 	[%SP+44], %r3;
	ld.u32 	%r4, [%SP+44];
	ld.u32 	%r5, [%SP+40];
	ld.u32 	%r6, [%SP+36];
	add.u64 	%rd6, %SP, 24;
	{ // callseq 12, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd6;
	.param .align 4 .b8 param1[12];
	st.param.b32 	[param1+0], %r6;
	st.param.b32 	[param1+4], %r5;
	st.param.b32 	[param1+8], %r4;
	call.uni 
	_ZN4dim3C1E5uint3, 
	(
	param0, 
	param1
	);
	} // callseq 12
	ld.u32 	%r7, [%SP+24];
	ld.u32 	%r8, [%SP+28];
	ld.u32 	%r9, [%SP+32];
	mov.u32 	%r10, %ntid.x;
	st.u32 	[%SP+48], %r10;
	mov.u32 	%r11, %ntid.y;
	st.u32 	[%SP+52], %r11;
	mov.u32 	%r12, %ntid.z;
	st.u32 	[%SP+56], %r12;
	ld.u32 	%r13, [%SP+48];
	ld.u32 	%r14, [%SP+52];
	ld.u32 	%r15, [%SP+56];
	st.u32 	[%SP+8], %r9;
	st.u32 	[%SP+4], %r8;
	st.u32 	[%SP+0], %r7;
	st.u32 	[%SP+20], %r15;
	st.u32 	[%SP+16], %r14;
	st.u32 	[%SP+12], %r13;
	ld.u32 	%r16, [%SP+8];
	ld.u32 	%r17, [%SP+16];
	mul.lo.s32 	%r18, %r16, %r17;
	ld.u32 	%r19, [%SP+12];
	mul.lo.s32 	%r20, %r18, %r19;
	ld.u32 	%r21, [%SP+4];
	ld.u32 	%r22, [%SP+12];
	mul.lo.s32 	%r23, %r21, %r22;
	add.s32 	%r24, %r20, %r23;
	ld.u32 	%r25, [%SP+0];
	add.s32 	%r26, %r24, %r25;
	mov.b32 	%r27, %r26;
	mov.b32 	%r28, %r27;
	div.u32 	%r29, %r28, 32;
	mov.u32 	%r30, %ntid.x;
	mov.u32 	%r31, %ntid.y;
	mul.lo.s32 	%r32, %r30, %r31;
	mov.u32 	%r33, %ntid.z;
	mul.lo.s32 	%r34, %r32, %r33;
	mov.b32 	%r35, %r34;
	mov.b32 	%r36, %r35;
	add.s32 	%r37, %r36, 32;
	sub.s32 	%r38, %r37, 1;
	div.u32 	%r39, %r38, 32;
	{ // callseq 13, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd5;
	.param .b32 param1;
	st.param.b32 	[param1+0], %r29;
	.param .b32 param2;
	st.param.b32 	[param2+0], %r39;
	call.uni 
	_ZN18cooperative_groups4__v131__single_warp_thread_block_tileILj32EvEC2Ejj, 
	(
	param0, 
	param1, 
	param2
	);
	} // callseq 13
	ret;

}
	// .weak	_ZN18cooperative_groups4__v131__single_warp_thread_block_tileILj32ENS0_12thread_blockEEC2Ev
.weak .func _ZN18cooperative_groups4__v131__single_warp_thread_block_tileILj32ENS0_12thread_blockEEC2Ev(
	.param .b64 _ZN18cooperative_groups4__v131__single_warp_thread_block_tileILj32ENS0_12thread_blockEEC2Ev_param_0
)
{
	.local .align 8 .b8 	__local_depot8[8];
	.reg .b64 	%SP;
	.reg .b64 	%SPL;
	.reg .b64 	%rd<3>;


	mov.u64 	%SPL, __local_depot8;
	cvta.local.u64 	%SP, %SPL;
	ld.param.u64 	%rd1, [_ZN18cooperative_groups4__v131__single_warp_thread_block_tileILj32ENS0_12thread_blockEEC2Ev_param_0];
	mov.b64 	%rd2, %rd1;
	st.u64 	[%SP+0], %rd2;
	ret;

}
	// .weak	_ZN18cooperative_groups4__v17details22thread_block_tile_implILj32ENS0_12thread_blockELb0EEC2ERKS3_
.weak .func _ZN18cooperative_groups4__v17details22thread_block_tile_implILj32ENS0_12thread_blockELb0EEC2ERKS3_(
	.param .b64 _ZN18cooperative_groups4__v17details22thread_block_tile_implILj32ENS0_12thread_blockELb0EEC2ERKS3__param_0,
	.param .b64 _ZN18cooperative_groups4__v17details22thread_block_tile_implILj32ENS0_12thread_blockELb0EEC2ERKS3__param_1
)
{
	.local .align 8 .b8 	__local_depot9[16];
	.reg .b64 	%SP;
	.reg .b64 	%SPL;
	.reg .b64 	%rd<6>;


	mov.u64 	%SPL, __local_depot9;
	cvta.local.u64 	%SP, %SPL;
	ld.param.u64 	%rd1, [_ZN18cooperative_groups4__v17details22thread_block_tile_implILj32ENS0_12thread_blockELb0EEC2ERKS3__param_0];
	ld.param.u64 	%rd2, [_ZN18cooperative_groups4__v17details22thread_block_tile_implILj32ENS0_12thread_blockELb0EEC2ERKS3__param_1];
	mov.b64 	%rd3, %rd1;
	st.u64 	[%SP+0], %rd3;
	mov.b64 	%rd4, %rd2;
	st.u64 	[%SP+8], %rd4;
	ld.u64 	%rd5, [%SP+0];
	{ // callseq 14, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd5;
	call.uni 
	_ZN18cooperative_groups4__v131__single_warp_thread_block_tileILj32ENS0_12thread_blockEEC2Ev, 
	(
	param0
	);
	} // callseq 14
	ret;

}
	// .weak	_ZN18cooperative_groups4__v117thread_block_tileILj32ENS0_12thread_blockEEC2ERKS2_
.weak .func _ZN18cooperative_groups4__v117thread_block_tileILj32ENS0_12thread_blockEEC2ERKS2_(
	.param .b64 _ZN18cooperative_groups4__v117thread_block_tileILj32ENS0_12thread_blockEEC2ERKS2__param_0,
	.param .b64 _ZN18cooperative_groups4__v117thread_block_tileILj32ENS0_12thread_blockEEC2ERKS2__param_1
)
{
	.local .align 8 .b8 	__local_depot10[16];
	.reg .b64 	%SP;
	.reg .b64 	%SPL;
	.reg .b64 	%rd<7>;


	mov.u64 	%SPL, __local_depot10;
	cvta.local.u64 	%SP, %SPL;
	ld.param.u64 	%rd1, [_ZN18cooperative_groups4__v117thread_block_tileILj32ENS0_12thread_blockEEC2ERKS2__param_0];
	ld.param.u64 	%rd2, [_ZN18cooperative_groups4__v117thread_block_tileILj32ENS0_12thread_blockEEC2ERKS2__param_1];
	mov.b64 	%rd3, %rd1;
	st.u64 	[%SP+0], %rd3;
	mov.b64 	%rd4, %rd2;
	st.u64 	[%SP+8], %rd4;
	ld.u64 	%rd5, [%SP+0];
	ld.u64 	%rd6, [%SP+8];
	{ // callseq 15, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd5;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd6;
	call.uni 
	_ZN18cooperative_groups4__v17details22thread_block_tile_implILj32ENS0_12thread_blockELb0EEC2ERKS3_, 
	(
	param0, 
	param1
	);
	} // callseq 15
	ret;

}
.func  (.param .b64 func_retval0) _Z9atomicAddPyy(
	.param .b64 _Z9atomicAddPyy_param_0,
	.param .b64 _Z9atomicAddPyy_param_1
)
{
	.reg .b64 	%rd<4>;


	ld.param.u64 	%rd1, [_Z9atomicAddPyy_param_0];
	ld.param.u64 	%rd2, [_Z9atomicAddPyy_param_1];
	{ // callseq 16, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd1;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd2;
	.param .b64 retval0;
	call.uni (retval0), 
	__ullAtomicAdd, 
	(
	param0, 
	param1
	);
	ld.param.b64 	%rd3, [retval0+0];
	} // callseq 16
	st.param.b64 	[func_retval0+0], %rd3;
	ret;

}
.func  (.param .b32 func_retval0) _Z13__ballot_syncji(
	.param .b32 _Z13__ballot_syncji_param_0,
	.param .b32 _Z13__ballot_syncji_param_1
)
{
	.reg .pred 	%p<3>;
	.reg .b32 	%r<4>;


	ld.param.u32 	%r1, [_Z13__ballot_syncji_param_0];
	ld.param.u32 	%r2, [_Z13__ballot_syncji_param_1];
	setp.ne.s32 	%p1, %r2, 0;
	vote.sync.ballot.b32 	%r3, %p1, %r1;
	st.param.b32 	[func_retval0+0], %r3;
	ret;

}
.func  (.param .b32 func_retval0) _Z16__shfl_down_syncjiji(
	.param .b32 _Z16__shfl_down_syncjiji_param_0,
	.param .b32 _Z16__shfl_down_syncjiji_param_1,
	.param .b32 _Z16__shfl_down_syncjiji_param_2,
	.param .b32 _Z16__shfl_down_syncjiji_param_3
)
{
	.reg .pred 	%p<2>;
	.reg .b32 	%r<10>;


	ld.param.u32 	%r1, [_Z16__shfl_down_syncjiji_param_0];
	ld.param.u32 	%r2, [_Z16__shfl_down_syncjiji_param_1];
	ld.param.u32 	%r3, [_Z16__shfl_down_syncjiji_param_2];
	ld.param.u32 	%r4, [_Z16__shfl_down_syncjiji_param_3];
	mov.u32 	%r5, 32;
	sub.s32 	%r6, %r5, %r4;
	shl.b32 	%r7, %r6, 8;
	or.b32  	%r8, %r7, 31;
	shfl.sync.down.b32 	%r9|%p1, %r2, %r3, %r8, %r1;
	st.param.b32 	[func_retval0+0], %r9;
	ret;

}
.func  (.param .b64 func_retval0) __ullAtomicAdd(
	.param .b64 __ullAtomicAdd_param_0,
	.param .b64 __ullAtomicAdd_param_1
)
{
	.reg .b64 	%rd<4>;


	ld.param.u64 	%rd1, [__ullAtomicAdd_param_0];
	ld.param.u64 	%rd2, [__ullAtomicAdd_param_1];
	atom.add.u64 	%rd3, [%rd1], %rd2;
	st.param.b64 	[func_retval0+0], %rd3;
	ret;

}
	.file	1 "/share/workspace/nvidia_projects/GraphBLAS/CUDA/test/GB_opaque.h"
	.file	2 "/share/workspace/nvidia_projects/GraphBLAS/CUDA/test/matrix.h"
	.file	3 "/share/workspace/nvidia_projects/GraphBLAS/CUDA/test/cooperative_groups.h"
	.file	4 "/share/workspace/nvidia_projects/GraphBLAS/CUDA/test/cooperative_groups/details/info.h"
	.file	5 "/share/workspace/nvidia_projects/GraphBLAS/CUDA/test/cooperative_groups/details/helpers.h"
	.file	6 "/share/workspace/nvidia_projects/GraphBLAS/CUDA/test/cstdint"
	.file	7 "/share/workspace/nvidia_projects/GraphBLAS/CUDA/test/__nv_nvrtc_builtin_header.h"
	.file	8 "/share/workspace/nvidia_projects/GraphBLAS/CUDA/test/GB_matrix.h"
	.file	9 "/share/workspace/nvidia_projects/GraphBLAS/CUDA/test/cooperative_groups/details/driver_abi.h"
	.file	10 "/share/workspace/nvidia_projects/GraphBLAS/CUDA/test/GB_jit_AxB_dot3_phase3_mp.cuh"
	.section	.debug_loc
	{
.b64 $L__tmp10
.b64 $L__tmp29
.b8 5
.b8 0
.b8 144
.b8 177
.b8 228
.b8 149
.b8 1
.b64 $L__tmp29
.b64 $L__tmp31
.b8 7
.b8 0
.b8 144
.b8 182
.b8 226
.b8 196
.b8 145
.b8 215
.b8 4
.b64 $L__tmp31
.b64 $L__tmp161
.b8 5
.b8 0
.b8 144
.b8 180
.b8 228
.b8 149
.b8 1
.b64 $L__tmp161
.b64 $L__tmp164
.b8 7
.b8 0
.b8 144
.b8 176
.b8 232
.b8 196
.b8 145
.b8 215
.b8 4
.b64 $L__tmp164
.b64 $L__tmp166
.b8 7
.b8 0
.b8 144
.b8 185
.b8 230
.b8 196
.b8 145
.b8 215
.b8 4
.b64 $L__tmp166
.b64 $L__tmp167
.b8 6
.b8 0
.b8 144
.b8 180
.b8 236
.b8 200
.b8 171
.b8 2
.b64 $L__tmp167
.b64 $L__tmp168
.b8 7
.b8 0
.b8 144
.b8 185
.b8 230
.b8 196
.b8 145
.b8 215
.b8 4
.b64 $L__tmp168
.b64 $L__tmp169
.b8 6
.b8 0
.b8 144
.b8 181
.b8 236
.b8 200
.b8 171
.b8 2
.b64 $L__tmp169
.b64 $L__tmp171
.b8 7
.b8 0
.b8 144
.b8 176
.b8 232
.b8 196
.b8 145
.b8 215
.b8 4
.b64 $L__tmp171
.b64 $L__tmp173
.b8 6
.b8 0
.b8 144
.b8 182
.b8 236
.b8 200
.b8 171
.b8 2
.b64 $L__tmp173
.b64 $L__func_end0
.b8 7
.b8 0
.b8 144
.b8 182
.b8 226
.b8 196
.b8 145
.b8 215
.b8 4
.b64 0
.b64 0
.b64 $L__tmp14
.b64 $L__tmp37
.b8 7
.b8 0
.b8 144
.b8 182
.b8 232
.b8 144
.b8 147
.b8 215
.b8 4
.b64 $L__tmp37
.b64 $L__tmp49
.b8 7
.b8 0
.b8 144
.b8 181
.b8 226
.b8 144
.b8 147
.b8 215
.b8 4
.b64 $L__tmp49
.b64 $L__tmp79
.b8 8
.b8 0
.b8 144
.b8 178
.b8 228
.b8 200
.b8 161
.b8 166
.b8 174
.b8 9
.b64 $L__tmp79
.b64 $L__func_end0
.b8 8
.b8 0
.b8 144
.b8 179
.b8 228
.b8 200
.b8 161
.b8 166
.b8 174
.b8 9
.b64 0
.b64 0
.b64 $L__tmp15
.b64 $L__tmp40
.b8 7
.b8 0
.b8 144
.b8 183
.b8 232
.b8 144
.b8 147
.b8 215
.b8 4
.b64 $L__tmp40
.b64 $L__func_end0
.b8 7
.b8 0
.b8 144
.b8 184
.b8 226
.b8 144
.b8 147
.b8 215
.b8 4
.b64 0
.b64 0
.b64 $L__tmp16
.b64 $L__tmp41
.b8 7
.b8 0
.b8 144
.b8 184
.b8 232
.b8 144
.b8 147
.b8 215
.b8 4
.b64 $L__tmp41
.b64 $L__func_end0
.b8 8
.b8 0
.b8 144
.b8 182
.b8 224
.b8 196
.b8 161
.b8 166
.b8 174
.b8 9
.b64 0
.b64 0
.b64 $L__tmp28
.b64 $L__tmp30
.b8 7
.b8 0
.b8 144
.b8 176
.b8 226
.b8 144
.b8 147
.b8 215
.b8 4
.b64 $L__tmp30
.b64 $L__tmp31
.b8 8
.b8 0
.b8 144
.b8 185
.b8 226
.b8 200
.b8 161
.b8 166
.b8 174
.b8 9
.b64 $L__tmp31
.b64 $L__tmp172
.b8 7
.b8 0
.b8 144
.b8 177
.b8 226
.b8 144
.b8 147
.b8 215
.b8 4
.b64 $L__tmp172
.b64 $L__tmp174
.b8 7
.b8 0
.b8 144
.b8 176
.b8 230
.b8 144
.b8 147
.b8 215
.b8 4
.b64 $L__tmp174
.b64 $L__func_end0
.b8 8
.b8 0
.b8 144
.b8 185
.b8 226
.b8 200
.b8 161
.b8 166
.b8 174
.b8 9
.b64 0
.b64 0
.b64 $L__tmp42
.b64 $L__tmp44
.b8 7
.b8 0
.b8 144
.b8 177
.b8 228
.b8 144
.b8 147
.b8 215
.b8 4
.b64 $L__tmp44
.b64 $L__tmp46
.b8 8
.b8 0
.b8 144
.b8 176
.b8 228
.b8 200
.b8 161
.b8 166
.b8 174
.b8 9
.b64 $L__tmp46
.b64 $L__func_end0
.b8 8
.b8 0
.b8 144
.b8 177
.b8 228
.b8 200
.b8 161
.b8 166
.b8 174
.b8 9
.b64 0
.b64 0
.b64 $L__tmp45
.b64 $L__tmp70
.b8 5
.b8 0
.b8 144
.b8 182
.b8 228
.b8 149
.b8 1
.b64 $L__tmp70
.b64 $L__tmp72
.b8 7
.b8 0
.b8 144
.b8 178
.b8 228
.b8 196
.b8 145
.b8 215
.b8 4
.b64 $L__tmp72
.b64 $L__tmp73
.b8 6
.b8 0
.b8 144
.b8 176
.b8 228
.b8 200
.b8 171
.b8 2
.b64 $L__tmp73
.b64 $L__tmp75
.b8 7
.b8 0
.b8 144
.b8 178
.b8 228
.b8 196
.b8 145
.b8 215
.b8 4
.b64 $L__tmp75
.b64 $L__func_end0
.b8 6
.b8 0
.b8 144
.b8 177
.b8 228
.b8 200
.b8 171
.b8 2
.b64 0
.b64 0
.b64 $L__tmp48
.b64 $L__tmp51
.b8 5
.b8 0
.b8 144
.b8 185
.b8 228
.b8 149
.b8 1
.b64 $L__tmp51
.b64 $L__tmp53
.b8 7
.b8 0
.b8 144
.b8 184
.b8 226
.b8 196
.b8 145
.b8 215
.b8 4
.b64 $L__tmp53
.b64 $L__tmp57
.b8 6
.b8 0
.b8 144
.b8 177
.b8 226
.b8 200
.b8 171
.b8 2
.b64 $L__tmp57
.b64 $L__tmp58
.b8 6
.b8 0
.b8 144
.b8 180
.b8 226
.b8 200
.b8 171
.b8 2
.b64 $L__tmp58
.b64 $L__tmp64
.b8 7
.b8 0
.b8 144
.b8 176
.b8 228
.b8 196
.b8 145
.b8 215
.b8 4
.b64 $L__tmp64
.b64 $L__tmp65
.b8 6
.b8 0
.b8 144
.b8 182
.b8 226
.b8 200
.b8 171
.b8 2
.b64 $L__tmp65
.b64 $L__tmp78
.b8 7
.b8 0
.b8 144
.b8 184
.b8 226
.b8 196
.b8 145
.b8 215
.b8 4
.b64 $L__tmp78
.b64 $L__tmp81
.b8 6
.b8 0
.b8 144
.b8 181
.b8 228
.b8 200
.b8 171
.b8 2
.b64 $L__tmp81
.b64 $L__tmp83
.b8 7
.b8 0
.b8 144
.b8 180
.b8 228
.b8 196
.b8 145
.b8 215
.b8 4
.b64 $L__tmp83
.b64 $L__tmp87
.b8 6
.b8 0
.b8 144
.b8 183
.b8 228
.b8 200
.b8 171
.b8 2
.b64 $L__tmp87
.b64 $L__tmp88
.b8 6
.b8 0
.b8 144
.b8 176
.b8 230
.b8 200
.b8 171
.b8 2
.b64 $L__tmp88
.b64 $L__tmp94
.b8 7
.b8 0
.b8 144
.b8 182
.b8 228
.b8 196
.b8 145
.b8 215
.b8 4
.b64 $L__tmp94
.b64 $L__tmp95
.b8 6
.b8 0
.b8 144
.b8 178
.b8 230
.b8 200
.b8 171
.b8 2
.b64 $L__tmp95
.b64 $L__func_end0
.b8 7
.b8 0
.b8 144
.b8 180
.b8 228
.b8 196
.b8 145
.b8 215
.b8 4
.b64 0
.b64 0
.b64 $L__tmp50
.b64 $L__tmp52
.b8 6
.b8 0
.b8 144
.b8 176
.b8 226
.b8 200
.b8 171
.b8 2
.b64 $L__tmp52
.b64 $L__tmp53
.b8 7
.b8 0
.b8 144
.b8 185
.b8 226
.b8 196
.b8 145
.b8 215
.b8 4
.b64 $L__tmp53
.b64 $L__tmp59
.b8 6
.b8 0
.b8 144
.b8 178
.b8 226
.b8 200
.b8 171
.b8 2
.b64 $L__tmp59
.b64 $L__tmp61
.b8 7
.b8 0
.b8 144
.b8 177
.b8 228
.b8 196
.b8 145
.b8 215
.b8 4
.b64 $L__tmp61
.b64 $L__tmp63
.b8 6
.b8 0
.b8 144
.b8 181
.b8 226
.b8 200
.b8 171
.b8 2
.b64 $L__tmp63
.b64 $L__tmp64
.b8 7
.b8 0
.b8 144
.b8 177
.b8 228
.b8 196
.b8 145
.b8 215
.b8 4
.b64 $L__tmp64
.b64 $L__tmp66
.b8 6
.b8 0
.b8 144
.b8 183
.b8 226
.b8 200
.b8 171
.b8 2
.b64 $L__tmp66
.b64 $L__tmp80
.b8 7
.b8 0
.b8 144
.b8 185
.b8 226
.b8 196
.b8 145
.b8 215
.b8 4
.b64 $L__tmp80
.b64 $L__tmp82
.b8 6
.b8 0
.b8 144
.b8 182
.b8 228
.b8 200
.b8 171
.b8 2
.b64 $L__tmp82
.b64 $L__tmp83
.b8 7
.b8 0
.b8 144
.b8 181
.b8 228
.b8 196
.b8 145
.b8 215
.b8 4
.b64 $L__tmp83
.b64 $L__tmp89
.b8 6
.b8 0
.b8 144
.b8 184
.b8 228
.b8 200
.b8 171
.b8 2
.b64 $L__tmp89
.b64 $L__tmp91
.b8 7
.b8 0
.b8 144
.b8 183
.b8 228
.b8 196
.b8 145
.b8 215
.b8 4
.b64 $L__tmp91
.b64 $L__tmp93
.b8 6
.b8 0
.b8 144
.b8 177
.b8 230
.b8 200
.b8 171
.b8 2
.b64 $L__tmp93
.b64 $L__tmp94
.b8 7
.b8 0
.b8 144
.b8 183
.b8 228
.b8 196
.b8 145
.b8 215
.b8 4
.b64 $L__tmp94
.b64 $L__tmp96
.b8 6
.b8 0
.b8 144
.b8 179
.b8 230
.b8 200
.b8 171
.b8 2
.b64 $L__tmp96
.b64 $L__func_end0
.b8 7
.b8 0
.b8 144
.b8 181
.b8 228
.b8 196
.b8 145
.b8 215
.b8 4
.b64 0
.b64 0
.b64 $L__tmp68
.b64 $L__tmp98
.b8 6
.b8 0
.b8 144
.b8 184
.b8 226
.b8 200
.b8 171
.b8 2
.b64 $L__tmp98
.b64 $L__func_end0
.b8 6
.b8 0
.b8 144
.b8 180
.b8 230
.b8 200
.b8 171
.b8 2
.b64 0
.b64 0
.b64 $L__tmp69
.b64 $L__tmp99
.b8 6
.b8 0
.b8 144
.b8 185
.b8 226
.b8 200
.b8 171
.b8 2
.b64 $L__tmp99
.b64 $L__func_end0
.b8 6
.b8 0
.b8 144
.b8 181
.b8 230
.b8 200
.b8 171
.b8 2
.b64 0
.b64 0
.b64 $L__tmp104
.b64 $L__tmp108
.b8 6
.b8 0
.b8 144
.b8 184
.b8 230
.b8 200
.b8 171
.b8 2
.b64 $L__tmp108
.b64 $L__tmp112
.b8 7
.b8 0
.b8 144
.b8 184
.b8 228
.b8 196
.b8 145
.b8 215
.b8 4
.b64 $L__tmp112
.b64 $L__tmp119
.b8 6
.b8 0
.b8 144
.b8 178
.b8 232
.b8 200
.b8 171
.b8 2
.b64 $L__tmp119
.b64 $L__tmp120
.b8 6
.b8 0
.b8 144
.b8 184
.b8 232
.b8 200
.b8 171
.b8 2
.b64 $L__tmp120
.b64 $L__tmp124
.b8 7
.b8 0
.b8 144
.b8 178
.b8 230
.b8 196
.b8 145
.b8 215
.b8 4
.b64 $L__tmp124
.b64 $L__tmp125
.b8 6
.b8 0
.b8 144
.b8 176
.b8 234
.b8 200
.b8 171
.b8 2
.b64 $L__tmp125
.b64 $L__tmp130
.b8 7
.b8 0
.b8 144
.b8 178
.b8 230
.b8 196
.b8 145
.b8 215
.b8 4
.b64 $L__tmp130
.b64 $L__tmp131
.b8 6
.b8 0
.b8 144
.b8 177
.b8 234
.b8 200
.b8 171
.b8 2
.b64 $L__tmp131
.b64 $L__tmp142
.b8 7
.b8 0
.b8 144
.b8 180
.b8 230
.b8 196
.b8 145
.b8 215
.b8 4
.b64 $L__tmp142
.b64 $L__tmp143
.b8 6
.b8 0
.b8 144
.b8 183
.b8 234
.b8 200
.b8 171
.b8 2
.b64 $L__tmp143
.b64 $L__tmp155
.b8 7
.b8 0
.b8 144
.b8 184
.b8 228
.b8 196
.b8 145
.b8 215
.b8 4
.b64 $L__tmp155
.b64 $L__tmp157
.b8 7
.b8 0
.b8 144
.b8 184
.b8 230
.b8 196
.b8 145
.b8 215
.b8 4
.b64 $L__tmp157
.b64 $L__tmp158
.b8 6
.b8 0
.b8 144
.b8 178
.b8 236
.b8 200
.b8 171
.b8 2
.b64 $L__tmp158
.b64 $L__tmp160
.b8 7
.b8 0
.b8 144
.b8 184
.b8 230
.b8 196
.b8 145
.b8 215
.b8 4
.b64 $L__tmp160
.b64 $L__func_end0
.b8 6
.b8 0
.b8 144
.b8 179
.b8 236
.b8 200
.b8 171
.b8 2
.b64 0
.b64 0
.b64 $L__tmp105
.b64 $L__tmp109
.b8 6
.b8 0
.b8 144
.b8 185
.b8 230
.b8 200
.b8 171
.b8 2
.b64 $L__tmp109
.b64 $L__tmp112
.b8 7
.b8 0
.b8 144
.b8 185
.b8 228
.b8 196
.b8 145
.b8 215
.b8 4
.b64 $L__tmp112
.b64 $L__tmp121
.b8 6
.b8 0
.b8 144
.b8 179
.b8 232
.b8 200
.b8 171
.b8 2
.b64 $L__tmp121
.b64 $L__tmp123
.b8 7
.b8 0
.b8 144
.b8 179
.b8 230
.b8 196
.b8 145
.b8 215
.b8 4
.b64 $L__tmp123
.b64 $L__tmp126
.b8 6
.b8 0
.b8 144
.b8 185
.b8 232
.b8 200
.b8 171
.b8 2
.b64 $L__tmp126
.b64 $L__tmp128
.b8 7
.b8 0
.b8 144
.b8 179
.b8 230
.b8 196
.b8 145
.b8 215
.b8 4
.b64 $L__tmp128
.b64 $L__tmp132
.b8 6
.b8 0
.b8 144
.b8 178
.b8 234
.b8 200
.b8 171
.b8 2
.b64 $L__tmp132
.b64 $L__tmp142
.b8 7
.b8 0
.b8 144
.b8 181
.b8 230
.b8 196
.b8 145
.b8 215
.b8 4
.b64 $L__tmp142
.b64 $L__tmp144
.b8 6
.b8 0
.b8 144
.b8 184
.b8 234
.b8 200
.b8 171
.b8 2
.b64 $L__tmp144
.b64 $L__tmp154
.b8 7
.b8 0
.b8 144
.b8 185
.b8 228
.b8 196
.b8 145
.b8 215
.b8 4
.b64 $L__tmp154
.b64 $L__func_end0
.b8 6
.b8 0
.b8 144
.b8 177
.b8 236
.b8 200
.b8 171
.b8 2
.b64 0
.b64 0
.b64 $L__tmp106
.b64 $L__tmp110
.b8 6
.b8 0
.b8 144
.b8 176
.b8 232
.b8 200
.b8 171
.b8 2
.b64 $L__tmp110
.b64 $L__tmp112
.b8 7
.b8 0
.b8 144
.b8 176
.b8 230
.b8 196
.b8 145
.b8 215
.b8 4
.b64 $L__tmp112
.b64 $L__tmp129
.b8 6
.b8 0
.b8 144
.b8 180
.b8 232
.b8 200
.b8 171
.b8 2
.b64 $L__tmp129
.b64 $L__tmp133
.b8 6
.b8 0
.b8 144
.b8 179
.b8 234
.b8 200
.b8 171
.b8 2
.b64 $L__tmp133
.b64 $L__tmp136
.b8 7
.b8 0
.b8 144
.b8 182
.b8 230
.b8 196
.b8 145
.b8 215
.b8 4
.b64 $L__tmp136
.b64 $L__tmp140
.b8 6
.b8 0
.b8 144
.b8 181
.b8 234
.b8 200
.b8 171
.b8 2
.b64 $L__tmp140
.b64 $L__tmp142
.b8 7
.b8 0
.b8 144
.b8 182
.b8 230
.b8 196
.b8 145
.b8 215
.b8 4
.b64 $L__tmp142
.b64 $L__tmp145
.b8 6
.b8 0
.b8 144
.b8 185
.b8 234
.b8 200
.b8 171
.b8 2
.b64 $L__tmp145
.b64 $L__func_end0
.b8 7
.b8 0
.b8 144
.b8 176
.b8 230
.b8 196
.b8 145
.b8 215
.b8 4
.b64 0
.b64 0
.b64 $L__tmp107
.b64 $L__tmp111
.b8 6
.b8 0
.b8 144
.b8 177
.b8 232
.b8 200
.b8 171
.b8 2
.b64 $L__tmp111
.b64 $L__tmp112
.b8 7
.b8 0
.b8 144
.b8 177
.b8 230
.b8 196
.b8 145
.b8 215
.b8 4
.b64 $L__tmp112
.b64 $L__tmp130
.b8 6
.b8 0
.b8 144
.b8 181
.b8 232
.b8 200
.b8 171
.b8 2
.b64 $L__tmp130
.b64 $L__tmp134
.b8 6
.b8 0
.b8 144
.b8 180
.b8 234
.b8 200
.b8 171
.b8 2
.b64 $L__tmp134
.b64 $L__tmp137
.b8 7
.b8 0
.b8 144
.b8 183
.b8 230
.b8 196
.b8 145
.b8 215
.b8 4
.b64 $L__tmp137
.b64 $L__tmp141
.b8 6
.b8 0
.b8 144
.b8 182
.b8 234
.b8 200
.b8 171
.b8 2
.b64 $L__tmp141
.b64 $L__tmp142
.b8 7
.b8 0
.b8 144
.b8 183
.b8 230
.b8 196
.b8 145
.b8 215
.b8 4
.b64 $L__tmp142
.b64 $L__tmp146
.b8 6
.b8 0
.b8 144
.b8 176
.b8 236
.b8 200
.b8 171
.b8 2
.b64 $L__tmp146
.b64 $L__func_end0
.b8 7
.b8 0
.b8 144
.b8 177
.b8 230
.b8 196
.b8 145
.b8 215
.b8 4
.b64 0
.b64 0
.b64 $L__tmp180
.b64 $L__tmp181
.b8 5
.b8 0
.b8 144
.b8 177
.b8 228
.b8 149
.b8 1
.b64 $L__tmp181
.b64 $L__tmp182
.b8 6
.b8 0
.b8 144
.b8 179
.b8 228
.b8 200
.b8 171
.b8 2
.b64 $L__tmp182
.b64 $L__tmp199
.b8 5
.b8 0
.b8 144
.b8 178
.b8 228
.b8 149
.b8 1
.b64 $L__tmp199
.b64 $L__tmp200
.b8 5
.b8 0
.b8 144
.b8 179
.b8 228
.b8 149
.b8 1
.b64 $L__tmp200
.b64 $L__func_end1
.b8 6
.b8 0
.b8 144
.b8 179
.b8 228
.b8 200
.b8 171
.b8 2
.b64 0
.b64 0
	}
	.section	.debug_abbrev
	{
.b8 1
.b8 17
.b8 1
.b8 37
.b8 8
.b8 19
.b8 5
.b8 3
.b8 8
.b8 16
.b8 6
.b8 27
.b8 8
.b8 17
.b8 1
.b8 0
.b8 0
.b8 2
.b8 52
.b8 0
.b8 3
.b8 8
.b8 73
.b8 19
.b8 58
.b8 11
.b8 59
.b8 5
.b8 51
.b8 11
.b8 2
.b8 10
.b8 135,64
.b8 8
.b8 0
.b8 0
.b8 3
.b8 22
.b8 0
.b8 73
.b8 19
.b8 3
.b8 8
.b8 58
.b8 11
.b8 59
.b8 11
.b8 0
.b8 0
.b8 4
.b8 15
.b8 0
.b8 73
.b8 19
.b8 51
.b8 6
.b8 0
.b8 0
.b8 5
.b8 19
.b8 0
.b8 3
.b8 8
.b8 11
.b8 11
.b8 58
.b8 11
.b8 59
.b8 5
.b8 0
.b8 0
.b8 6
.b8 52
.b8 0
.b8 3
.b8 8
.b8 73
.b8 19
.b8 58
.b8 11
.b8 59
.b8 11
.b8 51
.b8 11
.b8 2
.b8 10
.b8 135,64
.b8 8
.b8 0
.b8 0
.b8 7
.b8 38
.b8 0
.b8 73
.b8 19
.b8 0
.b8 0
.b8 8
.b8 36
.b8 0
.b8 3
.b8 8
.b8 62
.b8 11
.b8 11
.b8 11
.b8 0
.b8 0
.b8 9
.b8 19
.b8 1
.b8 3
.b8 8
.b8 11
.b8 11
.b8 58
.b8 11
.b8 59
.b8 5
.b8 0
.b8 0
.b8 10
.b8 13
.b8 0
.b8 3
.b8 8
.b8 73
.b8 19
.b8 58
.b8 11
.b8 59
.b8 11
.b8 56
.b8 10
.b8 0
.b8 0
.b8 11
.b8 13
.b8 0
.b8 3
.b8 8
.b8 73
.b8 19
.b8 58
.b8 11
.b8 59
.b8 5
.b8 56
.b8 10
.b8 0
.b8 0
.b8 12
.b8 59
.b8 0
.b8 3
.b8 8
.b8 0
.b8 0
.b8 13
.b8 22
.b8 0
.b8 73
.b8 19
.b8 3
.b8 8
.b8 58
.b8 11
.b8 59
.b8 5
.b8 0
.b8 0
.b8 14
.b8 19
.b8 1
.b8 3
.b8 8
.b8 11
.b8 11
.b8 58
.b8 11
.b8 59
.b8 11
.b8 0
.b8 0
.b8 15
.b8 13
.b8 0
.b8 3
.b8 8
.b8 73
.b8 19
.b8 56
.b8 10
.b8 0
.b8 0
.b8 16
.b8 46
.b8 1
.b8 135,64
.b8 8
.b8 3
.b8 8
.b8 58
.b8 11
.b8 59
.b8 5
.b8 73
.b8 19
.b8 32
.b8 11
.b8 0
.b8 0
.b8 17
.b8 5
.b8 0
.b8 3
.b8 8
.b8 73
.b8 19
.b8 0
.b8 0
.b8 18
.b8 46
.b8 0
.b8 135,64
.b8 8
.b8 3
.b8 8
.b8 58
.b8 11
.b8 59
.b8 5
.b8 73
.b8 19
.b8 32
.b8 11
.b8 0
.b8 0
.b8 19
.b8 5
.b8 0
.b8 3
.b8 8
.b8 58
.b8 11
.b8 59
.b8 5
.b8 73
.b8 19
.b8 0
.b8 0
.b8 20
.b8 16
.b8 0
.b8 73
.b8 19
.b8 0
.b8 0
.b8 21
.b8 11
.b8 1
.b8 0
.b8 0
.b8 22
.b8 52
.b8 0
.b8 3
.b8 8
.b8 58
.b8 11
.b8 59
.b8 5
.b8 73
.b8 19
.b8 0
.b8 0
.b8 23
.b8 46
.b8 1
.b8 17
.b8 1
.b8 18
.b8 1
.b8 64
.b8 10
.b8 135,64
.b8 8
.b8 3
.b8 8
.b8 58
.b8 11
.b8 59
.b8 11
.b8 73
.b8 19
.b8 63
.b8 12
.b8 0
.b8 0
.b8 24
.b8 5
.b8 0
.b8 2
.b8 10
.b8 51
.b8 11
.b8 3
.b8 8
.b8 58
.b8 11
.b8 59
.b8 11
.b8 73
.b8 19
.b8 0
.b8 0
.b8 25
.b8 11
.b8 1
.b8 17
.b8 1
.b8 18
.b8 1
.b8 0
.b8 0
.b8 26
.b8 52
.b8 0
.b8 51
.b8 11
.b8 2
.b8 10
.b8 3
.b8 8
.b8 58
.b8 11
.b8 59
.b8 11
.b8 73
.b8 19
.b8 0
.b8 0
.b8 27
.b8 52
.b8 0
.b8 2
.b8 10
.b8 51
.b8 11
.b8 3
.b8 8
.b8 58
.b8 11
.b8 59
.b8 11
.b8 73
.b8 19
.b8 0
.b8 0
.b8 28
.b8 52
.b8 0
.b8 2
.b8 6
.b8 3
.b8 8
.b8 58
.b8 11
.b8 59
.b8 11
.b8 73
.b8 19
.b8 0
.b8 0
.b8 29
.b8 23
.b8 1
.b8 3
.b8 8
.b8 11
.b8 11
.b8 58
.b8 11
.b8 59
.b8 11
.b8 0
.b8 0
.b8 30
.b8 13
.b8 0
.b8 3
.b8 8
.b8 73
.b8 19
.b8 58
.b8 11
.b8 59
.b8 11
.b8 11
.b8 11
.b8 13
.b8 11
.b8 12
.b8 15
.b8 56
.b8 10
.b8 0
.b8 0
.b8 31
.b8 13
.b8 0
.b8 73
.b8 19
.b8 58
.b8 11
.b8 59
.b8 11
.b8 11
.b8 11
.b8 13
.b8 11
.b8 12
.b8 15
.b8 56
.b8 10
.b8 0
.b8 0
.b8 32
.b8 19
.b8 0
.b8 3
.b8 8
.b8 11
.b8 11
.b8 58
.b8 11
.b8 59
.b8 11
.b8 0
.b8 0
.b8 33
.b8 29
.b8 1
.b8 49
.b8 19
.b8 17
.b8 1
.b8 18
.b8 1
.b8 88
.b8 11
.b8 89
.b8 11
.b8 0
.b8 0
.b8 34
.b8 29
.b8 1
.b8 49
.b8 19
.b8 17
.b8 1
.b8 18
.b8 1
.b8 88
.b8 11
.b8 89
.b8 5
.b8 0
.b8 0
.b8 35
.b8 5
.b8 0
.b8 51
.b8 11
.b8 2
.b8 10
.b8 49
.b8 19
.b8 0
.b8 0
.b8 36
.b8 5
.b8 0
.b8 2
.b8 10
.b8 51
.b8 11
.b8 49
.b8 19
.b8 0
.b8 0
.b8 37
.b8 52
.b8 0
.b8 2
.b8 10
.b8 51
.b8 11
.b8 49
.b8 19
.b8 0
.b8 0
.b8 38
.b8 46
.b8 1
.b8 135,64
.b8 8
.b8 3
.b8 8
.b8 58
.b8 11
.b8 59
.b8 11
.b8 73
.b8 19
.b8 32
.b8 11
.b8 0
.b8 0
.b8 39
.b8 5
.b8 0
.b8 3
.b8 8
.b8 58
.b8 11
.b8 59
.b8 11
.b8 73
.b8 19
.b8 0
.b8 0
.b8 40
.b8 5
.b8 0
.b8 51
.b8 11
.b8 2
.b8 10
.b8 3
.b8 8
.b8 58
.b8 11
.b8 59
.b8 11
.b8 73
.b8 19
.b8 0
.b8 0
.b8 41
.b8 46
.b8 1
.b8 17
.b8 1
.b8 18
.b8 1
.b8 64
.b8 10
.b8 135,64
.b8 8
.b8 3
.b8 8
.b8 58
.b8 11
.b8 59
.b8 5
.b8 73
.b8 19
.b8 63
.b8 12
.b8 0
.b8 0
.b8 42
.b8 5
.b8 0
.b8 2
.b8 10
.b8 51
.b8 11
.b8 3
.b8 8
.b8 73
.b8 19
.b8 0
.b8 0
.b8 43
.b8 5
.b8 0
.b8 51
.b8 11
.b8 2
.b8 10
.b8 3
.b8 8
.b8 58
.b8 11
.b8 59
.b8 5
.b8 73
.b8 19
.b8 0
.b8 0
.b8 0
	}
	.section	.debug_info
	{
.b32 16706
.b8 2
.b8 0
.b32 .debug_abbrev
.b8 8
.b8 1
.b8 108,103,101,110,102,101,58,32,69,68,71,32,54,46,50
.b8 0
.b8 4
.b8 0
.b8 71,66,95,106,105,116,95,65,120,66,95,100,111,116,51,95,112,104,97,115,101,51,95,109,112
.b8 0
.b32 .debug_line
.b8 47,115,104,97,114,101,47,119,111,114,107,115,112,97,99,101,47,110,118,105,100,105,97,95,112,114,111,106,101,99,116,115,47,71,114,97,112,104,66,76
.b8 65,83,47,67,85,68,65,47,116,101,115,116
.b8 0
.b64 0
.b8 2
.b8 71,120,66,95,70,76,73,80,68,73,65,71,73,78,68,69,88,95,73,78,84,51,50
.b8 0
.b32 188
.b8 1
.b8 110
.b8 1
.b8 5
.b8 9
.b8 3
.b64 GxB_FLIPDIAGINDEX_INT32
.b8 71,120,66,95,70,76,73,80,68,73,65,71,73,78,68,69,88,95,73,78,84,51,50
.b8 0
.b8 3
.b32 212
.b8 71,114,66,95,73,110,100,101,120,85,110,97,114,121,79,112
.b8 0
.b8 2
.b8 71
.b8 4
.b32 221
.b32 12
.b8 5
.b8 71,66,95,73,110,100,101,120,85,110,97,114,121,79,112,95,111,112,97,113,117,101
.b8 0
.b8 0
.b8 1
.b8 144
.b8 1
.b8 2
.b8 71,120,66,95,70,76,73,80,68,73,65,71,73,78,68,69,88,95,73,78,84,54,52
.b8 0
.b32 188
.b8 1
.b8 110
.b8 1
.b8 5
.b8 9
.b8 3
.b64 GxB_FLIPDIAGINDEX_INT64
.b8 71,120,66,95,70,76,73,80,68,73,65,71,73,78,68,69,88,95,73,78,84,54,52
.b8 0
.b8 6
.b8 95,90,78,49,56,99,111,111,112,101,114,97,116,105,118,101,95,103,114,111,117,112,115,52,95,95,118,49,49,55,116,104,114,101,97,100,95,103,114,111
.b8 117,112,95,98,97,115,101,73,76,106,51,69,69,50,105,100,69
.b8 0
.b32 450
.b8 3
.b8 164
.b8 5
.b8 9
.b8 3
.b64 _ZN18cooperative_groups4__v117thread_group_baseILj3EE2idE
.b8 95,90,78,49,56,99,111,111,112,101,114,97,116,105,118,101,95,103,114,111,117,112,115,52,95,95,118,49,49,55,116,104,114,101,97,100,95,103,114,111
.b8 117,112,95,98,97,115,101,73,76,106,51,69,69,50,105,100,69
.b8 0
.b8 7
.b32 455
.b8 8
.b8 117,110,115,105,103,110,101,100,32,105,110,116
.b8 0
.b8 7
.b8 4
.b8 2
.b8 95,90,78,49,56,99,111,111,112,101,114,97,116,105,118,101,95,103,114,111,117,112,115,52,95,95,118,49,49,48,103,114,105,100,95,103,114,111,117,112
.b8 57,95,103,114,111,117,112,95,105,100,69
.b8 0
.b32 450
.b8 3
.b8 68
.b8 1
.b8 5
.b8 9
.b8 3
.b64 _ZN18cooperative_groups4__v110grid_group9_group_idE
.b8 95,90,78,49,56,99,111,111,112,101,114,97,116,105,118,101,95,103,114,111,117,112,115,52,95,95,118,49,49,48,103,114,105,100,95,103,114,111,117,112
.b8 57,95,103,114,111,117,112,95,105,100,69
.b8 0
.b8 6
.b8 95,90,78,49,56,99,111,111,112,101,114,97,116,105,118,101,95,103,114,111,117,112,115,52,95,95,118,49,49,55,116,104,114,101,97,100,95,103,114,111
.b8 117,112,95,98,97,115,101,73,76,106,52,69,69,50,105,100,69
.b8 0
.b32 450
.b8 3
.b8 164
.b8 5
.b8 9
.b8 3
.b64 _ZN18cooperative_groups4__v117thread_group_baseILj4EE2idE
.b8 95,90,78,49,56,99,111,111,112,101,114,97,116,105,118,101,95,103,114,111,117,112,115,52,95,95,118,49,49,55,116,104,114,101,97,100,95,103,114,111
.b8 117,112,95,98,97,115,101,73,76,106,52,69,69,50,105,100,69
.b8 0
.b8 2
.b8 95,90,78,49,56,99,111,111,112,101,114,97,116,105,118,101,95,103,114,111,117,112,115,52,95,95,118,49,49,50,116,104,114,101,97,100,95,98,108,111
.b8 99,107,57,95,103,114,111,117,112,95,105,100,69
.b8 0
.b32 450
.b8 3
.b8 125
.b8 2
.b8 5
.b8 9
.b8 3
.b64 _ZN18cooperative_groups4__v112thread_block9_group_idE
.b8 95,90,78,49,56,99,111,111,112,101,114,97,116,105,118,101,95,103,114,111,117,112,115,52,95,95,118,49,49,50,116,104,114,101,97,100,95,98,108,111
.b8 99,107,57,95,103,114,111,117,112,95,105,100,69
.b8 0
.b8 6
.b8 95,90,78,49,56,99,111,111,112,101,114,97,116,105,118,101,95,103,114,111,117,112,115,52,95,95,118,49,49,55,116,104,114,101,97,100,95,103,114,111
.b8 117,112,95,98,97,115,101,73,76,106,49,69,69,50,105,100,69
.b8 0
.b32 450
.b8 3
.b8 164
.b8 5
.b8 9
.b8 3
.b64 _ZN18cooperative_groups4__v117thread_group_baseILj1EE2idE
.b8 95,90,78,49,56,99,111,111,112,101,114,97,116,105,118,101,95,103,114,111,117,112,115,52,95,95,118,49,49,55,116,104,114,101,97,100,95,103,114,111
.b8 117,112,95,98,97,115,101,73,76,106,49,69,69,50,105,100,69
.b8 0
.b8 2
.b8 95,90,78,49,56,99,111,111,112,101,114,97,116,105,118,101,95,103,114,111,117,112,115,52,95,95,118,49,49,53,99,111,97,108,101,115,99,101,100,95
.b8 103,114,111,117,112,57,95,103,114,111,117,112,95,105,100,69
.b8 0
.b32 450
.b8 3
.b8 25
.b8 3
.b8 5
.b8 9
.b8 3
.b64 _ZN18cooperative_groups4__v115coalesced_group9_group_idE
.b8 95,90,78,49,56,99,111,111,112,101,114,97,116,105,118,101,95,103,114,111,117,112,115,52,95,95,118,49,49,53,99,111,97,108,101,115,99,101,100,95
.b8 103,114,111,117,112,57,95,103,114,111,117,112,95,105,100,69
.b8 0
.b8 2
.b8 95,90,78,49,56,99,111,111,112,101,114,97,116,105,118,101,95,103,114,111,117,112,115,52,95,95,118,49,50,51,95,95,115,116,97,116,105,99,95,115
.b8 105,122,101,95,116,105,108,101,95,98,97,115,101,73,76,106,49,69,69,49,48,110,117,109,84,104,114,101,97,100,115,69
.b8 0
.b32 450
.b8 3
.b8 208
.b8 3
.b8 5
.b8 9
.b8 3
.b64 _ZN18cooperative_groups4__v123__static_size_tile_baseILj1EE10numThreadsE
.b8 95,90,78,49,56,99,111,111,112,101,114,97,116,105,118,101,95,103,114,111,117,112,115,52,95,95,118,49,50,51,95,95,115,116,97,116,105,99,95,115
.b8 105,122,101,95,116,105,108,101,95,98,97,115,101,73,76,106,49,69,69,49,48,110,117,109,84,104,114,101,97,100,115,69
.b8 0
.b8 2
.b8 95,90,78,49,56,99,111,111,112,101,114,97,116,105,118,101,95,103,114,111,117,112,115,52,95,95,118,49,51,54,95,95,115,116,97,116,105,99,95,115
.b8 105,122,101,95,116,104,114,101,97,100,95,98,108,111,99,107,95,116,105,108,101,95,98,97,115,101,73,76,106,49,69,69,56,102,117,108,108,77,97,115
.b8 107,69
.b8 0
.b32 450
.b8 3
.b8 240
.b8 3
.b8 5
.b8 9
.b8 3
.b64 _ZN18cooperative_groups4__v136__static_size_thread_block_tile_baseILj1EE8fullMaskE
.b8 95,90,78,49,56,99,111,111,112,101,114,97,116,105,118,101,95,103,114,111,117,112,115,52,95,95,118,49,51,54,95,95,115,116,97,116,105,99,95,115
.b8 105,122,101,95,116,104,114,101,97,100,95,98,108,111,99,107,95,116,105,108,101,95,98,97,115,101,73,76,106,49,69,69,56,102,117,108,108,77,97,115
.b8 107,69
.b8 0
.b8 2
.b8 95,90,78,49,56,99,111,111,112,101,114,97,116,105,118,101,95,103,114,111,117,112,115,52,95,95,118,49,51,54,95,95,115,116,97,116,105,99,95,115
.b8 105,122,101,95,116,104,114,101,97,100,95,98,108,111,99,107,95,116,105,108,101,95,98,97,115,101,73,76,106,49,69,69,57,95,103,114,111,117,112,95
.b8 105,100,69
.b8 0
.b32 450
.b8 3
.b8 255
.b8 3
.b8 5
.b8 9
.b8 3
.b64 _ZN18cooperative_groups4__v136__static_size_thread_block_tile_baseILj1EE9_group_idE
.b8 95,90,78,49,56,99,111,111,112,101,114,97,116,105,118,101,95,103,114,111,117,112,115,52,95,95,118,49,51,54,95,95,115,116,97,116,105,99,95,115
.b8 105,122,101,95,116,104,114,101,97,100,95,98,108,111,99,107,95,116,105,108,101,95,98,97,115,101,73,76,106,49,69,69,57,95,103,114,111,117,112,95
.b8 105,100,69
.b8 0
.b8 2
.b8 95,90,78,49,56,99,111,111,112,101,114,97,116,105,118,101,95,103,114,111,117,112,115,52,95,95,118,49,51,49,95,95,115,105,110,103,108,101,95,119
.b8 97,114,112,95,116,104,114,101,97,100,95,98,108,111,99,107,95,116,105,108,101,73,76,106,49,69,118,69,49,48,110,117,109,84,104,114,101,97,100,115
.b8 69
.b8 0
.b32 450
.b8 3
.b8 135
.b8 4
.b8 5
.b8 9
.b8 3
.b64 _ZN18cooperative_groups4__v131__single_warp_thread_block_tileILj1EvE10numThreadsE
.b8 95,90,78,49,56,99,111,111,112,101,114,97,116,105,118,101,95,103,114,111,117,112,115,52,95,95,118,49,51,49,95,95,115,105,110,103,108,101,95,119
.b8 97,114,112,95,116,104,114,101,97,100,95,98,108,111,99,107,95,116,105,108,101,73,76,106,49,69,118,69,49,48,110,117,109,84,104,114,101,97,100,115
.b8 69
.b8 0
.b8 2
.b8 95,90,78,49,56,99,111,111,112,101,114,97,116,105,118,101,95,103,114,111,117,112,115,52,95,95,118,49,50,51,95,95,115,116,97,116,105,99,95,115
.b8 105,122,101,95,116,105,108,101,95,98,97,115,101,73,76,106,51,50,69,69,49,48,110,117,109,84,104,114,101,97,100,115,69
.b8 0
.b32 450
.b8 3
.b8 208
.b8 3
.b8 5
.b8 9
.b8 3
.b64 _ZN18cooperative_groups4__v123__static_size_tile_baseILj32EE10numThreadsE
.b8 95,90,78,49,56,99,111,111,112,101,114,97,116,105,118,101,95,103,114,111,117,112,115,52,95,95,118,49,50,51,95,95,115,116,97,116,105,99,95,115
.b8 105,122,101,95,116,105,108,101,95,98,97,115,101,73,76,106,51,50,69,69,49,48,110,117,109,84,104,114,101,97,100,115,69
.b8 0
.b8 2
.b8 95,90,78,49,56,99,111,111,112,101,114,97,116,105,118,101,95,103,114,111,117,112,115,52,95,95,118,49,51,54,95,95,115,116,97,116,105,99,95,115
.b8 105,122,101,95,116,104,114,101,97,100,95,98,108,111,99,107,95,116,105,108,101,95,98,97,115,101,73,76,106,51,50,69,69,56,102,117,108,108,77,97
.b8 115,107,69
.b8 0
.b32 450
.b8 3
.b8 240
.b8 3
.b8 5
.b8 9
.b8 3
.b64 _ZN18cooperative_groups4__v136__static_size_thread_block_tile_baseILj32EE8fullMaskE
.b8 95,90,78,49,56,99,111,111,112,101,114,97,116,105,118,101,95,103,114,111,117,112,115,52,95,95,118,49,51,54,95,95,115,116,97,116,105,99,95,115
.b8 105,122,101,95,116,104,114,101,97,100,95,98,108,111,99,107,95,116,105,108,101,95,98,97,115,101,73,76,106,51,50,69,69,56,102,117,108,108,77,97
.b8 115,107,69
.b8 0
.b8 2
.b8 95,90,78,49,56,99,111,111,112,101,114,97,116,105,118,101,95,103,114,111,117,112,115,52,95,95,118,49,51,54,95,95,115,116,97,116,105,99,95,115
.b8 105,122,101,95,116,104,114,101,97,100,95,98,108,111,99,107,95,116,105,108,101,95,98,97,115,101,73,76,106,51,50,69,69,57,95,103,114,111,117,112
.b8 95,105,100,69
.b8 0
.b32 450
.b8 3
.b8 255
.b8 3
.b8 5
.b8 9
.b8 3
.b64 _ZN18cooperative_groups4__v136__static_size_thread_block_tile_baseILj32EE9_group_idE
.b8 95,90,78,49,56,99,111,111,112,101,114,97,116,105,118,101,95,103,114,111,117,112,115,52,95,95,118,49,51,54,95,95,115,116,97,116,105,99,95,115
.b8 105,122,101,95,116,104,114,101,97,100,95,98,108,111,99,107,95,116,105,108,101,95,98,97,115,101,73,76,106,51,50,69,69,57,95,103,114,111,117,112
.b8 95,105,100,69
.b8 0
.b8 2
.b8 95,90,78,49,56,99,111,111,112,101,114,97,116,105,118,101,95,103,114,111,117,112,115,52,95,95,118,49,51,49,95,95,115,105,110,103,108,101,95,119
.b8 97,114,112,95,116,104,114,101,97,100,95,98,108,111,99,107,95,116,105,108,101,73,76,106,51,50,69,118,69,49,48,110,117,109,84,104,114,101,97,100
.b8 115,69
.b8 0
.b32 450
.b8 3
.b8 135
.b8 4
.b8 5
.b8 9
.b8 3
.b64 _ZN18cooperative_groups4__v131__single_warp_thread_block_tileILj32EvE10numThreadsE
.b8 95,90,78,49,56,99,111,111,112,101,114,97,116,105,118,101,95,103,114,111,117,112,115,52,95,95,118,49,51,49,95,95,115,105,110,103,108,101,95,119
.b8 97,114,112,95,116,104,114,101,97,100,95,98,108,111,99,107,95,116,105,108,101,73,76,106,51,50,69,118,69,49,48,110,117,109,84,104,114,101,97,100
.b8 115,69
.b8 0
.b8 6
.b8 95,90,78,49,56,99,111,111,112,101,114,97,116,105,118,101,95,103,114,111,117,112,115,52,95,95,118,49,55,100,101,116,97,105,108,115,57,116,101,109
.b8 112,108,97,116,101,115,49,55,105,110,116,101,103,114,97,108,95,99,111,110,115,116,97,110,116,73,98,76,98,48,69,69,53,118,97,108,117,101,69
.b8 0
.b32 2748
.b8 4
.b8 196
.b8 5
.b8 9
.b8 3
.b64 _ZN18cooperative_groups4__v17details9templates17integral_constantIbLb0EE5valueE
.b8 95,90,78,49,56,99,111,111,112,101,114,97,116,105,118,101,95,103,114,111,117,112,115,52,95,95,118,49,55,100,101,116,97,105,108,115,57,116,101,109
.b8 112,108,97,116,101,115,49,55,105,110,116,101,103,114,97,108,95,99,111,110,115,116,97,110,116,73,98,76,98,48,69,69,53,118,97,108,117,101,69
.b8 0
.b8 7
.b32 2753
.b8 8
.b8 98,111,111,108
.b8 0
.b8 2
.b8 1
.b8 6
.b8 95,90,78,49,56,99,111,111,112,101,114,97,116,105,118,101,95,103,114,111,117,112,115,52,95,95,118,49,55,100,101,116,97,105,108,115,57,116,101,109
.b8 112,108,97,116,101,115,49,55,105,110,116,101,103,114,97,108,95,99,111,110,115,116,97,110,116,73,98,76,98,49,69,69,53,118,97,108,117,101,69
.b8 0
.b32 2748
.b8 4
.b8 196
.b8 5
.b8 9
.b8 3
.b64 _ZN18cooperative_groups4__v17details9templates17integral_constantIbLb1EE5valueE
.b8 95,90,78,49,56,99,111,111,112,101,114,97,116,105,118,101,95,103,114,111,117,112,115,52,95,95,118,49,55,100,101,116,97,105,108,115,57,116,101,109
.b8 112,108,97,116,101,115,49,55,105,110,116,101,103,114,97,108,95,99,111,110,115,116,97,110,116,73,98,76,98,49,69,69,53,118,97,108,117,101,69
.b8 0
.b8 6
.b8 95,90,78,49,56,99,111,111,112,101,114,97,116,105,118,101,95,103,114,111,117,112,115,52,95,95,118,49,55,100,101,116,97,105,108,115,52,116,105,108
.b8 101,49,51,95,116,105,108,101,95,104,101,108,112,101,114,115,73,76,106,49,69,76,106,52,50,57,52,57,54,55,50,57,53,69,76,106,51,49,69,76
.b8 106,53,69,69,57,116,105,108,101,67,111,117,110,116,69
.b8 0
.b32 450
.b8 5
.b8 157
.b8 5
.b8 9
.b8 3
.b64 _ZN18cooperative_groups4__v17details4tile13_tile_helpersILj1ELj4294967295ELj31ELj5EE9tileCountE
.b8 95,90,78,49,56,99,111,111,112,101,114,97,116,105,118,101,95,103,114,111,117,112,115,52,95,95,118,49,55,100,101,116,97,105,108,115,52,116,105,108
.b8 101,49,51,95,116,105,108,101,95,104,101,108,112,101,114,115,73,76,106,49,69,76,106,52,50,57,52,57,54,55,50,57,53,69,76,106,51,49,69,76
.b8 106,53,69,69,57,116,105,108,101,67,111,117,110,116,69
.b8 0
.b8 6
.b8 95,90,78,49,56,99,111,111,112,101,114,97,116,105,118,101,95,103,114,111,117,112,115,52,95,95,118,49,55,100,101,116,97,105,108,115,52,116,105,108
.b8 101,49,51,95,116,105,108,101,95,104,101,108,112,101,114,115,73,76,106,49,69,76,106,52,50,57,52,57,54,55,50,57,53,69,76,106,51,49,69,76
.b8 106,53,69,69,56,116,105,108,101,77,97,115,107,69
.b8 0
.b32 450
.b8 5
.b8 158
.b8 5
.b8 9
.b8 3
.b64 _ZN18cooperative_groups4__v17details4tile13_tile_helpersILj1ELj4294967295ELj31ELj5EE8tileMaskE
.b8 95,90,78,49,56,99,111,111,112,101,114,97,116,105,118,101,95,103,114,111,117,112,115,52,95,95,118,49,55,100,101,116,97,105,108,115,52,116,105,108
.b8 101,49,51,95,116,105,108,101,95,104,101,108,112,101,114,115,73,76,106,49,69,76,106,52,50,57,52,57,54,55,50,57,53,69,76,106,51,49,69,76
.b8 106,53,69,69,56,116,105,108,101,77,97,115,107,69
.b8 0
.b8 6
.b8 95,90,78,49,56,99,111,111,112,101,114,97,116,105,118,101,95,103,114,111,117,112,115,52,95,95,118,49,55,100,101,116,97,105,108,115,52,116,105,108
.b8 101,49,51,95,116,105,108,101,95,104,101,108,112,101,114,115,73,76,106,49,69,76,106,52,50,57,52,57,54,55,50,57,53,69,76,106,51,49,69,76
.b8 106,53,69,69,56,108,97,110,101,77,97,115,107,69
.b8 0
.b32 450
.b8 5
.b8 159
.b8 5
.b8 9
.b8 3
.b64 _ZN18cooperative_groups4__v17details4tile13_tile_helpersILj1ELj4294967295ELj31ELj5EE8laneMaskE
.b8 95,90,78,49,56,99,111,111,112,101,114,97,116,105,118,101,95,103,114,111,117,112,115,52,95,95,118,49,55,100,101,116,97,105,108,115,52,116,105,108
.b8 101,49,51,95,116,105,108,101,95,104,101,108,112,101,114,115,73,76,106,49,69,76,106,52,50,57,52,57,54,55,50,57,53,69,76,106,51,49,69,76
.b8 106,53,69,69,56,108,97,110,101,77,97,115,107,69
.b8 0
.b8 6
.b8 95,90,78,49,56,99,111,111,112,101,114,97,116,105,118,101,95,103,114,111,117,112,115,52,95,95,118,49,55,100,101,116,97,105,108,115,52,116,105,108
.b8 101,49,51,95,116,105,108,101,95,104,101,108,112,101,114,115,73,76,106,49,69,76,106,52,50,57,52,57,54,55,50,57,53,69,76,106,51,49,69,76
.b8 106,53,69,69,49,48,115,104,105,102,116,67,111,117,110,116,69
.b8 0
.b32 450
.b8 5
.b8 160
.b8 5
.b8 9
.b8 3
.b64 _ZN18cooperative_groups4__v17details4tile13_tile_helpersILj1ELj4294967295ELj31ELj5EE10shiftCountE
.b8 95,90,78,49,56,99,111,111,112,101,114,97,116,105,118,101,95,103,114,111,117,112,115,52,95,95,118,49,55,100,101,116,97,105,108,115,52,116,105,108
.b8 101,49,51,95,116,105,108,101,95,104,101,108,112,101,114,115,73,76,106,49,69,76,106,52,50,57,52,57,54,55,50,57,53,69,76,106,51,49,69,76
.b8 106,53,69,69,49,48,115,104,105,102,116,67,111,117,110,116,69
.b8 0
.b8 6
.b8 95,90,78,49,56,99,111,111,112,101,114,97,116,105,118,101,95,103,114,111,117,112,115,52,95,95,118,49,55,100,101,116,97,105,108,115,52,116,105,108
.b8 101,49,51,95,116,105,108,101,95,104,101,108,112,101,114,115,73,76,106,50,69,76,106,54,53,53,51,53,69,76,106,49,53,69,76,106,52,69,69,57
.b8 116,105,108,101,67,111,117,110,116,69
.b8 0
.b32 450
.b8 5
.b8 157
.b8 5
.b8 9
.b8 3
.b64 _ZN18cooperative_groups4__v17details4tile13_tile_helpersILj2ELj65535ELj15ELj4EE9tileCountE
.b8 95,90,78,49,56,99,111,111,112,101,114,97,116,105,118,101,95,103,114,111,117,112,115,52,95,95,118,49,55,100,101,116,97,105,108,115,52,116,105,108
.b8 101,49,51,95,116,105,108,101,95,104,101,108,112,101,114,115,73,76,106,50,69,76,106,54,53,53,51,53,69,76,106,49,53,69,76,106,52,69,69,57
.b8 116,105,108,101,67,111,117,110,116,69
.b8 0
.b8 6
.b8 95,90,78,49,56,99,111,111,112,101,114,97,116,105,118,101,95,103,114,111,117,112,115,52,95,95,118,49,55,100,101,116,97,105,108,115,52,116,105,108
.b8 101,49,51,95,116,105,108,101,95,104,101,108,112,101,114,115,73,76,106,50,69,76,106,54,53,53,51,53,69,76,106,49,53,69,76,106,52,69,69,56
.b8 116,105,108,101,77,97,115,107,69
.b8 0
.b32 450
.b8 5
.b8 158
.b8 5
.b8 9
.b8 3
.b64 _ZN18cooperative_groups4__v17details4tile13_tile_helpersILj2ELj65535ELj15ELj4EE8tileMaskE
.b8 95,90,78,49,56,99,111,111,112,101,114,97,116,105,118,101,95,103,114,111,117,112,115,52,95,95,118,49,55,100,101,116,97,105,108,115,52,116,105,108
.b8 101,49,51,95,116,105,108,101,95,104,101,108,112,101,114,115,73,76,106,50,69,76,106,54,53,53,51,53,69,76,106,49,53,69,76,106,52,69,69,56
.b8 116,105,108,101,77,97,115,107,69
.b8 0
.b8 6
.b8 95,90,78,49,56,99,111,111,112,101,114,97,116,105,118,101,95,103,114,111,117,112,115,52,95,95,118,49,55,100,101,116,97,105,108,115,52,116,105,108
.b8 101,49,51,95,116,105,108,101,95,104,101,108,112,101,114,115,73,76,106,50,69,76,106,54,53,53,51,53,69,76,106,49,53,69,76,106,52,69,69,56
.b8 108,97,110,101,77,97,115,107,69
.b8 0
.b32 450
.b8 5
.b8 159
.b8 5
.b8 9
.b8 3
.b64 _ZN18cooperative_groups4__v17details4tile13_tile_helpersILj2ELj65535ELj15ELj4EE8laneMaskE
.b8 95,90,78,49,56,99,111,111,112,101,114,97,116,105,118,101,95,103,114,111,117,112,115,52,95,95,118,49,55,100,101,116,97,105,108,115,52,116,105,108
.b8 101,49,51,95,116,105,108,101,95,104,101,108,112,101,114,115,73,76,106,50,69,76,106,54,53,53,51,53,69,76,106,49,53,69,76,106,52,69,69,56
.b8 108,97,110,101,77,97,115,107,69
.b8 0
.b8 6
.b8 95,90,78,49,56,99,111,111,112,101,114,97,116,105,118,101,95,103,114,111,117,112,115,52,95,95,118,49,55,100,101,116,97,105,108,115,52,116,105,108
.b8 101,49,51,95,116,105,108,101,95,104,101,108,112,101,114,115,73,76,106,50,69,76,106,54,53,53,51,53,69,76,106,49,53,69,76,106,52,69,69,49
.b8 48,115,104,105,102,116,67,111,117,110,116,69
.b8 0
.b32 450
.b8 5
.b8 160
.b8 5
.b8 9
.b8 3
.b64 _ZN18cooperative_groups4__v17details4tile13_tile_helpersILj2ELj65535ELj15ELj4EE10shiftCountE
.b8 95,90,78,49,56,99,111,111,112,101,114,97,116,105,118,101,95,103,114,111,117,112,115,52,95,95,118,49,55,100,101,116,97,105,108,115,52,116,105,108
.b8 101,49,51,95,116,105,108,101,95,104,101,108,112,101,114,115,73,76,106,50,69,76,106,54,53,53,51,53,69,76,106,49,53,69,76,106,52,69,69,49
.b8 48,115,104,105,102,116,67,111,117,110,116,69
.b8 0
.b8 6
.b8 95,90,78,49,56,99,111,111,112,101,114,97,116,105,118,101,95,103,114,111,117,112,115,52,95,95,118,49,55,100,101,116,97,105,108,115,52,116,105,108
.b8 101,49,51,95,116,105,108,101,95,104,101,108,112,101,114,115,73,76,106,52,69,76,106,50,53,53,69,76,106,55,69,76,106,51,69,69,57,116,105,108
.b8 101,67,111,117,110,116,69
.b8 0
.b32 450
.b8 5
.b8 157
.b8 5
.b8 9
.b8 3
.b64 _ZN18cooperative_groups4__v17details4tile13_tile_helpersILj4ELj255ELj7ELj3EE9tileCountE
.b8 95,90,78,49,56,99,111,111,112,101,114,97,116,105,118,101,95,103,114,111,117,112,115,52,95,95,118,49,55,100,101,116,97,105,108,115,52,116,105,108
.b8 101,49,51,95,116,105,108,101,95,104,101,108,112,101,114,115,73,76,106,52,69,76,106,50,53,53,69,76,106,55,69,76,106,51,69,69,57,116,105,108
.b8 101,67,111,117,110,116,69
.b8 0
.b8 6
.b8 95,90,78,49,56,99,111,111,112,101,114,97,116,105,118,101,95,103,114,111,117,112,115,52,95,95,118,49,55,100,101,116,97,105,108,115,52,116,105,108
.b8 101,49,51,95,116,105,108,101,95,104,101,108,112,101,114,115,73,76,106,52,69,76,106,50,53,53,69,76,106,55,69,76,106,51,69,69,56,116,105,108
.b8 101,77,97,115,107,69
.b8 0
.b32 450
.b8 5
.b8 158
.b8 5
.b8 9
.b8 3
.b64 _ZN18cooperative_groups4__v17details4tile13_tile_helpersILj4ELj255ELj7ELj3EE8tileMaskE
.b8 95,90,78,49,56,99,111,111,112,101,114,97,116,105,118,101,95,103,114,111,117,112,115,52,95,95,118,49,55,100,101,116,97,105,108,115,52,116,105,108
.b8 101,49,51,95,116,105,108,101,95,104,101,108,112,101,114,115,73,76,106,52,69,76,106,50,53,53,69,76,106,55,69,76,106,51,69,69,56,116,105,108
.b8 101,77,97,115,107,69
.b8 0
.b8 6
.b8 95,90,78,49,56,99,111,111,112,101,114,97,116,105,118,101,95,103,114,111,117,112,115,52,95,95,118,49,55,100,101,116,97,105,108,115,52,116,105,108
.b8 101,49,51,95,116,105,108,101,95,104,101,108,112,101,114,115,73,76,106,52,69,76,106,50,53,53,69,76,106,55,69,76,106,51,69,69,56,108,97,110
.b8 101,77,97,115,107,69
.b8 0
.b32 450
.b8 5
.b8 159
.b8 5
.b8 9
.b8 3
.b64 _ZN18cooperative_groups4__v17details4tile13_tile_helpersILj4ELj255ELj7ELj3EE8laneMaskE
.b8 95,90,78,49,56,99,111,111,112,101,114,97,116,105,118,101,95,103,114,111,117,112,115,52,95,95,118,49,55,100,101,116,97,105,108,115,52,116,105,108
.b8 101,49,51,95,116,105,108,101,95,104,101,108,112,101,114,115,73,76,106,52,69,76,106,50,53,53,69,76,106,55,69,76,106,51,69,69,56,108,97,110
.b8 101,77,97,115,107,69
.b8 0
.b8 6
.b8 95,90,78,49,56,99,111,111,112,101,114,97,116,105,118,101,95,103,114,111,117,112,115,52,95,95,118,49,55,100,101,116,97,105,108,115,52,116,105,108
.b8 101,49,51,95,116,105,108,101,95,104,101,108,112,101,114,115,73,76,106,52,69,76,106,50,53,53,69,76,106,55,69,76,106,51,69,69,49,48,115,104
.b8 105,102,116,67,111,117,110,116,69
.b8 0
.b32 450
.b8 5
.b8 160
.b8 5
.b8 9
.b8 3
.b64 _ZN18cooperative_groups4__v17details4tile13_tile_helpersILj4ELj255ELj7ELj3EE10shiftCountE
.b8 95,90,78,49,56,99,111,111,112,101,114,97,116,105,118,101,95,103,114,111,117,112,115,52,95,95,118,49,55,100,101,116,97,105,108,115,52,116,105,108
.b8 101,49,51,95,116,105,108,101,95,104,101,108,112,101,114,115,73,76,106,52,69,76,106,50,53,53,69,76,106,55,69,76,106,51,69,69,49,48,115,104
.b8 105,102,116,67,111,117,110,116,69
.b8 0
.b8 6
.b8 95,90,78,49,56,99,111,111,112,101,114,97,116,105,118,101,95,103,114,111,117,112,115,52,95,95,118,49,55,100,101,116,97,105,108,115,52,116,105,108
.b8 101,49,51,95,116,105,108,101,95,104,101,108,112,101,114,115,73,76,106,56,69,76,106,49,53,69,76,106,51,69,76,106,50,69,69,57,116,105,108,101
.b8 67,111,117,110,116,69
.b8 0
.b32 450
.b8 5
.b8 157
.b8 5
.b8 9
.b8 3
.b64 _ZN18cooperative_groups4__v17details4tile13_tile_helpersILj8ELj15ELj3ELj2EE9tileCountE
.b8 95,90,78,49,56,99,111,111,112,101,114,97,116,105,118,101,95,103,114,111,117,112,115,52,95,95,118,49,55,100,101,116,97,105,108,115,52,116,105,108
.b8 101,49,51,95,116,105,108,101,95,104,101,108,112,101,114,115,73,76,106,56,69,76,106,49,53,69,76,106,51,69,76,106,50,69,69,57,116,105,108,101
.b8 67,111,117,110,116,69
.b8 0
.b8 6
.b8 95,90,78,49,56,99,111,111,112,101,114,97,116,105,118,101,95,103,114,111,117,112,115,52,95,95,118,49,55,100,101,116,97,105,108,115,52,116,105,108
.b8 101,49,51,95,116,105,108,101,95,104,101,108,112,101,114,115,73,76,106,56,69,76,106,49,53,69,76,106,51,69,76,106,50,69,69,56,116,105,108,101
.b8 77,97,115,107,69
.b8 0
.b32 450
.b8 5
.b8 158
.b8 5
.b8 9
.b8 3
.b64 _ZN18cooperative_groups4__v17details4tile13_tile_helpersILj8ELj15ELj3ELj2EE8tileMaskE
.b8 95,90,78,49,56,99,111,111,112,101,114,97,116,105,118,101,95,103,114,111,117,112,115,52,95,95,118,49,55,100,101,116,97,105,108,115,52,116,105,108
.b8 101,49,51,95,116,105,108,101,95,104,101,108,112,101,114,115,73,76,106,56,69,76,106,49,53,69,76,106,51,69,76,106,50,69,69,56,116,105,108,101
.b8 77,97,115,107,69
.b8 0
.b8 6
.b8 95,90,78,49,56,99,111,111,112,101,114,97,116,105,118,101,95,103,114,111,117,112,115,52,95,95,118,49,55,100,101,116,97,105,108,115,52,116,105,108
.b8 101,49,51,95,116,105,108,101,95,104,101,108,112,101,114,115,73,76,106,56,69,76,106,49,53,69,76,106,51,69,76,106,50,69,69,56,108,97,110,101
.b8 77,97,115,107,69
.b8 0
.b32 450
.b8 5
.b8 159
.b8 5
.b8 9
.b8 3
.b64 _ZN18cooperative_groups4__v17details4tile13_tile_helpersILj8ELj15ELj3ELj2EE8laneMaskE
.b8 95,90,78,49,56,99,111,111,112,101,114,97,116,105,118,101,95,103,114,111,117,112,115,52,95,95,118,49,55,100,101,116,97,105,108,115,52,116,105,108
.b8 101,49,51,95,116,105,108,101,95,104,101,108,112,101,114,115,73,76,106,56,69,76,106,49,53,69,76,106,51,69,76,106,50,69,69,56,108,97,110,101
.b8 77,97,115,107,69
.b8 0
.b8 6
.b8 95,90,78,49,56,99,111,111,112,101,114,97,116,105,118,101,95,103,114,111,117,112,115,52,95,95,118,49,55,100,101,116,97,105,108,115,52,116,105,108
.b8 101,49,51,95,116,105,108,101,95,104,101,108,112,101,114,115,73,76,106,56,69,76,106,49,53,69,76,106,51,69,76,106,50,69,69,49,48,115,104,105
.b8 102,116,67,111,117,110,116,69
.b8 0
.b32 450
.b8 5
.b8 160
.b8 5
.b8 9
.b8 3
.b64 _ZN18cooperative_groups4__v17details4tile13_tile_helpersILj8ELj15ELj3ELj2EE10shiftCountE
.b8 95,90,78,49,56,99,111,111,112,101,114,97,116,105,118,101,95,103,114,111,117,112,115,52,95,95,118,49,55,100,101,116,97,105,108,115,52,116,105,108
.b8 101,49,51,95,116,105,108,101,95,104,101,108,112,101,114,115,73,76,106,56,69,76,106,49,53,69,76,106,51,69,76,106,50,69,69,49,48,115,104,105
.b8 102,116,67,111,117,110,116,69
.b8 0
.b8 6
.b8 95,90,78,49,56,99,111,111,112,101,114,97,116,105,118,101,95,103,114,111,117,112,115,52,95,95,118,49,55,100,101,116,97,105,108,115,52,116,105,108
.b8 101,49,51,95,116,105,108,101,95,104,101,108,112,101,114,115,73,76,106,49,54,69,76,106,51,69,76,106,49,69,76,106,49,69,69,57,116,105,108,101
.b8 67,111,117,110,116,69
.b8 0
.b32 450
.b8 5
.b8 157
.b8 5
.b8 9
.b8 3
.b64 _ZN18cooperative_groups4__v17details4tile13_tile_helpersILj16ELj3ELj1ELj1EE9tileCountE
.b8 95,90,78,49,56,99,111,111,112,101,114,97,116,105,118,101,95,103,114,111,117,112,115,52,95,95,118,49,55,100,101,116,97,105,108,115,52,116,105,108
.b8 101,49,51,95,116,105,108,101,95,104,101,108,112,101,114,115,73,76,106,49,54,69,76,106,51,69,76,106,49,69,76,106,49,69,69,57,116,105,108,101
.b8 67,111,117,110,116,69
.b8 0
.b8 6
.b8 95,90,78,49,56,99,111,111,112,101,114,97,116,105,118,101,95,103,114,111,117,112,115,52,95,95,118,49,55,100,101,116,97,105,108,115,52,116,105,108
.b8 101,49,51,95,116,105,108,101,95,104,101,108,112,101,114,115,73,76,106,49,54,69,76,106,51,69,76,106,49,69,76,106,49,69,69,56,116,105,108,101
.b8 77,97,115,107,69
.b8 0
.b32 450
.b8 5
.b8 158
.b8 5
.b8 9
.b8 3
.b64 _ZN18cooperative_groups4__v17details4tile13_tile_helpersILj16ELj3ELj1ELj1EE8tileMaskE
.b8 95,90,78,49,56,99,111,111,112,101,114,97,116,105,118,101,95,103,114,111,117,112,115,52,95,95,118,49,55,100,101,116,97,105,108,115,52,116,105,108
.b8 101,49,51,95,116,105,108,101,95,104,101,108,112,101,114,115,73,76,106,49,54,69,76,106,51,69,76,106,49,69,76,106,49,69,69,56,116,105,108,101
.b8 77,97,115,107,69
.b8 0
.b8 6
.b8 95,90,78,49,56,99,111,111,112,101,114,97,116,105,118,101,95,103,114,111,117,112,115,52,95,95,118,49,55,100,101,116,97,105,108,115,52,116,105,108
.b8 101,49,51,95,116,105,108,101,95,104,101,108,112,101,114,115,73,76,106,49,54,69,76,106,51,69,76,106,49,69,76,106,49,69,69,56,108,97,110,101
.b8 77,97,115,107,69
.b8 0
.b32 450
.b8 5
.b8 159
.b8 5
.b8 9
.b8 3
.b64 _ZN18cooperative_groups4__v17details4tile13_tile_helpersILj16ELj3ELj1ELj1EE8laneMaskE
.b8 95,90,78,49,56,99,111,111,112,101,114,97,116,105,118,101,95,103,114,111,117,112,115,52,95,95,118,49,55,100,101,116,97,105,108,115,52,116,105,108
.b8 101,49,51,95,116,105,108,101,95,104,101,108,112,101,114,115,73,76,106,49,54,69,76,106,51,69,76,106,49,69,76,106,49,69,69,56,108,97,110,101
.b8 77,97,115,107,69
.b8 0
.b8 6
.b8 95,90,78,49,56,99,111,111,112,101,114,97,116,105,118,101,95,103,114,111,117,112,115,52,95,95,118,49,55,100,101,116,97,105,108,115,52,116,105,108
.b8 101,49,51,95,116,105,108,101,95,104,101,108,112,101,114,115,73,76,106,49,54,69,76,106,51,69,76,106,49,69,76,106,49,69,69,49,48,115,104,105
.b8 102,116,67,111,117,110,116,69
.b8 0
.b32 450
.b8 5
.b8 160
.b8 5
.b8 9
.b8 3
.b64 _ZN18cooperative_groups4__v17details4tile13_tile_helpersILj16ELj3ELj1ELj1EE10shiftCountE
.b8 95,90,78,49,56,99,111,111,112,101,114,97,116,105,118,101,95,103,114,111,117,112,115,52,95,95,118,49,55,100,101,116,97,105,108,115,52,116,105,108
.b8 101,49,51,95,116,105,108,101,95,104,101,108,112,101,114,115,73,76,106,49,54,69,76,106,51,69,76,106,49,69,76,106,49,69,69,49,48,115,104,105
.b8 102,116,67,111,117,110,116,69
.b8 0
.b8 6
.b8 95,90,78,49,56,99,111,111,112,101,114,97,116,105,118,101,95,103,114,111,117,112,115,52,95,95,118,49,55,100,101,116,97,105,108,115,52,116,105,108
.b8 101,49,51,95,116,105,108,101,95,104,101,108,112,101,114,115,73,76,106,51,50,69,76,106,49,69,76,106,48,69,76,106,48,69,69,57,116,105,108,101
.b8 67,111,117,110,116,69
.b8 0
.b32 450
.b8 5
.b8 157
.b8 5
.b8 9
.b8 3
.b64 _ZN18cooperative_groups4__v17details4tile13_tile_helpersILj32ELj1ELj0ELj0EE9tileCountE
.b8 95,90,78,49,56,99,111,111,112,101,114,97,116,105,118,101,95,103,114,111,117,112,115,52,95,95,118,49,55,100,101,116,97,105,108,115,52,116,105,108
.b8 101,49,51,95,116,105,108,101,95,104,101,108,112,101,114,115,73,76,106,51,50,69,76,106,49,69,76,106,48,69,76,106,48,69,69,57,116,105,108,101
.b8 67,111,117,110,116,69
.b8 0
.b8 6
.b8 95,90,78,49,56,99,111,111,112,101,114,97,116,105,118,101,95,103,114,111,117,112,115,52,95,95,118,49,55,100,101,116,97,105,108,115,52,116,105,108
.b8 101,49,51,95,116,105,108,101,95,104,101,108,112,101,114,115,73,76,106,51,50,69,76,106,49,69,76,106,48,69,76,106,48,69,69,56,116,105,108,101
.b8 77,97,115,107,69
.b8 0
.b32 450
.b8 5
.b8 158
.b8 5
.b8 9
.b8 3
.b64 _ZN18cooperative_groups4__v17details4tile13_tile_helpersILj32ELj1ELj0ELj0EE8tileMaskE
.b8 95,90,78,49,56,99,111,111,112,101,114,97,116,105,118,101,95,103,114,111,117,112,115,52,95,95,118,49,55,100,101,116,97,105,108,115,52,116,105,108
.b8 101,49,51,95,116,105,108,101,95,104,101,108,112,101,114,115,73,76,106,51,50,69,76,106,49,69,76,106,48,69,76,106,48,69,69,56,116,105,108,101
.b8 77,97,115,107,69
.b8 0
.b8 6
.b8 95,90,78,49,56,99,111,111,112,101,114,97,116,105,118,101,95,103,114,111,117,112,115,52,95,95,118,49,55,100,101,116,97,105,108,115,52,116,105,108
.b8 101,49,51,95,116,105,108,101,95,104,101,108,112,101,114,115,73,76,106,51,50,69,76,106,49,69,76,106,48,69,76,106,48,69,69,56,108,97,110,101
.b8 77,97,115,107,69
.b8 0
.b32 450
.b8 5
.b8 159
.b8 5
.b8 9
.b8 3
.b64 _ZN18cooperative_groups4__v17details4tile13_tile_helpersILj32ELj1ELj0ELj0EE8laneMaskE
.b8 95,90,78,49,56,99,111,111,112,101,114,97,116,105,118,101,95,103,114,111,117,112,115,52,95,95,118,49,55,100,101,116,97,105,108,115,52,116,105,108
.b8 101,49,51,95,116,105,108,101,95,104,101,108,112,101,114,115,73,76,106,51,50,69,76,106,49,69,76,106,48,69,76,106,48,69,69,56,108,97,110,101
.b8 77,97,115,107,69
.b8 0
.b8 6
.b8 95,90,78,49,56,99,111,111,112,101,114,97,116,105,118,101,95,103,114,111,117,112,115,52,95,95,118,49,55,100,101,116,97,105,108,115,52,116,105,108
.b8 101,49,51,95,116,105,108,101,95,104,101,108,112,101,114,115,73,76,106,51,50,69,76,106,49,69,76,106,48,69,76,106,48,69,69,49,48,115,104,105
.b8 102,116,67,111,117,110,116,69
.b8 0
.b32 450
.b8 5
.b8 160
.b8 5
.b8 9
.b8 3
.b64 _ZN18cooperative_groups4__v17details4tile13_tile_helpersILj32ELj1ELj0ELj0EE10shiftCountE
.b8 95,90,78,49,56,99,111,111,112,101,114,97,116,105,118,101,95,103,114,111,117,112,115,52,95,95,118,49,55,100,101,116,97,105,108,115,52,116,105,108
.b8 101,49,51,95,116,105,108,101,95,104,101,108,112,101,114,115,73,76,106,51,50,69,76,106,49,69,76,106,48,69,76,106,48,69,69,49,48,115,104,105
.b8 102,116,67,111,117,110,116,69
.b8 0
.b8 2
.b8 95,90,78,54,52,95,73,78,84,69,82,78,65,76,95,48,48,48,48,48,48,48,48,95,50,53,95,71,66,95,106,105,116,95,65,120,66,95,100,111
.b8 116,51,95,112,104,97,115,101,51,95,109,112,95,102,55,49,49,51,55,97,57,95,52,48,50,49,51,57,51,49,56,99,111,111,112,101,114,97,116,105
.b8 118,101,95,103,114,111,117,112,115,52,95,95,118,49,55,100,101,116,97,105,108,115,52,116,105,108,101,50,48,95,77,101,109,111,114,121,83,104,117,102
.b8 102,108,101,67,117,116,111,102,102,69
.b8 0
.b32 7940
.b8 5
.b8 98
.b8 1
.b8 5
.b8 9
.b8 3
.b64 _ZN64_INTERNAL_00000000_25_GB_jit_AxB_dot3_phase3_mp_f71137a9_402139318cooperative_groups4__v17details4tile20_MemoryShuffleCutoffE
.b8 95,90,78,54,52,95,73,78,84,69,82,78,65,76,95,48,48,48,48,48,48,48,48,95,50,53,95,71,66,95,106,105,116,95,65,120,66,95,100,111
.b8 116,51,95,112,104,97,115,101,51,95,109,112,95,102,55,49,49,51,55,97,57,95,52,48,50,49,51,57,51,49,56,99,111,111,112,101,114,97,116,105
.b8 118,101,95,103,114,111,117,112,115,52,95,95,118,49,55,100,101,116,97,105,108,115,52,116,105,108,101,50,48,95,77,101,109,111,114,121,83,104,117,102
.b8 102,108,101,67,117,116,111,102,102,69
.b8 0
.b8 7
.b32 7945
.b8 8
.b8 117,110,115,105,103,110,101,100,32,108,111,110,103,32,108,111,110,103
.b8 0
.b8 7
.b8 8
.b8 6
.b8 95,90,78,54,52,95,73,78,84,69,82,78,65,76,95,48,48,48,48,48,48,48,48,95,50,53,95,71,66,95,106,105,116,95,65,120,66,95,100,111
.b8 116,51,95,112,104,97,115,101,51,95,109,112,95,102,55,49,49,51,55,97,57,95,52,48,50,49,51,57,51,49,56,99,111,111,112,101,114,97,116,105
.b8 118,101,95,103,114,111,117,112,115,52,95,95,118,49,55,100,101,116,97,105,108,115,49,56,99,111,97,108,101,115,99,101,100,95,103,114,111,117,112,95
.b8 105,100,69
.b8 0
.b32 450
.b8 3
.b8 69
.b8 5
.b8 9
.b8 3
.b64 _ZN64_INTERNAL_00000000_25_GB_jit_AxB_dot3_phase3_mp_f71137a9_402139318cooperative_groups4__v17details18coalesced_group_idE
.b8 95,90,78,54,52,95,73,78,84,69,82,78,65,76,95,48,48,48,48,48,48,48,48,95,50,53,95,71,66,95,106,105,116,95,65,120,66,95,100,111
.b8 116,51,95,112,104,97,115,101,51,95,109,112,95,102,55,49,49,51,55,97,57,95,52,48,50,49,51,57,51,49,56,99,111,111,112,101,114,97,116,105
.b8 118,101,95,103,114,111,117,112,115,52,95,95,118,49,55,100,101,116,97,105,108,115,49,56,99,111,97,108,101,115,99,101,100,95,103,114,111,117,112,95
.b8 105,100,69
.b8 0
.b8 6
.b8 95,90,78,54,52,95,73,78,84,69,82,78,65,76,95,48,48,48,48,48,48,48,48,95,50,53,95,71,66,95,106,105,116,95,65,120,66,95,100,111
.b8 116,51,95,112,104,97,115,101,51,95,109,112,95,102,55,49,49,51,55,97,57,95,52,48,50,49,51,57,51,49,56,99,111,111,112,101,114,97,116,105
.b8 118,101,95,103,114,111,117,112,115,52,95,95,118,49,55,100,101,116,97,105,108,115,49,57,109,117,108,116,105,95,103,114,105,100,95,103,114,111,117,112
.b8 95,105,100,69
.b8 0
.b32 450
.b8 3
.b8 70
.b8 5
.b8 9
.b8 3
.b64 _ZN64_INTERNAL_00000000_25_GB_jit_AxB_dot3_phase3_mp_f71137a9_402139318cooperative_groups4__v17details19multi_grid_group_idE
.b8 95,90,78,54,52,95,73,78,84,69,82,78,65,76,95,48,48,48,48,48,48,48,48,95,50,53,95,71,66,95,106,105,116,95,65,120,66,95,100,111
.b8 116,51,95,112,104,97,115,101,51,95,109,112,95,102,55,49,49,51,55,97,57,95,52,48,50,49,51,57,51,49,56,99,111,111,112,101,114,97,116,105
.b8 118,101,95,103,114,111,117,112,115,52,95,95,118,49,55,100,101,116,97,105,108,115,49,57,109,117,108,116,105,95,103,114,105,100,95,103,114,111,117,112
.b8 95,105,100,69
.b8 0
.b8 6
.b8 95,90,78,54,52,95,73,78,84,69,82,78,65,76,95,48,48,48,48,48,48,48,48,95,50,53,95,71,66,95,106,105,116,95,65,120,66,95,100,111
.b8 116,51,95,112,104,97,115,101,51,95,109,112,95,102,55,49,49,51,55,97,57,95,52,48,50,49,51,57,51,49,56,99,111,111,112,101,114,97,116,105
.b8 118,101,95,103,114,111,117,112,115,52,95,95,118,49,55,100,101,116,97,105,108,115,49,51,103,114,105,100,95,103,114,111,117,112,95,105,100,69
.b8 0
.b32 450
.b8 3
.b8 71
.b8 5
.b8 9
.b8 3
.b64 _ZN64_INTERNAL_00000000_25_GB_jit_AxB_dot3_phase3_mp_f71137a9_402139318cooperative_groups4__v17details13grid_group_idE
.b8 95,90,78,54,52,95,73,78,84,69,82,78,65,76,95,48,48,48,48,48,48,48,48,95,50,53,95,71,66,95,106,105,116,95,65,120,66,95,100,111
.b8 116,51,95,112,104,97,115,101,51,95,109,112,95,102,55,49,49,51,55,97,57,95,52,48,50,49,51,57,51,49,56,99,111,111,112,101,114,97,116,105
.b8 118,101,95,103,114,111,117,112,115,52,95,95,118,49,55,100,101,116,97,105,108,115,49,51,103,114,105,100,95,103,114,111,117,112,95,105,100,69
.b8 0
.b8 6
.b8 95,90,78,54,52,95,73,78,84,69,82,78,65,76,95,48,48,48,48,48,48,48,48,95,50,53,95,71,66,95,106,105,116,95,65,120,66,95,100,111
.b8 116,51,95,112,104,97,115,101,51,95,109,112,95,102,55,49,49,51,55,97,57,95,52,48,50,49,51,57,51,49,56,99,111,111,112,101,114,97,116,105
.b8 118,101,95,103,114,111,117,112,115,52,95,95,118,49,55,100,101,116,97,105,108,115,49,53,116,104,114,101,97,100,95,98,108,111,99,107,95,105,100,69
.b8 0
.b32 450
.b8 3
.b8 72
.b8 5
.b8 9
.b8 3
.b64 _ZN64_INTERNAL_00000000_25_GB_jit_AxB_dot3_phase3_mp_f71137a9_402139318cooperative_groups4__v17details15thread_block_idE
.b8 95,90,78,54,52,95,73,78,84,69,82,78,65,76,95,48,48,48,48,48,48,48,48,95,50,53,95,71,66,95,106,105,116,95,65,120,66,95,100,111
.b8 116,51,95,112,104,97,115,101,51,95,109,112,95,102,55,49,49,51,55,97,57,95,52,48,50,49,51,57,51,49,56,99,111,111,112,101,114,97,116,105
.b8 118,101,95,103,114,111,117,112,115,52,95,95,118,49,55,100,101,116,97,105,108,115,49,53,116,104,114,101,97,100,95,98,108,111,99,107,95,105,100,69
.b8 0
.b8 6
.b8 95,90,78,54,52,95,73,78,84,69,82,78,65,76,95,48,48,48,48,48,48,48,48,95,50,53,95,71,66,95,106,105,116,95,65,120,66,95,100,111
.b8 116,51,95,112,104,97,115,101,51,95,109,112,95,102,55,49,49,51,55,97,57,95,52,48,50,49,51,57,51,49,56,99,111,111,112,101,114,97,116,105
.b8 118,101,95,103,114,111,117,112,115,52,95,95,118,49,55,100,101,116,97,105,108,115,49,57,109,117,108,116,105,95,116,105,108,101,95,103,114,111,117,112
.b8 95,105,100,69
.b8 0
.b32 450
.b8 3
.b8 73
.b8 5
.b8 9
.b8 3
.b64 _ZN64_INTERNAL_00000000_25_GB_jit_AxB_dot3_phase3_mp_f71137a9_402139318cooperative_groups4__v17details19multi_tile_group_idE
.b8 95,90,78,54,52,95,73,78,84,69,82,78,65,76,95,48,48,48,48,48,48,48,48,95,50,53,95,71,66,95,106,105,116,95,65,120,66,95,100,111
.b8 116,51,95,112,104,97,115,101,51,95,109,112,95,102,55,49,49,51,55,97,57,95,52,48,50,49,51,57,51,49,56,99,111,111,112,101,114,97,116,105
.b8 118,101,95,103,114,111,117,112,115,52,95,95,118,49,55,100,101,116,97,105,108,115,49,57,109,117,108,116,105,95,116,105,108,101,95,103,114,111,117,112
.b8 95,105,100,69
.b8 0
.b8 3
.b32 9325
.b8 95,90,78,49,56,95,95,106,105,116,105,102,121,95,115,116,100,105,110,116,95,110,115,55,105,110,116,54,52,95,116,69
.b8 0
.b8 6
.b8 8
.b8 8
.b8 108,111,110,103,32,108,111,110,103
.b8 0
.b8 5
.b8 8
.b8 3
.b32 9352
.b8 115,105,122,101,95,116
.b8 0
.b8 7
.b8 55
.b8 8
.b8 117,110,115,105,103,110,101,100,32,108,111,110,103
.b8 0
.b8 7
.b8 8
.b8 9
.b8 71,66,95,77,97,116,114,105,120,95,111,112,97,113,117,101
.b8 0
.b8 208
.b8 1
.b8 247
.b8 1
.b8 10
.b8 109,97,103,105,99
.b8 0
.b32 9285
.b8 8
.b8 33
.b8 2
.b8 35
.b8 0
.b8 10
.b8 104,101,97,100,101,114,95,115,105,122,101
.b8 0
.b32 9338
.b8 8
.b8 34
.b8 2
.b8 35
.b8 8
.b8 10
.b8 108,111,103,103,101,114
.b8 0
.b32 10089
.b8 8
.b8 35
.b8 2
.b8 35
.b8 16
.b8 10
.b8 108,111,103,103,101,114,95,115,105,122,101
.b8 0
.b32 9338
.b8 8
.b8 36
.b8 2
.b8 35
.b8 24
.b8 10
.b8 116,121,112,101
.b8 0
.b32 10106
.b8 8
.b8 40
.b8 2
.b8 35
.b8 32
.b8 5
.b8 71,66,95,84,121,112,101,95,111,112,97,113,117,101
.b8 0
.b8 0
.b8 1
.b8 129
.b8 1
.b8 10
.b8 112,108,101,110
.b8 0
.b32 9285
.b8 8
.b8 205
.b8 2
.b8 35
.b8 40
.b8 10
.b8 118,108,101,110
.b8 0
.b32 9285
.b8 8
.b8 206
.b8 2
.b8 35
.b8 48
.b8 10
.b8 118,100,105,109
.b8 0
.b32 9285
.b8 8
.b8 207
.b8 2
.b8 35
.b8 56
.b8 10
.b8 110,118,101,99
.b8 0
.b32 9285
.b8 8
.b8 208
.b8 2
.b8 35
.b8 64
.b8 10
.b8 110,118,101,99,95,110,111,110,101,109,112,116,121
.b8 0
.b32 9285
.b8 8
.b8 211
.b8 2
.b8 35
.b8 72
.b8 10
.b8 104
.b8 0
.b32 10131
.b8 8
.b8 214
.b8 2
.b8 35
.b8 80
.b8 10
.b8 112
.b8 0
.b32 10131
.b8 8
.b8 215
.b8 2
.b8 35
.b8 88
.b8 10
.b8 105
.b8 0
.b32 10131
.b8 8
.b8 216
.b8 2
.b8 35
.b8 96
.b8 10
.b8 120
.b8 0
.b32 10140
.b8 8
.b8 217
.b8 2
.b8 35
.b8 104
.b8 10
.b8 98
.b8 0
.b32 10155
.b8 8
.b8 219
.b8 2
.b8 35
.b8 112
.b8 10
.b8 110,118,97,108,115
.b8 0
.b32 9285
.b8 8
.b8 220
.b8 2
.b8 35
.b8 120
.b8 10
.b8 112,95,115,105,122,101
.b8 0
.b32 9338
.b8 8
.b8 222
.b8 3
.b8 35
.b8 128,1
.b8 10
.b8 104,95,115,105,122,101
.b8 0
.b32 9338
.b8 8
.b8 223
.b8 3
.b8 35
.b8 136,1
.b8 10
.b8 98,95,115,105,122,101
.b8 0
.b32 9338
.b8 8
.b8 224
.b8 3
.b8 35
.b8 144,1
.b8 10
.b8 105,95,115,105,122,101
.b8 0
.b32 9338
.b8 8
.b8 225
.b8 3
.b8 35
.b8 152,1
.b8 10
.b8 120,95,115,105,122,101
.b8 0
.b32 9338
.b8 8
.b8 226
.b8 3
.b8 35
.b8 160,1
.b8 11
.b8 80,101,110,100,105,110,103
.b8 0
.b32 10218
.b8 8
.b8 21
.b8 1
.b8 3
.b8 35
.b8 168,1
.b8 5
.b8 71,66,95,80,101,110,100,105,110,103,95,115,116,114,117,99,116
.b8 0
.b8 0
.b8 1
.b8 214
.b8 1
.b8 11
.b8 110,122,111,109,98,105,101,115
.b8 0
.b32 10246
.b8 8
.b8 51
.b8 1
.b8 3
.b8 35
.b8 176,1
.b8 11
.b8 104,121,112,101,114,95,115,119,105,116,99,104
.b8 0
.b32 10287
.b8 8
.b8 116
.b8 1
.b8 3
.b8 35
.b8 184,1
.b8 11
.b8 98,105,116,109,97,112,95,115,119,105,116,99,104
.b8 0
.b32 10287
.b8 8
.b8 117
.b8 1
.b8 3
.b8 35
.b8 188,1
.b8 11
.b8 115,112,97,114,115,105,116,121,95,99,111,110,116,114,111,108
.b8 0
.b32 10296
.b8 8
.b8 118
.b8 1
.b8 3
.b8 35
.b8 192,1
.b8 11
.b8 112,95,115,104,97,108,108,111,119
.b8 0
.b32 2753
.b8 8
.b8 135
.b8 1
.b8 3
.b8 35
.b8 196,1
.b8 11
.b8 104,95,115,104,97,108,108,111,119
.b8 0
.b32 2753
.b8 8
.b8 136
.b8 1
.b8 3
.b8 35
.b8 197,1
.b8 11
.b8 98,95,115,104,97,108,108,111,119
.b8 0
.b32 2753
.b8 8
.b8 137
.b8 1
.b8 3
.b8 35
.b8 198,1
.b8 11
.b8 105,95,115,104,97,108,108,111,119
.b8 0
.b32 2753
.b8 8
.b8 138
.b8 1
.b8 3
.b8 35
.b8 199,1
.b8 11
.b8 120,95,115,104,97,108,108,111,119
.b8 0
.b32 2753
.b8 8
.b8 139
.b8 1
.b8 3
.b8 35
.b8 200,1
.b8 11
.b8 115,116,97,116,105,99,95,104,101,97,100,101,114
.b8 0
.b32 2753
.b8 8
.b8 140
.b8 1
.b8 3
.b8 35
.b8 201,1
.b8 11
.b8 105,115,95,99,115,99
.b8 0
.b32 2753
.b8 8
.b8 146
.b8 1
.b8 3
.b8 35
.b8 202,1
.b8 11
.b8 106,117,109,98,108,101,100
.b8 0
.b32 2753
.b8 8
.b8 147
.b8 1
.b8 3
.b8 35
.b8 203,1
.b8 11
.b8 105,115,111
.b8 0
.b32 2753
.b8 8
.b8 172
.b8 1
.b8 3
.b8 35
.b8 204,1
.b8 0
.b8 4
.b32 10098
.b32 12
.b8 8
.b8 99,104,97,114
.b8 0
.b8 6
.b8 1
.b8 3
.b32 10122
.b8 71,114,66,95,84,121,112,101
.b8 0
.b8 2
.b8 67
.b8 4
.b32 9483
.b32 12
.b8 4
.b32 9285
.b32 12
.b8 4
.b32 10149
.b32 12
.b8 12
.b8 118,111,105,100
.b8 0
.b8 4
.b32 10164
.b32 12
.b8 3
.b32 10203
.b8 95,90,78,49,56,95,95,106,105,116,105,102,121,95,115,116,100,105,110,116,95,110,115,54,105,110,116,56,95,116,69
.b8 0
.b8 6
.b8 5
.b8 8
.b8 115,105,103,110,101,100,32,99,104,97,114
.b8 0
.b8 6
.b8 1
.b8 13
.b32 10237
.b8 71,66,95,80,101,110,100,105,110,103
.b8 0
.b8 1
.b8 231
.b8 1
.b8 4
.b32 9773
.b32 12
.b8 3
.b32 7945
.b8 95,90,78,49,56,95,95,106,105,116,105,102,121,95,115,116,100,105,110,116,95,110,115,56,117,105,110,116,54,52,95,116,69
.b8 0
.b8 6
.b8 22
.b8 8
.b8 102,108,111,97,116
.b8 0
.b8 4
.b8 4
.b8 8
.b8 105,110,116
.b8 0
.b8 5
.b8 4
.b8 3
.b32 10321
.b8 71,114,66,95,77,97,116,114,105,120
.b8 0
.b8 2
.b8 76
.b8 4
.b32 9369
.b32 12
.b8 3
.b32 10296
.b8 95,90,78,49,56,95,95,106,105,116,105,102,121,95,115,116,100,105,110,116,95,110,115,55,105,110,116,51,50,95,116,69
.b8 0
.b8 6
.b8 7
.b8 4
.b32 14534
.b32 12
.b8 9
.b8 100,105,109,51
.b8 0
.b8 12
.b8 7
.b8 205
.b8 3
.b8 11
.b8 120
.b8 0
.b32 455
.b8 7
.b8 207
.b8 3
.b8 2
.b8 35
.b8 0
.b8 11
.b8 121
.b8 0
.b32 455
.b8 7
.b8 207
.b8 3
.b8 2
.b8 35
.b8 4
.b8 11
.b8 122
.b8 0
.b32 455
.b8 7
.b8 207
.b8 3
.b8 2
.b8 35
.b8 8
.b8 0
.b8 9
.b8 117,105,110,116,51
.b8 0
.b8 12
.b8 7
.b8 32
.b8 3
.b8 11
.b8 120
.b8 0
.b32 455
.b8 7
.b8 34
.b8 3
.b8 2
.b8 35
.b8 0
.b8 11
.b8 121
.b8 0
.b32 455
.b8 7
.b8 34
.b8 3
.b8 2
.b8 35
.b8 4
.b8 11
.b8 122
.b8 0
.b32 455
.b8 7
.b8 34
.b8 3
.b8 2
.b8 35
.b8 8
.b8 0
.b8 13
.b32 10429
.b8 117,105,110,116,51
.b8 0
.b8 7
.b8 178
.b8 3
.b8 14
.b8 95,90,78,49,56,99,111,111,112,101,114,97,116,105,118,101,95,103,114,111,117,112,115,52,95,95,118,49,49,55,116,104,114,101,97,100,95,103,114,111
.b8 117,112,95,98,97,115,101,73,76,106,52,69,69,69
.b8 0
.b8 16
.b8 3
.b8 162
.b8 15
.b8 95,95,98,95,78,49,56,99,111,111,112,101,114,97,116,105,118,101,95,103,114,111,117,112,115,52,95,95,118,49,49,50,116,104,114,101,97,100,95,103
.b8 114,111,117,112,69
.b8 0
.b32 13983
.b8 2
.b8 35
.b8 0
.b8 0
.b8 9
.b8 95,90,78,49,56,99,111,111,112,101,114,97,116,105,118,101,95,103,114,111,117,112,115,52,95,95,118,49,49,50,116,104,114,101,97,100,95,98,108,111
.b8 99,107,69
.b8 0
.b8 16
.b8 3
.b8 61
.b8 2
.b8 15
.b8 95,95,98,95,78,49,56,99,111,111,112,101,114,97,116,105,118,101,95,103,114,111,117,112,115,52,95,95,118,49,49,55,116,104,114,101,97,100,95,103
.b8 114,111,117,112,95,98,97,115,101,73,76,106,52,69,69,69
.b8 0
.b32 10494
.b8 2
.b8 35
.b8 0
.b8 0
.b8 5
.b8 95,90,78,49,56,99,111,111,112,101,114,97,116,105,118,101,95,103,114,111,117,112,115,52,95,95,118,49,51,54,95,95,115,116,97,116,105,99,95,115
.b8 105,122,101,95,116,104,114,101,97,100,95,98,108,111,99,107,95,116,105,108,101,95,98,97,115,101,73,76,106,51,50,69,69,69
.b8 0
.b8 1
.b8 3
.b8 229
.b8 3
.b8 3
.b32 10330
.b8 95,90,78,49,56,99,111,111,112,101,114,97,116,105,118,101,95,103,114,111,117,112,115,52,95,95,118,49,55,100,101,116,97,105,108,115,57,116,101,109
.b8 112,108,97,116,101,115,49,54,114,101,109,111,118,101,95,114,101,102,101,114,101,110,99,101,73,82,105,69,52,116,121,112,101,69
.b8 0
.b8 4
.b8 213
.b8 3
.b32 10803
.b8 95,90,78,49,56,99,111,111,112,101,114,97,116,105,118,101,95,103,114,111,117,112,115,52,95,95,118,49,55,100,101,116,97,105,108,115,57,116,101,109
.b8 112,108,97,116,101,115,49,50,114,101,109,111,118,101,95,99,111,110,115,116,73,105,69,52,116,121,112,101,69
.b8 0
.b8 4
.b8 219
.b8 3
.b32 10885
.b8 95,90,78,49,56,99,111,111,112,101,114,97,116,105,118,101,95,103,114,111,117,112,115,52,95,95,118,49,55,100,101,116,97,105,108,115,57,116,101,109
.b8 112,108,97,116,101,115,49,53,114,101,109,111,118,101,95,118,111,108,97,116,105,108,101,73,105,69,52,116,121,112,101,69
.b8 0
.b8 4
.b8 222
.b8 3
.b32 10962
.b8 95,90,78,49,56,99,111,111,112,101,114,97,116,105,118,101,95,103,114,111,117,112,115,52,95,95,118,49,55,100,101,116,97,105,108,115,57,116,101,109
.b8 112,108,97,116,101,115,57,114,101,109,111,118,101,95,99,118,73,105,69,52,116,121,112,101,69
.b8 0
.b8 4
.b8 225
.b8 5
.b8 95,90,78,49,56,99,111,111,112,101,114,97,116,105,118,101,95,103,114,111,117,112,115,52,95,95,118,49,49,55,116,104,114,101,97,100,95,98,108,111
.b8 99,107,95,116,105,108,101,73,76,106,51,50,69,78,83,48,95,49,50,116,104,114,101,97,100,95,98,108,111,99,107,69,69,69
.b8 0
.b8 1
.b8 3
.b8 66
.b8 6
.b8 5
.b8 95,90,78,49,56,99,111,111,112,101,114,97,116,105,118,101,95,103,114,111,117,112,115,52,95,95,118,49,51,49,95,95,115,105,110,103,108,101,95,119
.b8 97,114,112,95,116,104,114,101,97,100,95,98,108,111,99,107,95,116,105,108,101,73,76,106,51,50,69,78,83,48,95,49,50,116,104,114,101,97,100,95
.b8 98,108,111,99,107,69,69,69
.b8 0
.b8 1
.b8 3
.b8 114
.b8 4
.b8 5
.b8 95,90,78,49,56,99,111,111,112,101,114,97,116,105,118,101,95,103,114,111,117,112,115,52,95,95,118,49,55,100,101,116,97,105,108,115,50,50,116,104
.b8 114,101,97,100,95,98,108,111,99,107,95,116,105,108,101,95,105,109,112,108,73,76,106,51,50,69,78,83,48,95,49,50,116,104,114,101,97,100,95,98
.b8 108,111,99,107,69,76,98,48,69,69,69
.b8 0
.b8 1
.b8 3
.b8 31
.b8 6
.b8 5
.b8 95,90,78,49,56,99,111,111,112,101,114,97,116,105,118,101,95,103,114,111,117,112,115,52,95,95,118,49,55,100,101,116,97,105,108,115,50,48,116,105
.b8 108,101,100,95,112,97,114,116,105,116,105,111,110,95,105,109,112,108,73,76,106,51,50,69,78,83,48,95,49,50,116,104,114,101,97,100,95,98,108,111
.b8 99,107,69,69,69
.b8 0
.b8 1
.b8 3
.b8 107
.b8 6
.b8 3
.b32 10803
.b8 95,90,78,49,56,99,111,111,112,101,114,97,116,105,118,101,95,103,114,111,117,112,115,52,95,95,118,49,55,100,101,116,97,105,108,115,57,116,101,109
.b8 112,108,97,116,101,115,49,56,114,101,109,111,118,101,95,114,101,102,101,114,101,110,99,101,95,116,73,82,105,69,69
.b8 0
.b8 4
.b8 217
.b8 13
.b32 10379
.b8 100,105,109,51
.b8 0
.b8 7
.b8 220
.b8 3
.b8 16
.b8 95,90,78,49,56,99,111,111,112,101,114,97,116,105,118,101,95,103,114,111,117,112,115,52,95,95,118,49,49,50,116,104,114,101,97,100,95,98,108,111
.b8 99,107,67,49,69,118
.b8 0
.b8 116,104,114,101,97,100,95,98,108,111,99,107
.b8 0
.b8 3
.b8 93
.b8 2
.b32 10149
.b8 1
.b8 17
.b8 116,104,105,115
.b8 0
.b32 11649
.b8 0
.b8 7
.b32 11654
.b8 4
.b32 10608
.b32 12
.b8 18
.b8 95,90,78,49,56,99,111,111,112,101,114,97,116,105,118,101,95,103,114,111,117,112,115,52,95,95,118,49,49,55,116,104,105,115,95,116,104,114,101,97
.b8 100,95,98,108,111,99,107,69,118
.b8 0
.b8 116,104,105,115,95,116,104,114,101,97,100,95,98,108,111,99,107
.b8 0
.b8 3
.b8 168
.b8 2
.b32 10608
.b8 1
.b8 16
.b8 95,90,78,49,56,99,111,111,112,101,114,97,116,105,118,101,95,103,114,111,117,112,115,52,95,95,118,49,49,53,116,105,108,101,100,95,112,97,114,116
.b8 105,116,105,111,110,73,76,106,51,50,69,78,83,48,95,49,50,116,104,114,101,97,100,95,98,108,111,99,107,69,69,69,78,83,48,95,49,55,116,104
.b8 114,101,97,100,95,98,108,111,99,107,95,116,105,108,101,73,88,84,95,69,84,48,95,69,69,82,75,83,52,95
.b8 0
.b8 116,105,108,101,100,95,112,97,114,116,105,116,105,111,110,60,51,50,85,44,116,104,114,101,97,100,95,98,108,111,99,107,62
.b8 0
.b8 3
.b8 142
.b8 6
.b32 11115
.b8 1
.b8 19
.b8 103
.b8 0
.b8 3
.b8 142
.b8 6
.b32 11905
.b8 0
.b8 20
.b32 11910
.b8 7
.b32 10608
.b8 16
.b8 95,90,78,49,56,99,111,111,112,101,114,97,116,105,118,101,95,103,114,111,117,112,115,52,95,95,118,49,55,100,101,116,97,105,108,115,50,48,116,105
.b8 108,101,100,95,112,97,114,116,105,116,105,111,110,95,105,109,112,108,73,76,106,51,50,69,78,83,48,95,49,50,116,104,114,101,97,100,95,98,108,111
.b8 99,107,69,69,67,49,69,82,75,83,51,95
.b8 0
.b8 116,105,108,101,100,95,112,97,114,116,105,116,105,111,110,95,105,109,112,108
.b8 0
.b8 3
.b8 111
.b8 6
.b32 10149
.b8 1
.b8 17
.b8 116,104,105,115
.b8 0
.b32 12059
.b8 19
.b8 103
.b8 0
.b8 3
.b8 111
.b8 6
.b32 11905
.b8 0
.b8 7
.b32 12064
.b8 4
.b32 11386
.b32 12
.b8 16
.b8 95,90,78,75,49,56,99,111,111,112,101,114,97,116,105,118,101,95,103,114,111,117,112,115,52,95,95,118,49,49,55,116,104,114,101,97,100,95,98,108
.b8 111,99,107,95,116,105,108,101,73,76,106,51,50,69,78,83,48,95,49,50,116,104,114,101,97,100,95,98,108,111,99,107,69,69,99,118,78,83,49,95
.b8 73,76,106,51,50,69,118,69,69,69,118
.b8 0
.b8 111,112,101,114,97,116,111,114,32,99,111,111,112,101,114,97,116,105,118,101,95,103,114,111,117,112,115,58,58,95,95,118,49,58,58,116,104,114,101,97
.b8 100,95,98,108,111,99,107,95,116,105,108,101,60,51,50,85,44,32,118,111,105,100,62
.b8 0
.b8 3
.b8 75
.b8 6
.b32 13423
.b8 1
.b8 17
.b8 116,104,105,115
.b8 0
.b32 12249
.b8 0
.b8 7
.b32 12254
.b8 4
.b32 12263
.b32 12
.b8 7
.b32 11115
.b8 16
.b8 95,90,78,49,56,99,111,111,112,101,114,97,116,105,118,101,95,103,114,111,117,112,115,52,95,95,118,49,49,55,116,104,114,101,97,100,95,98,108,111
.b8 99,107,95,116,105,108,101,73,76,106,51,50,69,118,69,67,49,73,78,83,48,95,49,50,116,104,114,101,97,100,95,98,108,111,99,107,69,69,69,82
.b8 75,78,83,49,95,73,76,106,51,50,69,84,95,69,69
.b8 0
.b8 116,104,114,101,97,100,95,98,108,111,99,107,95,116,105,108,101,60,116,104,114,101,97,100,95,98,108,111,99,107,62
.b8 0
.b8 3
.b8 93
.b8 6
.b32 10149
.b8 1
.b8 17
.b8 116,104,105,115
.b8 0
.b32 12426
.b8 19
.b8 103
.b8 0
.b8 3
.b8 93
.b8 6
.b32 12440
.b8 0
.b8 7
.b32 12431
.b8 4
.b32 13423
.b32 12
.b8 20
.b32 12263
.b8 16
.b8 95,90,78,49,56,99,111,111,112,101,114,97,116,105,118,101,95,103,114,111,117,112,115,52,95,95,118,49,51,54,95,95,115,116,97,116,105,99,95,115
.b8 105,122,101,95,116,104,114,101,97,100,95,98,108,111,99,107,95,116,105,108,101,95,98,97,115,101,73,76,106,51,50,69,69,49,48,98,117,105,108,100
.b8 95,109,97,115,107,69,118
.b8 0
.b8 98,117,105,108,100,95,109,97,115,107
.b8 0
.b8 3
.b8 243
.b8 3
.b32 455
.b8 1
.b8 21
.b8 22
.b8 109,97,115,107
.b8 0
.b8 3
.b8 244
.b8 3
.b32 455
.b8 21
.b8 22
.b8 108,97,110,101,73,100
.b8 0
.b8 3
.b8 247
.b8 3
.b32 455
.b8 0
.b8 0
.b8 0
.b8 16
.b8 95,90,78,75,49,56,99,111,111,112,101,114,97,116,105,118,101,95,103,114,111,117,112,115,52,95,95,118,49,51,54,95,95,115,116,97,116,105,99,95
.b8 115,105,122,101,95,116,104,114,101,97,100,95,98,108,111,99,107,95,116,105,108,101,95,98,97,115,101,73,76,106,51,50,69,69,51,97,110,121,69,105
.b8 0
.b8 97,110,121
.b8 0
.b8 3
.b8 56
.b8 4
.b32 10296
.b8 1
.b8 17
.b8 116,104,105,115
.b8 0
.b32 12731
.b8 19
.b8 112,114,101,100,105,99,97,116,101
.b8 0
.b8 3
.b8 56
.b8 4
.b32 10296
.b8 21
.b8 22
.b8 108,97,110,101,95,98,97,108,108,111,116
.b8 0
.b8 3
.b8 57
.b8 4
.b32 455
.b8 0
.b8 0
.b8 7
.b32 12736
.b8 4
.b32 12745
.b32 12
.b8 7
.b32 10723
.b8 23
.b64 $L__func_begin0
.b64 $L__func_end0
.b8 1
.b8 156
.b8 95,90,49,56,65,120,66,95,100,111,116,51,95,112,104,97,115,101,51,95,109,112,73,105,105,105,69,118,120,120,80,120,80,49,54,71,66,95,77,97
.b8 116,114,105,120,95,111,112,97,113,117,101,83,50,95,83,50,95,83,50,95,105
.b8 0
.b8 65,120,66,95,100,111,116,51,95,112,104,97,115,101,51,95,109,112,60,105,110,116,51,50,95,116,44,105,110,116,51,50,95,116,44,105,110,116,51,50
.b8 95,116,62
.b8 0
.b8 10
.b8 76
.b32 10149
.b8 1
.b8 24
.b8 9
.b8 3
.b64 _Z18AxB_dot3_phase3_mpIiiiEvxxPxP16GB_Matrix_opaqueS2_S2_S2_i_param_0
.b8 7
.b8 115,116,97,114,116
.b8 0
.b8 10
.b8 78
.b32 9285
.b8 24
.b8 9
.b8 3
.b64 _Z18AxB_dot3_phase3_mpIiiiEvxxPxP16GB_Matrix_opaqueS2_S2_S2_i_param_1
.b8 7
.b8 101,110,100
.b8 0
.b8 10
.b8 79
.b32 9285
.b8 24
.b8 7
.b8 144
.b8 184
.b8 230
.b8 144
.b8 147
.b8 215
.b8 4
.b8 2
.b8 66,117,99,107,101,116
.b8 0
.b8 10
.b8 80
.b32 10131
.b8 24
.b8 9
.b8 3
.b64 _Z18AxB_dot3_phase3_mpIiiiEvxxPxP16GB_Matrix_opaqueS2_S2_S2_i_param_3
.b8 7
.b8 67
.b8 0
.b8 10
.b8 81
.b32 10303
.b8 24
.b8 9
.b8 3
.b64 _Z18AxB_dot3_phase3_mpIiiiEvxxPxP16GB_Matrix_opaqueS2_S2_S2_i_param_4
.b8 7
.b8 77
.b8 0
.b8 10
.b8 82
.b32 10303
.b8 24
.b8 9
.b8 3
.b64 _Z18AxB_dot3_phase3_mpIiiiEvxxPxP16GB_Matrix_opaqueS2_S2_S2_i_param_5
.b8 7
.b8 65
.b8 0
.b8 10
.b8 83
.b32 10303
.b8 24
.b8 9
.b8 3
.b64 _Z18AxB_dot3_phase3_mpIiiiEvxxPxP16GB_Matrix_opaqueS2_S2_S2_i_param_6
.b8 7
.b8 66
.b8 0
.b8 10
.b8 84
.b32 10303
.b8 24
.b8 6
.b8 144
.b8 184
.b8 236
.b8 200
.b8 171
.b8 2
.b8 2
.b8 115,122
.b8 0
.b8 10
.b8 85
.b32 10296
.b8 25
.b64 $L__tmp0
.b64 $L__tmp178
.b8 26
.b8 6
.b8 12
.b8 3
.b64 __local_depot0
.b8 35
.b8 128,1
.b8 116,105,108,101
.b8 0
.b8 10
.b8 118
.b32 13423
.b8 27
.b8 6
.b8 144
.b8 177
.b8 200
.b8 201
.b8 171
.b8 2
.b8 2
.b8 65,120
.b8 0
.b8 10
.b8 90
.b32 16686
.b8 27
.b8 6
.b8 144
.b8 178
.b8 200
.b8 201
.b8 171
.b8 2
.b8 2
.b8 66,120
.b8 0
.b8 10
.b8 91
.b32 16686
.b8 27
.b8 6
.b8 144
.b8 179
.b8 200
.b8 201
.b8 171
.b8 2
.b8 2
.b8 67,120
.b8 0
.b8 10
.b8 92
.b32 16686
.b8 27
.b8 6
.b8 144
.b8 180
.b8 200
.b8 201
.b8 171
.b8 2
.b8 2
.b8 67,105
.b8 0
.b8 10
.b8 93
.b32 10131
.b8 27
.b8 6
.b8 144
.b8 181
.b8 200
.b8 201
.b8 171
.b8 2
.b8 2
.b8 77,105
.b8 0
.b8 10
.b8 94
.b32 10131
.b8 27
.b8 6
.b8 144
.b8 182
.b8 200
.b8 201
.b8 171
.b8 2
.b8 2
.b8 65,105
.b8 0
.b8 10
.b8 95
.b32 10131
.b8 27
.b8 6
.b8 144
.b8 183
.b8 200
.b8 201
.b8 171
.b8 2
.b8 2
.b8 66,105
.b8 0
.b8 10
.b8 96
.b32 10131
.b8 27
.b8 6
.b8 144
.b8 184
.b8 200
.b8 201
.b8 171
.b8 2
.b8 2
.b8 65,112
.b8 0
.b8 10
.b8 97
.b32 10131
.b8 27
.b8 6
.b8 144
.b8 185
.b8 200
.b8 201
.b8 171
.b8 2
.b8 2
.b8 66,112
.b8 0
.b8 10
.b8 98
.b32 10131
.b8 28
.b32 .debug_loc
.b8 122,99
.b8 0
.b8 10
.b8 102
.b32 10296
.b8 27
.b8 6
.b8 144
.b8 181
.b8 238
.b8 200
.b8 171
.b8 2
.b8 2
.b8 116,105,100,95,103,108,111,98,97,108
.b8 0
.b8 10
.b8 108
.b32 10296
.b8 27
.b8 5
.b8 144
.b8 178
.b8 228
.b8 149
.b8 1
.b8 2
.b8 116,105,100
.b8 0
.b8 10
.b8 109
.b32 10296
.b8 27
.b8 6
.b8 144
.b8 184
.b8 238
.b8 200
.b8 171
.b8 2
.b8 2
.b8 98
.b8 0
.b8 10
.b8 111
.b32 10296
.b8 28
.b32 .debug_loc+284
.b8 110,110,122,65
.b8 0
.b8 10
.b8 114
.b32 9285
.b8 28
.b32 .debug_loc+402
.b8 110,110,122,66
.b8 0
.b8 10
.b8 115
.b32 9285
.b8 28
.b32 .debug_loc+468
.b8 110,95,105,110,116,101,114,115,101,99,116
.b8 0
.b8 10
.b8 116
.b32 9285
.b8 27
.b8 5
.b8 144
.b8 179
.b8 228
.b8 149
.b8 1
.b8 2
.b8 112,97,114,116,115
.b8 0
.b8 10
.b8 120
.b32 10296
.b8 28
.b32 .debug_loc+535
.b8 112,97,105,114,95,105,100
.b8 0
.b8 10
.b8 105
.b32 9285
.b8 9
.b8 95,90,78,49,56,99,111,111,112,101,114,97,116,105,118,101,95,103,114,111,117,112,115,52,95,95,118,49,49,55,116,104,114,101,97,100,95,98,108,111
.b8 99,107,95,116,105,108,101,73,76,106,51,50,69,118,69,69
.b8 0
.b8 16
.b8 3
.b8 66
.b8 6
.b8 15
.b8 95,95,98,95,78,49,56,99,111,111,112,101,114,97,116,105,118,101,95,103,114,111,117,112,115,52,95,95,118,49,55,100,101,116,97,105,108,115,50,50
.b8 116,104,114,101,97,100,95,98,108,111,99,107,95,116,105,108,101,95,105,109,112,108,73,76,106,51,50,69,118,76,98,48,69,69,69
.b8 0
.b32 13569
.b8 2
.b8 35
.b8 0
.b8 9
.b8 95,90,78,49,56,99,111,111,112,101,114,97,116,105,118,101,95,103,114,111,117,112,115,52,95,95,118,49,55,100,101,116,97,105,108,115,50,50,116,104
.b8 114,101,97,100,95,98,108,111,99,107,95,116,105,108,101,95,105,109,112,108,73,76,106,51,50,69,118,76,98,48,69,69,69
.b8 0
.b8 16
.b8 3
.b8 31
.b8 6
.b8 15
.b8 95,95,98,95,78,49,56,99,111,111,112,101,114,97,116,105,118,101,95,103,114,111,117,112,115,52,95,95,118,49,51,49,95,95,115,105,110,103,108,101
.b8 95,119,97,114,112,95,116,104,114,101,97,100,95,98,108,111,99,107,95,116,105,108,101,73,76,106,51,50,69,118,69,69
.b8 0
.b32 13729
.b8 2
.b8 35
.b8 0
.b8 9
.b8 95,90,78,49,56,99,111,111,112,101,114,97,116,105,118,101,95,103,114,111,117,112,115,52,95,95,118,49,51,49,95,95,115,105,110,103,108,101,95,119
.b8 97,114,112,95,116,104,114,101,97,100,95,98,108,111,99,107,95,116,105,108,101,73,76,106,51,50,69,118,69,69
.b8 0
.b8 16
.b8 3
.b8 114
.b8 4
.b8 15
.b8 95,95,98,95,78,49,56,99,111,111,112,101,114,97,116,105,118,101,95,103,114,111,117,112,115,52,95,95,118,49,49,55,116,104,114,101,97,100,95,103
.b8 114,111,117,112,95,98,97,115,101,73,76,106,49,69,69,69
.b8 0
.b32 13870
.b8 2
.b8 35
.b8 0
.b8 14
.b8 95,90,78,49,56,99,111,111,112,101,114,97,116,105,118,101,95,103,114,111,117,112,115,52,95,95,118,49,49,55,116,104,114,101,97,100,95,103,114,111
.b8 117,112,95,98,97,115,101,73,76,106,49,69,69,69
.b8 0
.b8 16
.b8 3
.b8 162
.b8 15
.b8 95,95,98,95,78,49,56,99,111,111,112,101,114,97,116,105,118,101,95,103,114,111,117,112,115,52,95,95,118,49,49,50,116,104,114,101,97,100,95,103
.b8 114,111,117,112,69
.b8 0
.b32 13983
.b8 2
.b8 35
.b8 0
.b8 14
.b8 95,90,78,49,56,99,111,111,112,101,114,97,116,105,118,101,95,103,114,111,117,112,115,52,95,95,118,49,49,50,116,104,114,101,97,100,95,103,114,111
.b8 117,112,69
.b8 0
.b8 16
.b8 3
.b8 87
.b8 10
.b8 95,100,97,116,97
.b8 0
.b32 14047
.b8 3
.b8 131
.b8 2
.b8 35
.b8 0
.b8 29
.b8 95,90,78,49,56,99,111,111,112,101,114,97,116,105,118,101,95,103,114,111,117,112,115,52,95,95,118,49,49,50,116,104,114,101,97,100,95,103,114,111
.b8 117,112,85,116,95,69
.b8 0
.b8 16
.b8 3
.b8 124
.b8 10
.b8 103,114,111,117,112
.b8 0
.b32 14114
.b8 3
.b8 125
.b8 2
.b8 35
.b8 0
.b8 14
.b8 95,90,78,49,56,99,111,111,112,101,114,97,116,105,118,101,95,103,114,111,117,112,115,52,95,95,118,49,49,50,116,104,114,101,97,100,95,103,114,111
.b8 117,112,49,48,103,114,111,117,112,95,100,97,116,97,69
.b8 0
.b8 4
.b8 3
.b8 90
.b8 30
.b8 95,117,110,117,115,101,100
.b8 0
.b32 455
.b8 3
.b8 91
.b8 4
.b8 1
.b8 31
.b8 2
.b8 35
.b8 0
.b8 30
.b8 116,121,112,101
.b8 0
.b32 455
.b8 3
.b8 92
.b8 4
.b8 7
.b8 24
.b8 2
.b8 35
.b8 0
.b8 31
.b32 455
.b8 3
.b8 92
.b8 4
.b8 0
.b8 32
.b8 2
.b8 35
.b8 4
.b8 0
.b8 10
.b8 99,111,97,108,101,115,99,101,100
.b8 0
.b32 14247
.b8 3
.b8 126
.b8 2
.b8 35
.b8 0
.b8 14
.b8 95,90,78,49,56,99,111,111,112,101,114,97,116,105,118,101,95,103,114,111,117,112,115,52,95,95,118,49,49,50,116,104,114,101,97,100,95,103,114,111
.b8 117,112,55,116,103,95,100,97,116,97,69
.b8 0
.b8 16
.b8 3
.b8 108
.b8 30
.b8 105,115,95,116,105,108,101,100
.b8 0
.b32 455
.b8 3
.b8 109
.b8 4
.b8 1
.b8 31
.b8 2
.b8 35
.b8 0
.b8 30
.b8 116,121,112,101
.b8 0
.b32 455
.b8 3
.b8 110
.b8 4
.b8 7
.b8 24
.b8 2
.b8 35
.b8 0
.b8 30
.b8 115,105,122,101
.b8 0
.b32 455
.b8 3
.b8 111
.b8 4
.b8 24
.b8 0
.b8 2
.b8 35
.b8 0
.b8 30
.b8 109,101,116,97,71,114,111,117,112,83,105,122,101
.b8 0
.b32 455
.b8 3
.b8 113
.b8 4
.b8 16
.b8 16
.b8 2
.b8 35
.b8 4
.b8 30
.b8 109,101,116,97,71,114,111,117,112,82,97,110,107
.b8 0
.b32 455
.b8 3
.b8 114
.b8 4
.b8 16
.b8 0
.b8 2
.b8 35
.b8 4
.b8 10
.b8 109,97,115,107
.b8 0
.b32 455
.b8 3
.b8 116
.b8 2
.b8 35
.b8 8
.b8 10
.b8 95,114,101,115
.b8 0
.b32 455
.b8 3
.b8 118
.b8 2
.b8 35
.b8 12
.b8 0
.b8 10
.b8 103,114,105,100
.b8 0
.b32 14461
.b8 3
.b8 127
.b8 2
.b8 35
.b8 0
.b8 14
.b8 95,90,78,49,56,99,111,111,112,101,114,97,116,105,118,101,95,103,114,111,117,112,115,52,95,95,118,49,49,50,116,104,114,101,97,100,95,103,114,111
.b8 117,112,55,103,103,95,100,97,116,97,69
.b8 0
.b8 8
.b8 3
.b8 95
.b8 10
.b8 103,114,105,100,87,115
.b8 0
.b32 10370
.b8 3
.b8 96
.b8 2
.b8 35
.b8 0
.b8 32
.b8 95,90,78,49,56,99,111,111,112,101,114,97,116,105,118,101,95,103,114,111,117,112,115,52,95,95,118,49,55,100,101,116,97,105,108,115,49,52,103,114
.b8 105,100,95,119,111,114,107,115,112,97,99,101,69
.b8 0
.b8 0
.b8 9
.b8 86
.b8 0
.b8 0
.b8 0
.b8 0
.b8 0
.b8 0
.b8 0
.b8 33
.b32 11663
.b64 $L__tmp17
.b64 $L__tmp19
.b8 10
.b8 118
.b8 34
.b32 11569
.b64 $L__tmp17
.b64 $L__tmp18
.b8 3
.b8 170
.b8 2
.b8 35
.b8 6
.b8 11
.b8 3
.b64 __local_depot0
.b8 35
.b8 80
.b32 11638
.b8 0
.b8 0
.b8 33
.b32 11740
.b64 $L__tmp20
.b64 $L__tmp22
.b8 10
.b8 118
.b8 35
.b8 6
.b8 11
.b8 3
.b64 __local_depot0
.b8 35
.b8 64
.b32 11894
.b8 34
.b32 11915
.b64 $L__tmp21
.b64 $L__tmp22
.b8 3
.b8 148
.b8 6
.b8 35
.b8 6
.b8 11
.b8 3
.b64 __local_depot0
.b8 35
.b8 48
.b32 12038
.b8 35
.b8 6
.b8 11
.b8 3
.b64 __local_depot0
.b8 35
.b8 56
.b32 12048
.b8 0
.b8 0
.b8 33
.b32 12073
.b64 $L__tmp23
.b64 $L__tmp26
.b8 10
.b8 118
.b8 35
.b8 6
.b8 11
.b8 3
.b64 __local_depot0
.b8 35
.b8 24
.b32 12238
.b8 34
.b32 12268
.b64 $L__tmp24
.b64 $L__tmp25
.b8 3
.b8 76
.b8 6
.b8 35
.b8 6
.b8 11
.b8 3
.b64 __local_depot0
.b8 35
.b8 8
.b32 12405
.b8 35
.b8 6
.b8 11
.b8 3
.b64 __local_depot0
.b8 35
.b8 16
.b32 12415
.b8 0
.b8 0
.b8 25
.b64 $L__tmp32
.b64 $L__tmp170
.b8 27
.b8 7
.b8 144
.b8 178
.b8 226
.b8 144
.b8 147
.b8 215
.b8 4
.b8 2
.b8 105
.b8 0
.b8 10
.b8 130
.b32 9285
.b8 27
.b8 7
.b8 144
.b8 185
.b8 240
.b8 144
.b8 147
.b8 215
.b8 4
.b8 2
.b8 106
.b8 0
.b8 10
.b8 131
.b32 9285
.b8 27
.b8 7
.b8 144
.b8 179
.b8 226
.b8 144
.b8 147
.b8 215
.b8 4
.b8 2
.b8 120,115,116,97,114,116
.b8 0
.b8 10
.b8 133
.b32 9285
.b8 27
.b8 7
.b8 144
.b8 180
.b8 226
.b8 144
.b8 147
.b8 215
.b8 4
.b8 2
.b8 120,101,110,100
.b8 0
.b8 10
.b8 134
.b32 9285
.b8 27
.b8 7
.b8 144
.b8 182
.b8 226
.b8 144
.b8 147
.b8 215
.b8 4
.b8 2
.b8 121,115,116,97,114,116
.b8 0
.b8 10
.b8 137
.b32 9285
.b8 27
.b8 7
.b8 144
.b8 183
.b8 226
.b8 144
.b8 147
.b8 215
.b8 4
.b8 2
.b8 121,101,110,100
.b8 0
.b8 10
.b8 138
.b32 9285
.b8 28
.b32 .debug_loc+678
.b8 110,120,121
.b8 0
.b8 10
.b8 151
.b32 9285
.b8 27
.b8 5
.b8 144
.b8 181
.b8 228
.b8 149
.b8 1
.b8 2
.b8 119,111,114,107,95,112,101,114,95,116,104,114,101,97,100
.b8 0
.b8 10
.b8 153
.b32 10296
.b8 28
.b32 .debug_loc+771
.b8 100,105,97,103
.b8 0
.b8 10
.b8 154
.b32 10296
.b8 27
.b8 5
.b8 144
.b8 183
.b8 228
.b8 149
.b8 1
.b8 2
.b8 100,105,97,103,95,101,110,100
.b8 0
.b8 10
.b8 155
.b32 10296
.b8 28
.b32 .debug_loc+908
.b8 120,95,109,105,110
.b8 0
.b8 10
.b8 158
.b32 10296
.b8 28
.b32 .debug_loc+1265
.b8 120,95,109,97,120
.b8 0
.b8 10
.b8 159
.b32 10296
.b8 28
.b32 .debug_loc+1673
.b8 120,99,111,111,114,100
.b8 0
.b8 10
.b8 171
.b32 10296
.b8 28
.b32 .debug_loc+1737
.b8 121,99,111,111,114,100
.b8 0
.b8 10
.b8 172
.b32 10296
.b8 27
.b8 6
.b8 144
.b8 178
.b8 228
.b8 200
.b8 171
.b8 2
.b8 2
.b8 116,120,95,115,116,97,114,116
.b8 0
.b8 10
.b8 177
.b32 10296
.b8 27
.b8 6
.b8 144
.b8 179
.b8 228
.b8 200
.b8 171
.b8 2
.b8 2
.b8 116,121,95,115,116,97,114,116
.b8 0
.b8 10
.b8 178
.b32 10296
.b8 27
.b8 6
.b8 144
.b8 182
.b8 230
.b8 200
.b8 171
.b8 2
.b8 2
.b8 116,120,95,101,110,100
.b8 0
.b8 10
.b8 203
.b32 10296
.b8 27
.b8 6
.b8 144
.b8 183
.b8 230
.b8 200
.b8 171
.b8 2
.b8 2
.b8 116,121,95,101,110,100
.b8 0
.b8 10
.b8 204
.b32 10296
.b8 28
.b32 .debug_loc+1801
.b8 99,105,106
.b8 0
.b8 10
.b8 208
.b32 10330
.b8 28
.b32 .debug_loc+2184
.b8 99,105,106,95,101,120,105,115,116,115
.b8 0
.b8 10
.b8 213
.b32 10296
.b8 28
.b32 .debug_loc+2469
.b8 107
.b8 0
.b8 10
.b8 217
.b32 10296
.b8 28
.b32 .debug_loc+2705
.b8 108
.b8 0
.b8 10
.b8 218
.b32 10296
.b8 27
.b8 6
.b8 144
.b8 182
.b8 232
.b8 200
.b8 171
.b8 2
.b8 2
.b8 97,107,105
.b8 0
.b8 10
.b8 206
.b32 10330
.b8 27
.b8 6
.b8 144
.b8 183
.b8 232
.b8 200
.b8 171
.b8 2
.b8 2
.b8 98,107,106
.b8 0
.b8 10
.b8 207
.b32 10330
.b8 25
.b64 $L__tmp54
.b64 $L__tmp67
.b8 27
.b8 6
.b8 144
.b8 179
.b8 226
.b8 200
.b8 171
.b8 2
.b8 2
.b8 112,105,118,111,116
.b8 0
.b8 10
.b8 163
.b32 10296
.b8 0
.b8 25
.b64 $L__tmp84
.b64 $L__tmp97
.b8 27
.b8 6
.b8 144
.b8 185
.b8 228
.b8 200
.b8 171
.b8 2
.b8 2
.b8 112,105,118,111,116
.b8 0
.b8 10
.b8 187
.b32 10296
.b8 0
.b8 25
.b64 $L__tmp117
.b64 $L__tmp122
.b8 27
.b8 7
.b8 144
.b8 185
.b8 224
.b8 196
.b8 145
.b8 215
.b8 4
.b8 2
.b8 116
.b8 0
.b8 10
.b8 232
.b32 10330
.b8 0
.b8 34
.b32 12586
.b64 $L__tmp149
.b64 $L__tmp153
.b8 10
.b8 14
.b8 1
.b8 35
.b8 6
.b8 11
.b8 3
.b64 __local_depot0
.b8 35
.b8 0
.b32 12680
.b8 36
.b8 6
.b8 144
.b8 183
.b8 242
.b8 200
.b8 171
.b8 2
.b8 2
.b32 12690
.b8 25
.b64 $L__tmp149
.b64 $L__tmp153
.b8 37
.b8 7
.b8 144
.b8 177
.b8 224
.b8 196
.b8 145
.b8 215
.b8 4
.b8 2
.b32 12709
.b8 34
.b32 12445
.b64 $L__tmp149
.b64 $L__tmp151
.b8 3
.b8 57
.b8 4
.b8 25
.b64 $L__tmp149
.b64 $L__tmp151
.b8 37
.b8 6
.b8 144
.b8 185
.b8 242
.b8 200
.b8 171
.b8 2
.b8 2
.b32 12554
.b8 0
.b8 0
.b8 0
.b8 0
.b8 0
.b8 0
.b8 0
.b8 38
.b8 95,90,78,49,56,99,111,111,112,101,114,97,116,105,118,101,95,103,114,111,117,112,115,52,95,95,118,49,55,100,101,116,97,105,108,115,57,116,101,109
.b8 112,108,97,116,101,115,55,102,111,114,119,97,114,100,73,82,105,69,69,79,84,95,82,78,83,50,95,49,54,114,101,109,111,118,101,95,114,101,102,101
.b8 114,101,110,99,101,73,83,53,95,69,52,116,121,112,101,69
.b8 0
.b8 102,111,114,119,97,114,100,60,105,110,116,51,50,95,116,32,38,62
.b8 0
.b8 4
.b8 231
.b32 15755
.b8 1
.b8 39
.b8 116
.b8 0
.b8 4
.b8 231
.b32 15760
.b8 0
.b8 20
.b32 10330
.b8 20
.b32 11477
.b8 16
.b8 95,90,78,75,49,56,99,111,111,112,101,114,97,116,105,118,101,95,103,114,111,117,112,115,52,95,95,118,49,51,54,95,95,115,116,97,116,105,99,95
.b8 115,105,122,101,95,116,104,114,101,97,100,95,98,108,111,99,107,95,116,105,108,101,95,98,97,115,101,73,76,106,51,50,69,69,57,115,104,102,108,95
.b8 100,111,119,110,73,82,105,105,69,69,84,48,95,79,84,95,106
.b8 0
.b8 115,104,102,108,95,100,111,119,110,60,105,110,116,51,50,95,116,32,38,44,116,121,112,101,62
.b8 0
.b8 3
.b8 14
.b8 4
.b32 11042
.b8 1
.b8 17
.b8 116,104,105,115
.b8 0
.b32 12731
.b8 19
.b8 101,108,101,109
.b8 0
.b8 3
.b8 14
.b8 4
.b32 15755
.b8 19
.b8 100,101,108,116,97
.b8 0
.b8 3
.b8 14
.b8 4
.b32 455
.b8 0
.b8 16
.b8 95,90,78,49,56,99,111,111,112,101,114,97,116,105,118,101,95,103,114,111,117,112,115,52,95,95,118,49,55,100,101,116,97,105,108,115,52,116,105,108
.b8 101,49,53,95,110,97,116,105,118,101,95,115,104,117,102,102,108,101,57,115,104,102,108,95,100,111,119,110,73,105,69,69,84,95,83,53,95,106,106,106
.b8 0
.b8 115,104,102,108,95,100,111,119,110,60,105,110,116,51,50,95,116,62
.b8 0
.b8 5
.b8 69
.b8 1
.b32 10330
.b8 1
.b8 19
.b8 101,108,101,109
.b8 0
.b8 5
.b8 70
.b8 1
.b32 10330
.b8 19
.b8 103,77,97,115,107
.b8 0
.b8 5
.b8 70
.b8 1
.b32 455
.b8 19
.b8 100,101,108,116,97
.b8 0
.b8 5
.b8 70
.b8 1
.b32 455
.b8 19
.b8 116,104,114,101,97,100,115
.b8 0
.b8 5
.b8 70
.b8 1
.b32 455
.b8 0
.b8 23
.b64 $L__func_begin1
.b64 $L__func_end1
.b8 1
.b8 156
.b8 95,90,49,51,71,66,95,114,101,100,117,99,101,95,115,117,109,73,105,76,105,51,50,69,69,84,95,78,49,56,99,111,111,112,101,114,97,116,105,118
.b8 101,95,103,114,111,117,112,115,52,95,95,118,49,49,55,116,104,114,101,97,100,95,98,108,111,99,107,95,116,105,108,101,73,88,84,48,95,69,118,69
.b8 69,83,48,95
.b8 0
.b8 71,66,95,114,101,100,117,99,101,95,115,117,109,60,105,110,116,51,50,95,116,44,51,50,62
.b8 0
.b8 10
.b8 48
.b32 10330
.b8 1
.b8 40
.b8 6
.b8 11
.b8 3
.b64 __local_depot1
.b8 35
.b8 8
.b8 103
.b8 0
.b8 10
.b8 48
.b32 13423
.b8 40
.b8 6
.b8 11
.b8 3
.b64 __local_depot1
.b8 35
.b8 24
.b8 118,97,108
.b8 0
.b8 10
.b8 48
.b32 10330
.b8 25
.b64 $L__tmp179
.b64 $L__tmp201
.b8 28
.b32 .debug_loc+2941
.b8 105
.b8 0
.b8 10
.b8 52
.b32 10296
.b8 25
.b64 $L__tmp186
.b64 $L__tmp198
.b8 27
.b8 6
.b8 144
.b8 176
.b8 228
.b8 200
.b8 171
.b8 2
.b8 2
.b8 110,101,120,116
.b8 0
.b8 10
.b8 54
.b32 10330
.b8 33
.b32 15765
.b64 $L__tmp186
.b64 $L__tmp196
.b8 10
.b8 54
.b8 35
.b8 6
.b8 11
.b8 3
.b64 __local_depot1
.b8 35
.b8 0
.b32 15898
.b8 36
.b8 6
.b8 144
.b8 182
.b8 200
.b8 201
.b8 171
.b8 2
.b8 2
.b32 15908
.b8 36
.b8 5
.b8 144
.b8 184
.b8 228
.b8 149
.b8 1
.b8 2
.b32 15921
.b8 34
.b32 15621
.b64 $L__tmp186
.b64 $L__tmp187
.b8 3
.b8 16
.b8 4
.b8 36
.b8 6
.b8 144
.b8 183
.b8 200
.b8 201
.b8 171
.b8 2
.b8 2
.b32 15745
.b8 0
.b8 34
.b32 12445
.b64 $L__tmp188
.b64 $L__tmp193
.b8 3
.b8 16
.b8 4
.b8 25
.b64 $L__tmp188
.b64 $L__tmp193
.b8 37
.b8 6
.b8 144
.b8 177
.b8 226
.b8 200
.b8 171
.b8 2
.b8 2
.b32 12554
.b8 0
.b8 0
.b8 34
.b32 15936
.b64 $L__tmp194
.b64 $L__tmp195
.b8 3
.b8 15
.b8 4
.b8 36
.b8 6
.b8 144
.b8 179
.b8 226
.b8 200
.b8 171
.b8 2
.b8 2
.b32 16045
.b8 36
.b8 6
.b8 144
.b8 180
.b8 226
.b8 200
.b8 171
.b8 2
.b8 2
.b32 16058
.b8 36
.b8 6
.b8 144
.b8 181
.b8 226
.b8 200
.b8 171
.b8 2
.b8 2
.b32 16072
.b8 36
.b8 6
.b8 144
.b8 183
.b8 226
.b8 200
.b8 171
.b8 2
.b8 2
.b32 16086
.b8 0
.b8 0
.b8 0
.b8 0
.b8 0
.b8 41
.b64 $L__func_begin2
.b64 $L__func_end2
.b8 1
.b8 156
.b8 95,90,78,52,100,105,109,51,67,49,69,53,117,105,110,116,51
.b8 0
.b8 100,105,109,51
.b8 0
.b8 7
.b8 211
.b8 3
.b32 10149
.b8 1
.b8 42
.b8 6
.b8 144
.b8 177
.b8 200
.b8 201
.b8 171
.b8 2
.b8 2
.b8 116,104,105,115
.b8 0
.b32 16695
.b8 43
.b8 6
.b8 11
.b8 3
.b64 __local_depot2
.b8 35
.b8 0
.b8 118
.b8 0
.b8 7
.b8 211
.b8 3
.b32 10480
.b8 0
.b8 4
.b32 10330
.b32 12
.b8 7
.b32 16700
.b8 4
.b32 10379
.b32 12
.b8 0
	}
	.section	.debug_macinfo
	{
.b8 0

	}
 

---------------------------------------
instantiated kernel
---------------------------------------
--- Linker for void AxB_dot3_phase3_mp<int, int, int>(long long, long long, long long*, GB_Matrix_opaque*, GB_Matrix_opaque*, GB_Matrix_opaque*, GB_Matrix_opaque*, int) ---
---------------------------------------
ptxas info    : 59 bytes gmem
ptxas info    : Function properties for _Z13GB_reduce_sumIiLi32EET_N18cooperative_groups4__v117thread_block_tileIXT0_EvEES0_
ptxas         .     88 bytes stack frame, 52 bytes spill stores, 52 bytes spill loads
ptxas info    : Function properties for _ZN18cooperative_groups4__v117thread_group_baseILj4EEC2Ev
ptxas         .     16 bytes stack frame, 8 bytes spill stores, 8 bytes spill loads
ptxas info    : Function properties for _ZN18cooperative_groups4__v17details22thread_block_tile_implILj32EvLb0EEC2ILj32ENS0_12thread_blockELb0EEERKNS2_IXT_ET0_XT1_EEE
ptxas         .     104 bytes stack frame, 24 bytes spill stores, 24 bytes spill loads
ptxas info    : Function properties for _ZN18cooperative_groups4__v117thread_block_tileILj32ENS0_12thread_blockEEC2ERKS2_
ptxas         .     24 bytes stack frame, 8 bytes spill stores, 8 bytes spill loads
ptxas info    : Compiling entry function '_Z18AxB_dot3_phase3_mpIiiiEvxxPxP16GB_Matrix_opaqueS2_S2_S2_i' for 'sm_70'
ptxas info    : Function properties for _Z18AxB_dot3_phase3_mpIiiiEvxxPxP16GB_Matrix_opaqueS2_S2_S2_i
ptxas         .     160 bytes stack frame, 0 bytes spill stores, 0 bytes spill loads
ptxas info    : Used 138 registers, 412 bytes cmem[0]
ptxas info    : Function properties for _ZN4dim3C1E5uint3
ptxas         .     16 bytes stack frame, 0 bytes spill stores, 0 bytes spill loads
ptxas info    : Function properties for _ZN18cooperative_groups4__v112thread_groupC2Ej
ptxas         .     8 bytes stack frame, 0 bytes spill stores, 0 bytes spill loads
ptxas info    : Function properties for _ZN18cooperative_groups4__v117thread_group_baseILj1EEC2Ev
ptxas         .     16 bytes stack frame, 8 bytes spill stores, 8 bytes spill loads
ptxas info    : Function properties for _ZN18cooperative_groups4__v131__single_warp_thread_block_tileILj32EvEC2Ejj
ptxas         .     32 bytes stack frame, 24 bytes spill stores, 24 bytes spill loads
ptxas info    : Function properties for _ZN18cooperative_groups4__v131__single_warp_thread_block_tileILj32ENS0_12thread_blockEEC2Ev
ptxas         .     8 bytes stack frame, 0 bytes spill stores, 0 bytes spill loads
ptxas info    : Function properties for _ZN18cooperative_groups4__v17details22thread_block_tile_implILj32ENS0_12thread_blockELb0EEC2ERKS3_
ptxas         .     24 bytes stack frame, 8 bytes spill stores, 8 bytes spill loads
ptxas info    : Function properties for _Z9atomicAddPyy
ptxas         .     8 bytes stack frame, 8 bytes spill stores, 8 bytes spill loads
ptxas info    : Function properties for _Z13__ballot_syncji
ptxas         .     8 bytes stack frame, 8 bytes spill stores, 8 bytes spill loads
ptxas info    : Function properties for _Z16__shfl_down_syncjiji
ptxas         .     8 bytes stack frame, 8 bytes spill stores, 8 bytes spill loads
ptxas info    : Function properties for __ullAtomicAdd
ptxas         .     0 bytes stack frame, 0 bytes spill stores, 0 bytes spill loads
info    : 59 bytes gmem
info    : Function properties for '_Z18AxB_dot3_phase3_mpIiiiEvxxPxP16GB_Matrix_opaqueS2_S2_S2_i':
info    : used 138 registers, 320 stack, 0 bytes smem, 412 bytes cmem[0], 0 bytes lmem


---------------------------------------
completed func()
Inside serialize!!!!
 compiled serialized prog AxB_dot3_phase3_mp_int32_t_int32_t_int32_t
writing prog in file /home/cjnolet/.SuiteSparse/GraphBLAS/6.3.0/AxB_dot3_phase3_mp_int32_t_int32_t_int32_t
---------------------------------------
--- Linker for void AxB_dot3_phase3_mp<int, int, int>(long long, long long, long long*, GB_Matrix_opaque*, GB_Matrix_opaque*, GB_Matrix_opaque*, GB_Matrix_opaque*, int) ---
---------------------------------------
info    : 59 bytes gmem
info    : Function properties for '_Z18AxB_dot3_phase3_mpIiiiEvxxPxP16GB_Matrix_opaqueS2_S2_S2_i':
info    : used 138 registers, 320 stack, 0 bytes smem, 412 bytes cmem[0], 0 bytes lmem


---------------------------------------
Launching _Z18AxB_dot3_phase3_mpIiiiEvxxPxP16GB_Matrix_opaqueS2_S2_S2_i<<<1,32,0,0>>>(long,long,long*,GB_Matrix_opaque*,GB_Matrix_opaque*,GB_Matrix_opaque*,GB_Matrix_opaque*,int)
warp 0 zombie count = 27, nzombies = 0
 Czombie = 27
Printing bucketp
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
Done.
returned from kernel 2222.69ms

  32x32 GraphBLAS int32_t matrix, sparse (jumbled) by row
  sparsity control: sparse only
  C GPU, 32 entries, memory: 1.1 KB
  pending tuples: 0 max pending: 0 zombies: 27

    (0,6) zombie
    (1,1)   1
    (3,12) zombie
    (3,17) zombie
    (4,19) zombie
    (5,19) zombie
    (6,22) zombie
    (6,24)   0
    (8,10) zombie
    (9,19) zombie
    (9,31)   0
    (11,13) zombie
    (12,11) zombie
    (14,24) zombie
    (15,30) zombie
    (16,20)   0
    (17,30) zombie
    (18,18) zombie
    (19,1) zombie
    (20,25) zombie
    (21,24) zombie
    (21,27) zombie
    (22,30) zombie
    (23,30) zombie
    (24,14) zombie
    (25,4)   1
    (26,15) zombie
    (27,28) zombie
    (28,16) zombie
    ...
Not using cuda path. M_is_hypersparse: 0, A->iso: 0, B->iso: 0, A_BITMAP: 0, B_BITMAP: 0, GB_IS_FULL(A): 0, GB_IS_FULL(B): 0, semiring header size: 32
 rmm_wrap_alloc 512 bytes
 rmm_wrap_alloc 512 bytes
 rmm_wrap_alloc 512 bytes

  32x32 GraphBLAS bool matrix, sparse by row
  sparsity control: sparse only
  M actual, 32 entries, memory: 1.0 KB

    (0,6)   1
    (1,1)   1
    (3,12)   1
    (3,17)   1
    (4,19)   1
    (5,19)   1
    (6,22)   1
    (6,24)   1
    (8,10)   1
    (9,19)   1
    (9,31)   1
    (11,13)   1
    (12,11)   1
    (14,24)   1
    (15,30)   1
    (16,20)   1
    (17,30)   1
    (18,18)   1
    (19,1)   1
    (20,25)   1
    (21,24)   1
    (21,27)   1
    (22,30)   1
    (23,30)   1
    (24,14)   1
    (25,4)   1
    (26,15)   1
    (27,28)   1
    (28,16)   1
    ...

  32x32 GraphBLAS int32_t matrix, sparse by row
  sparsity control: sparse only
  C GPU, 5 entries, memory: 864 bytes

    (1,1)   1
    (6,24)   0
    (9,31)   0
    (16,20)   0
    (25,4)   1


  32x32 GraphBLAS int32_t matrix, sparse by row
  C_actual, 5 entries, memory: 864 bytes

    (1,1)   1
    (6,24)   0
    (9,31)   0
    (16,20)   0
    (25,4)   1

 rmm_wrap_alloc 256 bytes

  32x32 GraphBLAS double matrix, sparse by row
  Diff actual, 5 entries, memory: 896 bytes

    (1,1)    0
    (6,24)    0
    (9,31)    0
    (16,20)    0
    (25,4)    0


  32x32 GraphBLAS bool matrix, sparse by row
  T actual, 5 entries, memory: 840 bytes

    (1,1)   1
    (6,24)   1
    (9,31)   1
    (16,20)   1
    (25,4)   1
 work:5 gpus:0 [       OK ] AxB_dot3_tests_PLUS_TIMES_3.tinyxtinyPLUS_TIMES_Cint32_tMboolAint32_tBint32_tXint32_tYint32_tZint32_t (2249 ms)
[ RUN      ] AxB_dot3_tests_PLUS_TIMES_3.smallxsmallPLUS_TIMES_Cint32_tMboolAint32_tBint32_tXint32_tYint32_tZint32_t
Getting test data
Creating problem gen
filling matrices
inside fill, using seed 4567
fill_random nrows=1024ncols=1024 need 1024 values, invsparse = 1024
fill_random after alloc values
vdim ready 
vlen ready 
ready to fill p
filling sparse
1024 nonzeroes left to fill..
35 nonzeroes left to fill..
 rmm_wrap_alloc 16384 bytes
inside fill, using seed 4567
fill_random nrows=1024ncols=1024 need 1024 values, invsparse = 1024
fill_random after alloc values
vdim ready 
vlen ready 
ready to fill p
filling sparse
1024 nonzeroes left to fill..
35 nonzeroes left to fill..
 rmm_wrap_alloc 16384 bytes
inside fill, using seed 543210
fill_random nrows=1024ncols=1024 need 1048576 values, invsparse = 1
fill_random after alloc values
vdim ready 
vlen ready 
ready to fill p
filling dense
 rmm_wrap_alloc 16384 bytes
 rmm_wrap_alloc 16384 bytes
 rmm_wrap_alloc 524288 bytes
 rmm_wrap_alloc 524288 bytes
 rmm_wrap_alloc 1048576 bytes
 rmm_wrap_alloc 1048576 bytes
 rmm_wrap_alloc 524288 bytes
 rmm_wrap_alloc 2097152 bytes
 rmm_wrap_alloc 2097152 bytes
 rmm_wrap_alloc 1048576 bytes
 rmm_wrap_alloc 4194304 bytes
 rmm_wrap_alloc 4194304 bytes
 rmm_wrap_alloc 2097152 bytes
 rmm_wrap_alloc 8388608 bytes
 rmm_wrap_alloc 8388608 bytes
 rmm_wrap_alloc 4194304 bytes
 rmm_wrap_alloc 8388608 bytes
 rmm_wrap_alloc 4194304 bytes
 rmm_wrap_alloc 8388608 bytes
inside fill, using seed 32
fill_random nrows=1024ncols=1024 need 1048576 values, invsparse = 1
fill_random after alloc values
vdim ready 
vlen ready 
ready to fill p
filling dense
 rmm_wrap_alloc 16384 bytes
 rmm_wrap_alloc 524288 bytes
 rmm_wrap_alloc 524288 bytes
 rmm_wrap_alloc 1048576 bytes
 rmm_wrap_alloc 1048576 bytes
 rmm_wrap_alloc 524288 bytes
 rmm_wrap_alloc 2097152 bytes
 rmm_wrap_alloc 2097152 bytes
 rmm_wrap_alloc 1048576 bytes
 rmm_wrap_alloc 4194304 bytes
 rmm_wrap_alloc 4194304 bytes
 rmm_wrap_alloc 2097152 bytes
 rmm_wrap_alloc 8388608 bytes
 rmm_wrap_alloc 8388608 bytes
 rmm_wrap_alloc 4194304 bytes
 rmm_wrap_alloc 8388608 bytes
 rmm_wrap_alloc 4194304 bytes
 rmm_wrap_alloc 8388608 bytes
1024 slots to fill
all pairs to bucket 1, no filling
done assigning buckets
Building semiring factgory
 calling stringify semiring: 0x7f1ff5305700
inside enumify: 0x7f1ff5305700

    GraphBLAS Semiring: semiring (user-defined)
    GraphBLAS Monoid: semiring->add (built-in)
    GraphBLAS BinaryOp: monoid->op (built-in) z=plus(x,y)
    GraphBLAS type: ztype int32_t size: 4
    GraphBLAS type: xtype int32_t size: 4
    GraphBLAS type: ytype int32_t size: 4
    identity: [   0 ] 

    GraphBLAS BinaryOp: semiring->multiply (built-in) z=times(x,y)
    GraphBLAS type: ztype int32_t size: 4
    GraphBLAS type: xtype int32_t size: 4
    GraphBLAS type: ytype int32_t size: 4
Getting semiring add
Getting semiring mult
Getting semiring add op
Getting types
Getting opcodes
Getting typecodes
Performing asserts
Invoking boolean rename
Invoking boolean rename
Invoking enumify binop
e 14
Invoking enumify monoid
Calling enumify binop
Inside plus binop code
e 11
Calling enumify identity
Calling enumify terminal
Done enumify monoid
Done invoking enumify monoid
atype
btype
ctype
Invoking enumify_mask, mtype 0x7f2028b57180
GB_enumify_mask gets mcode: 1 Mask_struct: 0 Mask_comp: 0
got mask_ecode: 4
constructing semiring scode
before: add_ecode: 11, id_ecode: 0, term_ecode: 31, mult_ecode: 14, flipxy: 0, zcode: 6, xcode: 6, ycode: 6, mask_ecode: 4, ccode: 6, acode: 6, bcode: 6, csparsity: 0, msparsity: 0, asparsity: 0, bsparsity: 0
serialized_scode: 397409434374399488
done enumify semiring
scode=397409434374399488
done stringify semiring
 returned from  stringify semiring
 rmm_wrap_alloc 256 bytes
 rmm_wrap_alloc 8192 bytes
1024 slots to fill
all pairs to bucket 1, no filling
done assigning buckets
bucket 1 has 1024 dots to do
LAUNCHING BUCKET CODE: 1
INside get cached file
looking for prog in file /home/cjnolet/.SuiteSparse/GraphBLAS/6.3.0/GB_semiring_397409434374399488.h
opening /home/cjnolet/.SuiteSparse/GraphBLAS/6.3.0/GB_semiring_397409434374399488.h for write
about to close
 read cache file /home/cjnolet/.SuiteSparse/GraphBLAS/6.3.0/GB_semiring_397409434374399488.h
successful_read: 1
Just closed
 jit_cache get program GB_jit_AxB_dot3_phase3_dndn
found memory-cached prog GB_jit_AxB_dot3_phase3_dndn
 got kernel instance AxB_dot3_phase3_dndn_int32_t_int32_t_int32_t
found memory-cached prog AxB_dot3_phase3_dndn_int32_t_int32_t_int32_t
Launching _Z20AxB_dot3_phase3_dndnIiiiEvxxPxP16GB_Matrix_opaqueS2_S2_S2_i<<<32,32,0,0>>>(long,long,long*,GB_Matrix_opaque*,GB_Matrix_opaque*,GB_Matrix_opaque*,GB_Matrix_opaque*,int)
tid=0, i,j = 428,26  nnzA= 1024, nnzB=1024
tid=0, i,j = 397,12  nnzA= 1024, nnzB=1024
tid=0, i,j = 479,21  nnzA= 1024, nnzB=1024
tid=0, i,j = 904,16  nnzA= 1024, nnzB=1024
tid=0, i,j = 478,0  nnzA= 1024, nnzB=1024
tid=0, i,j = 666,7  nnzA= 1024, nnzB=1024
tid=0, i,j = 569,22  nnzA= 1024, nnzB=1024
tid=0, i,j = 192,13  nnzA= 1024, nnzB=1024
tid=0, i,j = 103,18  nnzA= 1024, nnzB=1024
tid=0, i,j = 886,19  nnzA= 1024, nnzB=1024
tid=0, i,j = 905,24  nnzA= 1024, nnzB=1024
tid=0, i,j = 568,15  nnzA= 1024, nnzB=1024
tid=0, i,j = 996,6  nnzA= 1024, nnzB=1024
tid=0, i,j = 187,9  nnzA= 1024, nnzB=1024
tid=0, i,j = 376,2  nnzA= 1024, nnzB=1024
tid=0, i,j = 975,21  nnzA= 1024, nnzB=1024
tid=0, i,j = 107,28  nnzA= 1024, nnzB=1024
tid=0, i,j = 46,11  nnzA= 1024, nnzB=1024
tid=0, i,j = 574,0  nnzA= 1024, nnzB=1024
tid=0, i,j = 928,17  nnzA= 1024, nnzB=1024
tid=0, i,j = 310,23  nnzA= 1024, nnzB=1024
tid=0, i,j = 896,8  nnzA= 1024, nnzB=1024
tid=0, i,j = 560,5  nnzA= 1024, nnzB=1024
tid=0, i,j = 821,19  nnzA= 1024, nnzB=1024
tid=0, i,j = 953,12  nnzA= 1024, nnzB=1024
tid=0, i,j = 446,10  nnzA= 1024, nnzB=1024
tid=0, i,j = 421,14  nnzA= 1024, nnzB=1024
tid=0, i,j = 241,25  nnzA= 1024, nnzB=1024
tid=0, i,j = 474,20  nnzA= 1024, nnzB=1024
tid=0, i,j = 788,16  nnzA= 1024, nnzB=1024
tid=0, i,j = 955,11  nnzA= 1024, nnzB=1024
tid=0, i,j = 183,7  nnzA= 1024, nnzB=1024
tid=0, i,j = 960,54  nnzA= 1024, nnzB=1024
tid=0, i,j = 893,57  nnzA= 1024, nnzB=1024
tid=0, i,j = 476,49  nnzA= 1024, nnzB=1024
tid=0, i,j = 940,53  nnzA= 1024, nnzB=1024
tid=0, i,j = 590,61  nnzA= 1024, nnzB=1024
tid=0, i,j = 108,59  nnzA= 1024, nnzB=1024
tid=0, i,j = 70,47  nnzA= 1024, nnzB=1024
tid=0, i,j = 90,56  nnzA= 1024, nnzB=1024
tid=0, i,j = 804,34  nnzA= 1024, nnzB=1024
tid=0, i,j = 121,32  nnzA= 1024, nnzB=1024
tid=0, i,j = 846,57  nnzA= 1024, nnzB=1024
tid=0, i,j = 568,41  nnzA= 1024, nnzB=1024
tid=0, i,j = 698,39  nnzA= 1024, nnzB=1024
tid=0, i,j = 771,62  nnzA= 1024, nnzB=1024
tid=0, i,j = 694,30  nnzA= 1024, nnzB=1024
tid=0, i,j = 138,38  nnzA= 1024, nnzB=1024
tid=0, i,j = 999,52  nnzA= 1024, nnzB=1024
tid=0, i,j = 208,46  nnzA= 1024, nnzB=1024
tid=0, i,j = 35,58  nnzA= 1024, nnzB=1024
tid=0, i,j = 81,33  nnzA= 1024, nnzB=1024
tid=0, i,j = 558,54  nnzA= 1024, nnzB=1024
tid=0, i,j = 950,40  nnzA= 1024, nnzB=1024
tid=0, i,j = 336,48  nnzA= 1024, nnzB=1024
tid=0, i,j = 798,43  nnzA= 1024, nnzB=1024
tid=0, i,j = 556,51  nnzA= 1024, nnzB=1024
tid=0, i,j = 479,60  nnzA= 1024, nnzB=1024
tid=0, i,j = 35,50  nnzA= 1024, nnzB=1024
tid=0, i,j = 609,37  nnzA= 1024, nnzB=1024
tid=0, i,j = 979,55  nnzA= 1024, nnzB=1024
tid=0, i,j = 441,28  nnzA= 1024, nnzB=1024
tid=0, i,j = 324,42  nnzA= 1024, nnzB=1024
tid=0, i,j = 451,36  nnzA= 1024, nnzB=1024
tid=0, i,j = 665,73  nnzA= 1024, nnzB=1024
tid=0, i,j = 50,63  nnzA= 1024, nnzB=1024
tid=0, i,j = 297,72  nnzA= 1024, nnzB=1024
tid=0, i,j = 324,68  nnzA= 1024, nnzB=1024
tid=0, i,j = 234,91  nnzA= 1024, nnzB=1024
tid=0, i,j = 690,92  nnzA= 1024, nnzB=1024
tid=0, i,j = 243,82  nnzA= 1024, nnzB=1024
tid=0, i,j = 218,92  nnzA= 1024, nnzB=1024
tid=0, i,j = 748,97  nnzA= 1024, nnzB=1024
tid=0, i,j = 268,64  nnzA= 1024, nnzB=1024
tid=0, i,j = 657,87  nnzA= 1024, nnzB=1024
tid=0, i,j = 825,89  nnzA= 1024, nnzB=1024
tid=0, i,j = 564,96  nnzA= 1024, nnzB=1024
tid=0, i,j = 90,78  nnzA= 1024, nnzB=1024
tid=0, i,j = 248,76  nnzA= 1024, nnzB=1024
tid=0, i,j = 637,94  nnzA= 1024, nnzB=1024
tid=0, i,j = 74,92  nnzA= 1024, nnzB=1024
tid=0, i,j = 539,70  nnzA= 1024, nnzB=1024
tid=0, i,j = 37,90  nnzA= 1024, nnzB=1024
tid=0, i,j = 228,71  nnzA= 1024, nnzB=1024
tid=0, i,j = 411,67  nnzA= 1024, nnzB=1024
tid=0, i,j = 722,94  nnzA= 1024, nnzB=1024
tid=0, i,j = 719,66  nnzA= 1024, nnzB=1024
tid=0, i,j = 104,86  nnzA= 1024, nnzB=1024
tid=0, i,j = 402,110  nnzA= 1024, nnzB=1024
tid=0, i,j = 519,91  nnzA= 1024, nnzB=1024
tid=0, i,j = 694,65  nnzA= 1024, nnzB=1024
tid=0, i,j = 477,69  nnzA= 1024, nnzB=1024
tid=0, i,j = 326,99  nnzA= 1024, nnzB=1024
tid=0, i,j = 177,125  nnzA= 1024, nnzB=1024
tid=0, i,j = 240,115  nnzA= 1024, nnzB=1024
tid=0, i,j = 820,128  nnzA= 1024, nnzB=1024
tid=0, i,j = 660,129  nnzA= 1024, nnzB=1024
tid=0, i,j = 623,130  nnzA= 1024, nnzB=1024
tid=0, i,j = 99,118  nnzA= 1024, nnzB=1024
tid=0, i,j = 278,113  nnzA= 1024, nnzB=1024
tid=0, i,j = 127,112  nnzA= 1024, nnzB=1024
tid=0, i,j = 151,122  nnzA= 1024, nnzB=1024
tid=0, i,j = 338,117  nnzA= 1024, nnzB=1024
tid=0, i,j = 644,104  nnzA= 1024, nnzB=1024
tid=0, i,j = 522,107  nnzA= 1024, nnzB=1024
tid=0, i,j = 621,103  nnzA= 1024, nnzB=1024
tid=0, i,j = 835,128  nnzA= 1024, nnzB=1024
tid=0, i,j = 219,117  nnzA= 1024, nnzB=1024
tid=0, i,j = 284,139  nnzA= 1024, nnzB=1024
tid=0, i,j = 609,102  nnzA= 1024, nnzB=1024
tid=0, i,j = 715,121  nnzA= 1024, nnzB=1024
tid=0, i,j = 239,107  nnzA= 1024, nnzB=1024
tid=0, i,j = 601,162  nnzA= 1024, nnzB=1024
tid=0, i,j = 816,163  nnzA= 1024, nnzB=1024
tid=0, i,j = 959,158  nnzA= 1024, nnzB=1024
tid=0, i,j = 492,133  nnzA= 1024, nnzB=1024
tid=0, i,j = 108,136  nnzA= 1024, nnzB=1024
tid=0, i,j = 570,132  nnzA= 1024, nnzB=1024
tid=0, i,j = 297,160  nnzA= 1024, nnzB=1024
tid=0, i,j = 714,157  nnzA= 1024, nnzB=1024
tid=0, i,j = 995,146  nnzA= 1024, nnzB=1024
tid=0, i,j = 123,143  nnzA= 1024, nnzB=1024
tid=0, i,j = 484,151  nnzA= 1024, nnzB=1024
tid=0, i,j = 355,131  nnzA= 1024, nnzB=1024
tid=0, i,j = 717,150  nnzA= 1024, nnzB=1024
tid=0, i,j = 887,140  nnzA= 1024, nnzB=1024
tid=0, i,j = 621,123  nnzA= 1024, nnzB=1024
tid=0, i,j = 554,121  nnzA= 1024, nnzB=1024
tid=0, i,j = 486,93  nnzA= 1024, nnzB=1024
tid=0, i,j = 87,142  nnzA= 1024, nnzB=1024
tid=0, i,j = 194,146  nnzA= 1024, nnzB=1024
tid=0, i,j = 281,100  nnzA= 1024, nnzB=1024
tid=0, i,j = 477,120  nnzA= 1024, nnzB=1024
tid=0, i,j = 552,145  nnzA= 1024, nnzB=1024
tid=0, i,j = 754,81  nnzA= 1024, nnzB=1024
tid=0, i,j = 884,109  nnzA= 1024, nnzB=1024
tid=0, i,j = 433,77  nnzA= 1024, nnzB=1024
tid=0, i,j = 131,108  nnzA= 1024, nnzB=1024
tid=0, i,j = 595,174  nnzA= 1024, nnzB=1024
tid=0, i,j = 253,84  nnzA= 1024, nnzB=1024
tid=0, i,j = 295,135  nnzA= 1024, nnzB=1024
tid=0, i,j = 855,75  nnzA= 1024, nnzB=1024
tid=0, i,j = 652,106  nnzA= 1024, nnzB=1024
tid=0, i,j = 807,130  nnzA= 1024, nnzB=1024
tid=0, i,j = 953,192  nnzA= 1024, nnzB=1024
tid=0, i,j = 644,192  nnzA= 1024, nnzB=1024
tid=0, i,j = 321,168  nnzA= 1024, nnzB=1024
tid=0, i,j = 15,171  nnzA= 1024, nnzB=1024
tid=0, i,j = 997,187  nnzA= 1024, nnzB=1024
tid=0, i,j = 990,190  nnzA= 1024, nnzB=1024
tid=0, i,j = 111,189  nnzA= 1024, nnzB=1024
tid=0, i,j = 675,182  nnzA= 1024, nnzB=1024
tid=0, i,j = 879,167  nnzA= 1024, nnzB=1024
tid=0, i,j = 949,149  nnzA= 1024, nnzB=1024
tid=0, i,j = 17,177  nnzA= 1024, nnzB=1024
tid=0, i,j = 290,156  nnzA= 1024, nnzB=1024
tid=0, i,j = 450,185  nnzA= 1024, nnzB=1024
tid=0, i,j = 801,166  nnzA= 1024, nnzB=1024
tid=0, i,j = 36,126  nnzA= 1024, nnzB=1024
tid=0, i,j = 614,176  nnzA= 1024, nnzB=1024
tid=0, i,j = 143,184  nnzA= 1024, nnzB=1024
tid=0, i,j = 830,180  nnzA= 1024, nnzB=1024
tid=0, i,j = 357,148  nnzA= 1024, nnzB=1024
tid=0, i,j = 253,131  nnzA= 1024, nnzB=1024
tid=0, i,j = 519,114  nnzA= 1024, nnzB=1024
tid=0, i,j = 108,176  nnzA= 1024, nnzB=1024
tid=0, i,j = 932,179  nnzA= 1024, nnzB=1024
tid=0, i,j = 779,112  nnzA= 1024, nnzB=1024
tid=0, i,j = 834,137  nnzA= 1024, nnzB=1024
tid=0, i,j = 288,138  nnzA= 1024, nnzB=1024
tid=0, i,j = 198,116  nnzA= 1024, nnzB=1024
tid=0, i,j = 612,170  nnzA= 1024, nnzB=1024
tid=0, i,j = 905,111  nnzA= 1024, nnzB=1024
tid=0, i,j = 821,134  nnzA= 1024, nnzB=1024
tid=0, i,j = 221,164  nnzA= 1024, nnzB=1024
tid=0, i,j = 910,198  nnzA= 1024, nnzB=1024
tid=0, i,j = 863,202  nnzA= 1024, nnzB=1024
tid=0, i,j = 692,183  nnzA= 1024, nnzB=1024
tid=0, i,j = 779,186  nnzA= 1024, nnzB=1024
tid=0, i,j = 974,157  nnzA= 1024, nnzB=1024
tid=0, i,j = 859,197  nnzA= 1024, nnzB=1024
tid=0, i,j = 922,195  nnzA= 1024, nnzB=1024
tid=0, i,j = 1001,182  nnzA= 1024, nnzB=1024
tid=0, i,j = 396,165  nnzA= 1024, nnzB=1024
tid=0, i,j = 199,141  nnzA= 1024, nnzB=1024
tid=0, i,j = 225,142  nnzA= 1024, nnzB=1024
tid=0, i,j = 951,172  nnzA= 1024, nnzB=1024
tid=0, i,j = 0,174  nnzA= 1024, nnzB=1024
tid=0, i,j = 574,144  nnzA= 1024, nnzB=1024
tid=0, i,j = 907,201  nnzA= 1024, nnzB=1024
tid=0, i,j = 945,139  nnzA= 1024, nnzB=1024
tid=0, i,j = 901,169  nnzA= 1024, nnzB=1024
tid=0, i,j = 135,193  nnzA= 1024, nnzB=1024
tid=0, i,j = 71,211  nnzA= 1024, nnzB=1024
tid=0, i,j = 865,203  nnzA= 1024, nnzB=1024
tid=0, i,j = 357,188  nnzA= 1024, nnzB=1024
tid=0, i,j = 704,220  nnzA= 1024, nnzB=1024
tid=0, i,j = 550,216  nnzA= 1024, nnzB=1024
tid=0, i,j = 545,222  nnzA= 1024, nnzB=1024
tid=0, i,j = 704,218  nnzA= 1024, nnzB=1024
tid=0, i,j = 426,212  nnzA= 1024, nnzB=1024
tid=0, i,j = 721,224  nnzA= 1024, nnzB=1024
tid=0, i,j = 935,225  nnzA= 1024, nnzB=1024
tid=0, i,j = 268,215  nnzA= 1024, nnzB=1024
tid=0, i,j = 614,204  nnzA= 1024, nnzB=1024
tid=0, i,j = 66,219  nnzA= 1024, nnzB=1024
tid=0, i,j = 808,209  nnzA= 1024, nnzB=1024
tid=0, i,j = 922,218  nnzA= 1024, nnzB=1024
tid=0, i,j = 781,176  nnzA= 1024, nnzB=1024
tid=0, i,j = 520,234  nnzA= 1024, nnzB=1024
tid=0, i,j = 382,230  nnzA= 1024, nnzB=1024
tid=0, i,j = 535,229  nnzA= 1024, nnzB=1024
tid=0, i,j = 551,231  nnzA= 1024, nnzB=1024
tid=0, i,j = 826,207  nnzA= 1024, nnzB=1024
tid=0, i,j = 631,178  nnzA= 1024, nnzB=1024
tid=0, i,j = 137,194  nnzA= 1024, nnzB=1024
tid=0, i,j = 56,221  nnzA= 1024, nnzB=1024
tid=0, i,j = 188,176  nnzA= 1024, nnzB=1024
tid=0, i,j = 921,217  nnzA= 1024, nnzB=1024
tid=0, i,j = 1016,223  nnzA= 1024, nnzB=1024
tid=0, i,j = 928,214  nnzA= 1024, nnzB=1024
tid=0, i,j = 727,226  nnzA= 1024, nnzB=1024
tid=0, i,j = 669,175  nnzA= 1024, nnzB=1024
tid=0, i,j = 570,233  nnzA= 1024, nnzB=1024
tid=0, i,j = 531,199  nnzA= 1024, nnzB=1024
tid=0, i,j = 500,241  nnzA= 1024, nnzB=1024
tid=0, i,j = 522,235  nnzA= 1024, nnzB=1024
tid=0, i,j = 551,221  nnzA= 1024, nnzB=1024
tid=0, i,j = 233,248  nnzA= 1024, nnzB=1024
tid=0, i,j = 1004,244  nnzA= 1024, nnzB=1024
tid=0, i,j = 197,252  nnzA= 1024, nnzB=1024
tid=0, i,j = 326,246  nnzA= 1024, nnzB=1024
tid=0, i,j = 40,254  nnzA= 1024, nnzB=1024
tid=0, i,j = 193,242  nnzA= 1024, nnzB=1024
tid=0, i,j = 221,236  nnzA= 1024, nnzB=1024
tid=0, i,j = 238,254  nnzA= 1024, nnzB=1024
tid=0, i,j = 588,244  nnzA= 1024, nnzB=1024
tid=0, i,j = 147,247  nnzA= 1024, nnzB=1024
tid=0, i,j = 931,211  nnzA= 1024, nnzB=1024
tid=0, i,j = 796,257  nnzA= 1024, nnzB=1024
tid=0, i,j = 368,262  nnzA= 1024, nnzB=1024
tid=0, i,j = 115,247  nnzA= 1024, nnzB=1024
tid=0, i,j = 82,239  nnzA= 1024, nnzB=1024
tid=0, i,j = 485,250  nnzA= 1024, nnzB=1024
tid=0, i,j = 461,257  nnzA= 1024, nnzB=1024
tid=0, i,j = 743,228  nnzA= 1024, nnzB=1024
tid=0, i,j = 152,213  nnzA= 1024, nnzB=1024
tid=0, i,j = 494,245  nnzA= 1024, nnzB=1024
tid=0, i,j = 755,237  nnzA= 1024, nnzB=1024
tid=0, i,j = 233,258  nnzA= 1024, nnzB=1024
tid=0, i,j = 485,253  nnzA= 1024, nnzB=1024
tid=0, i,j = 945,261  nnzA= 1024, nnzB=1024
tid=0, i,j = 659,210  nnzA= 1024, nnzB=1024
tid=0, i,j = 985,208  nnzA= 1024, nnzB=1024
tid=0, i,j = 897,232  nnzA= 1024, nnzB=1024
tid=0, i,j = 895,255  nnzA= 1024, nnzB=1024
tid=0, i,j = 300,243  nnzA= 1024, nnzB=1024
tid=0, i,j = 708,251  nnzA= 1024, nnzB=1024
tid=0, i,j = 333,276  nnzA= 1024, nnzB=1024
tid=0, i,j = 32,285  nnzA= 1024, nnzB=1024
tid=0, i,j = 179,282  nnzA= 1024, nnzB=1024
tid=0, i,j = 877,270  nnzA= 1024, nnzB=1024
tid=0, i,j = 755,264  nnzA= 1024, nnzB=1024
tid=0, i,j = 126,287  nnzA= 1024, nnzB=1024
tid=0, i,j = 877,279  nnzA= 1024, nnzB=1024
tid=0, i,j = 394,287  nnzA= 1024, nnzB=1024
tid=0, i,j = 124,265  nnzA= 1024, nnzB=1024
tid=0, i,j = 979,274  nnzA= 1024, nnzB=1024
tid=0, i,j = 449,281  nnzA= 1024, nnzB=1024
tid=0, i,j = 944,271  nnzA= 1024, nnzB=1024
tid=0, i,j = 562,292  nnzA= 1024, nnzB=1024
tid=0, i,j = 106,295  nnzA= 1024, nnzB=1024
tid=0, i,j = 18,280  nnzA= 1024, nnzB=1024
tid=0, i,j = 114,256  nnzA= 1024, nnzB=1024
tid=0, i,j = 377,277  nnzA= 1024, nnzB=1024
tid=0, i,j = 466,294  nnzA= 1024, nnzB=1024
tid=0, i,j = 1007,283  nnzA= 1024, nnzB=1024
tid=0, i,j = 124,242  nnzA= 1024, nnzB=1024
tid=0, i,j = 352,266  nnzA= 1024, nnzB=1024
tid=0, i,j = 234,268  nnzA= 1024, nnzB=1024
tid=0, i,j = 594,291  nnzA= 1024, nnzB=1024
tid=0, i,j = 621,242  nnzA= 1024, nnzB=1024
tid=0, i,j = 37,286  nnzA= 1024, nnzB=1024
tid=0, i,j = 100,273  nnzA= 1024, nnzB=1024
tid=0, i,j = 964,238  nnzA= 1024, nnzB=1024
tid=0, i,j = 884,260  nnzA= 1024, nnzB=1024
tid=0, i,j = 1,295  nnzA= 1024, nnzB=1024
tid=0, i,j = 388,240  nnzA= 1024, nnzB=1024
tid=0, i,j = 848,288  nnzA= 1024, nnzB=1024
tid=0, i,j = 595,284  nnzA= 1024, nnzB=1024
tid=0, i,j = 571,314  nnzA= 1024, nnzB=1024
tid=0, i,j = 264,307  nnzA= 1024, nnzB=1024
tid=0, i,j = 355,311  nnzA= 1024, nnzB=1024
tid=0, i,j = 298,315  nnzA= 1024, nnzB=1024
tid=0, i,j = 109,296  nnzA= 1024, nnzB=1024
tid=0, i,j = 741,315  nnzA= 1024, nnzB=1024
tid=0, i,j = 30,302  nnzA= 1024, nnzB=1024
tid=0, i,j = 183,296  nnzA= 1024, nnzB=1024
tid=0, i,j = 328,309  nnzA= 1024, nnzB=1024
tid=0, i,j = 554,300  nnzA= 1024, nnzB=1024
tid=0, i,j = 357,310  nnzA= 1024, nnzB=1024
tid=0, i,j = 622,305  nnzA= 1024, nnzB=1024
tid=0, i,j = 317,290  nnzA= 1024, nnzB=1024
tid=0, i,j = 28,308  nnzA= 1024, nnzB=1024
tid=0, i,j = 627,309  nnzA= 1024, nnzB=1024
tid=0, i,j = 61,312  nnzA= 1024, nnzB=1024
tid=0, i,j = 595,318  nnzA= 1024, nnzB=1024
tid=0, i,j = 235,322  nnzA= 1024, nnzB=1024
tid=0, i,j = 924,270  nnzA= 1024, nnzB=1024
tid=0, i,j = 126,319  nnzA= 1024, nnzB=1024
tid=0, i,j = 245,296  nnzA= 1024, nnzB=1024
tid=0, i,j = 1006,297  nnzA= 1024, nnzB=1024
tid=0, i,j = 323,317  nnzA= 1024, nnzB=1024
tid=0, i,j = 177,315  nnzA= 1024, nnzB=1024
tid=0, i,j = 67,272  nnzA= 1024, nnzB=1024
tid=0, i,j = 73,321  nnzA= 1024, nnzB=1024
tid=0, i,j = 960,294  nnzA= 1024, nnzB=1024
tid=0, i,j = 229,304  nnzA= 1024, nnzB=1024
tid=0, i,j = 400,269  nnzA= 1024, nnzB=1024
tid=0, i,j = 10,267  nnzA= 1024, nnzB=1024
tid=0, i,j = 177,316  nnzA= 1024, nnzB=1024
tid=0, i,j = 758,313  nnzA= 1024, nnzB=1024
tid=0, i,j = 695,334  nnzA= 1024, nnzB=1024
tid=0, i,j = 993,338  nnzA= 1024, nnzB=1024
tid=0, i,j = 678,343  nnzA= 1024, nnzB=1024
tid=0, i,j = 36,341  nnzA= 1024, nnzB=1024
tid=0, i,j = 775,336  nnzA= 1024, nnzB=1024
tid=0, i,j = 384,344  nnzA= 1024, nnzB=1024
tid=0, i,j = 375,323  nnzA= 1024, nnzB=1024
tid=0, i,j = 176,329  nnzA= 1024, nnzB=1024
tid=0, i,j = 795,332  nnzA= 1024, nnzB=1024
tid=0, i,j = 651,323  nnzA= 1024, nnzB=1024
tid=0, i,j = 704,327  nnzA= 1024, nnzB=1024
tid=0, i,j = 608,337  nnzA= 1024, nnzB=1024
tid=0, i,j = 308,316  nnzA= 1024, nnzB=1024
tid=0, i,j = 680,339  nnzA= 1024, nnzB=1024
tid=0, i,j = 694,335  nnzA= 1024, nnzB=1024
tid=0, i,j = 808,336  nnzA= 1024, nnzB=1024
tid=0, i,j = 60,348  nnzA= 1024, nnzB=1024
tid=0, i,j = 142,351  nnzA= 1024, nnzB=1024
tid=0, i,j = 821,348  nnzA= 1024, nnzB=1024
tid=0, i,j = 549,324  nnzA= 1024, nnzB=1024
tid=0, i,j = 996,347  nnzA= 1024, nnzB=1024
tid=0, i,j = 774,301  nnzA= 1024, nnzB=1024
tid=0, i,j = 487,325  nnzA= 1024, nnzB=1024
tid=0, i,j = 723,342  nnzA= 1024, nnzB=1024
tid=0, i,j = 645,303  nnzA= 1024, nnzB=1024
tid=0, i,j = 282,350  nnzA= 1024, nnzB=1024
tid=0, i,j = 468,320  nnzA= 1024, nnzB=1024
tid=0, i,j = 965,330  nnzA= 1024, nnzB=1024
tid=0, i,j = 912,297  nnzA= 1024, nnzB=1024
tid=0, i,j = 680,344  nnzA= 1024, nnzB=1024
tid=0, i,j = 159,299  nnzA= 1024, nnzB=1024
tid=0, i,j = 849,340  nnzA= 1024, nnzB=1024
tid=0, i,j = 990,365  nnzA= 1024, nnzB=1024
tid=0, i,j = 471,372  nnzA= 1024, nnzB=1024
tid=0, i,j = 669,374  nnzA= 1024, nnzB=1024
tid=0, i,j = 684,369  nnzA= 1024, nnzB=1024
tid=0, i,j = 971,366  nnzA= 1024, nnzB=1024
tid=0, i,j = 937,351  nnzA= 1024, nnzB=1024
tid=0, i,j = 992,375  nnzA= 1024, nnzB=1024
tid=0, i,j = 629,364  nnzA= 1024, nnzB=1024
tid=0, i,j = 679,360  nnzA= 1024, nnzB=1024
tid=0, i,j = 160,352  nnzA= 1024, nnzB=1024
tid=0, i,j = 587,368  nnzA= 1024, nnzB=1024
tid=0, i,j = 989,361  nnzA= 1024, nnzB=1024
tid=0, i,j = 270,370  nnzA= 1024, nnzB=1024
tid=0, i,j = 841,366  nnzA= 1024, nnzB=1024
tid=0, i,j = 816,382  nnzA= 1024, nnzB=1024
tid=0, i,j = 592,379  nnzA= 1024, nnzB=1024
tid=0, i,j = 888,367  nnzA= 1024, nnzB=1024
tid=0, i,j = 77,380  nnzA= 1024, nnzB=1024
tid=0, i,j = 75,345  nnzA= 1024, nnzB=1024
tid=0, i,j = 536,353  nnzA= 1024, nnzB=1024
tid=0, i,j = 882,378  nnzA= 1024, nnzB=1024
tid=0, i,j = 142,328  nnzA= 1024, nnzB=1024
tid=0, i,j = 848,330  nnzA= 1024, nnzB=1024
tid=0, i,j = 1012,381  nnzA= 1024, nnzB=1024
tid=0, i,j = 340,356  nnzA= 1024, nnzB=1024
tid=0, i,j = 88,373  nnzA= 1024, nnzB=1024
tid=0, i,j = 306,325  nnzA= 1024, nnzB=1024
tid=0, i,j = 336,376  nnzA= 1024, nnzB=1024
tid=0, i,j = 206,363  nnzA= 1024, nnzB=1024
tid=0, i,j = 804,349  nnzA= 1024, nnzB=1024
tid=0, i,j = 649,326  nnzA= 1024, nnzB=1024
tid=0, i,j = 327,371  nnzA= 1024, nnzB=1024
tid=0, i,j = 835,397  nnzA= 1024, nnzB=1024
tid=0, i,j = 49,405  nnzA= 1024, nnzB=1024
tid=0, i,j = 382,400  nnzA= 1024, nnzB=1024
tid=0, i,j = 40,403  nnzA= 1024, nnzB=1024
tid=0, i,j = 246,398  nnzA= 1024, nnzB=1024
tid=0, i,j = 645,396  nnzA= 1024, nnzB=1024
tid=0, i,j = 733,389  nnzA= 1024, nnzB=1024
tid=0, i,j = 790,401  nnzA= 1024, nnzB=1024
tid=0, i,j = 475,405  nnzA= 1024, nnzB=1024
tid=0, i,j = 670,385  nnzA= 1024, nnzB=1024
tid=0, i,j = 107,398  nnzA= 1024, nnzB=1024
tid=0, i,j = 711,383  nnzA= 1024, nnzB=1024
tid=0, i,j = 26,415  nnzA= 1024, nnzB=1024
tid=0, i,j = 643,411  nnzA= 1024, nnzB=1024
tid=0, i,j = 86,377  nnzA= 1024, nnzB=1024
tid=0, i,j = 172,400  nnzA= 1024, nnzB=1024
tid=0, i,j = 59,391  nnzA= 1024, nnzB=1024
tid=0, i,j = 537,386  nnzA= 1024, nnzB=1024
tid=0, i,j = 949,412  nnzA= 1024, nnzB=1024
tid=0, i,j = 794,361  nnzA= 1024, nnzB=1024
tid=0, i,j = 436,399  nnzA= 1024, nnzB=1024
tid=0, i,j = 816,362  nnzA= 1024, nnzB=1024
tid=0, i,j = 754,410  nnzA= 1024, nnzB=1024
tid=0, i,j = 641,404  nnzA= 1024, nnzB=1024
tid=0, i,j = 991,414  nnzA= 1024, nnzB=1024
tid=0, i,j = 494,388  nnzA= 1024, nnzB=1024
tid=0, i,j = 352,355  nnzA= 1024, nnzB=1024
tid=0, i,j = 320,407  nnzA= 1024, nnzB=1024
tid=0, i,j = 692,394  nnzA= 1024, nnzB=1024
tid=0, i,j = 678,358  nnzA= 1024, nnzB=1024
tid=0, i,j = 643,380  nnzA= 1024, nnzB=1024
tid=0, i,j = 320,402  nnzA= 1024, nnzB=1024
tid=0, i,j = 377,426  nnzA= 1024, nnzB=1024
tid=0, i,j = 105,437  nnzA= 1024, nnzB=1024
tid=0, i,j = 51,431  nnzA= 1024, nnzB=1024
tid=0, i,j = 152,435  nnzA= 1024, nnzB=1024
tid=0, i,j = 950,428  nnzA= 1024, nnzB=1024
tid=0, i,j = 857,432  nnzA= 1024, nnzB=1024
tid=0, i,j = 263,425  nnzA= 1024, nnzB=1024
tid=0, i,j = 748,420  nnzA= 1024, nnzB=1024
tid=0, i,j = 366,417  nnzA= 1024, nnzB=1024
tid=0, i,j = 575,416  nnzA= 1024, nnzB=1024
tid=0, i,j = 970,447  nnzA= 1024, nnzB=1024
tid=0, i,j = 753,443  nnzA= 1024, nnzB=1024
tid=0, i,j = 814,438  nnzA= 1024, nnzB=1024
tid=0, i,j = 61,408  nnzA= 1024, nnzB=1024
tid=0, i,j = 177,422  nnzA= 1024, nnzB=1024
tid=0, i,j = 149,427  nnzA= 1024, nnzB=1024
tid=0, i,j = 160,418  nnzA= 1024, nnzB=1024
tid=0, i,j = 669,444  nnzA= 1024, nnzB=1024
tid=0, i,j = 551,390  nnzA= 1024, nnzB=1024
tid=0, i,j = 718,430  nnzA= 1024, nnzB=1024
tid=0, i,j = 880,442  nnzA= 1024, nnzB=1024
tid=0, i,j = 305,429  nnzA= 1024, nnzB=1024
tid=0, i,j = 356,436  nnzA= 1024, nnzB=1024
tid=0, i,j = 600,391  nnzA= 1024, nnzB=1024
tid=0, i,j = 209,419  nnzA= 1024, nnzB=1024
tid=0, i,j = 328,389  nnzA= 1024, nnzB=1024
tid=0, i,j = 741,446  nnzA= 1024, nnzB=1024
tid=0, i,j = 542,424  nnzA= 1024, nnzB=1024
tid=0, i,j = 347,387  nnzA= 1024, nnzB=1024
tid=0, i,j = 338,440  nnzA= 1024, nnzB=1024
tid=0, i,j = 94,413  nnzA= 1024, nnzB=1024
tid=0, i,j = 604,434  nnzA= 1024, nnzB=1024
tid=0, i,j = 985,456  nnzA= 1024, nnzB=1024
tid=0, i,j = 849,456  nnzA= 1024, nnzB=1024
tid=0, i,j = 868,452  nnzA= 1024, nnzB=1024
tid=0, i,j = 646,448  nnzA= 1024, nnzB=1024
tid=0, i,j = 744,448  nnzA= 1024, nnzB=1024
tid=0, i,j = 415,454  nnzA= 1024, nnzB=1024
tid=0, i,j = 982,441  nnzA= 1024, nnzB=1024
tid=0, i,j = 218,457  nnzA= 1024, nnzB=1024
tid=0, i,j = 835,449  nnzA= 1024, nnzB=1024
tid=0, i,j = 614,421  nnzA= 1024, nnzB=1024
tid=0, i,j = 147,451  nnzA= 1024, nnzB=1024
tid=0, i,j = 873,423  nnzA= 1024, nnzB=1024
tid=0, i,j = 285,419  nnzA= 1024, nnzB=1024
tid=0, i,j = 43,455  nnzA= 1024, nnzB=1024
tid=0, i,j = 669,418  nnzA= 1024, nnzB=1024
tid=0, i,j = 952,445  nnzA= 1024, nnzB=1024
tid=0, i,j = 26,453  nnzA= 1024, nnzB=1024
tid=0, i,j = 668,454  nnzA= 1024, nnzB=1024
tid=0, i,j = 1017,451  nnzA= 1024, nnzB=1024
tid=0, i,j = 579,450  nnzA= 1024, nnzB=1024
tid=0, i,j = 849,461  nnzA= 1024, nnzB=1024
tid=0, i,j = 801,465  nnzA= 1024, nnzB=1024
tid=0, i,j = 900,462  nnzA= 1024, nnzB=1024
tid=0, i,j = 112,467  nnzA= 1024, nnzB=1024
tid=0, i,j = 917,461  nnzA= 1024, nnzB=1024
tid=0, i,j = 316,463  nnzA= 1024, nnzB=1024
tid=0, i,j = 510,458  nnzA= 1024, nnzB=1024
tid=0, i,j = 836,460  nnzA= 1024, nnzB=1024
tid=0, i,j = 889,470  nnzA= 1024, nnzB=1024
tid=0, i,j = 762,464  nnzA= 1024, nnzB=1024
tid=0, i,j = 737,459  nnzA= 1024, nnzB=1024
tid=0, i,j = 673,466  nnzA= 1024, nnzB=1024
tid=0, i,j = 355,465  nnzA= 1024, nnzB=1024
tid=0, i,j = 288,468  nnzA= 1024, nnzB=1024
tid=0, i,j = 680,482  nnzA= 1024, nnzB=1024
tid=0, i,j = 802,489  nnzA= 1024, nnzB=1024
tid=0, i,j = 194,487  nnzA= 1024, nnzB=1024
tid=0, i,j = 558,481  nnzA= 1024, nnzB=1024
tid=0, i,j = 811,490  nnzA= 1024, nnzB=1024
tid=0, i,j = 44,476  nnzA= 1024, nnzB=1024
tid=0, i,j = 667,480  nnzA= 1024, nnzB=1024
tid=0, i,j = 650,471  nnzA= 1024, nnzB=1024
tid=0, i,j = 382,475  nnzA= 1024, nnzB=1024
tid=0, i,j = 274,485  nnzA= 1024, nnzB=1024
tid=0, i,j = 342,477  nnzA= 1024, nnzB=1024
tid=0, i,j = 1015,486  nnzA= 1024, nnzB=1024
tid=0, i,j = 786,478  nnzA= 1024, nnzB=1024
tid=0, i,j = 127,473  nnzA= 1024, nnzB=1024
tid=0, i,j = 517,483  nnzA= 1024, nnzB=1024
tid=0, i,j = 121,473  nnzA= 1024, nnzB=1024
tid=0, i,j = 487,474  nnzA= 1024, nnzB=1024
tid=0, i,j = 961,484  nnzA= 1024, nnzB=1024
tid=0, i,j = 319,491  nnzA= 1024, nnzB=1024
tid=0, i,j = 377,492  nnzA= 1024, nnzB=1024
tid=0, i,j = 1013,521  nnzA= 1024, nnzB=1024
tid=0, i,j = 267,496  nnzA= 1024, nnzB=1024
tid=0, i,j = 809,495  nnzA= 1024, nnzB=1024
tid=0, i,j = 194,498  nnzA= 1024, nnzB=1024
tid=0, i,j = 704,501  nnzA= 1024, nnzB=1024
tid=0, i,j = 362,525  nnzA= 1024, nnzB=1024
tid=0, i,j = 84,500  nnzA= 1024, nnzB=1024
tid=0, i,j = 284,522  nnzA= 1024, nnzB=1024
tid=0, i,j = 270,520  nnzA= 1024, nnzB=1024
tid=0, i,j = 432,494  nnzA= 1024, nnzB=1024
tid=0, i,j = 94,525  nnzA= 1024, nnzB=1024
tid=0, i,j = 271,513  nnzA= 1024, nnzB=1024
tid=0, i,j = 61,527  nnzA= 1024, nnzB=1024
tid=0, i,j = 758,515  nnzA= 1024, nnzB=1024
tid=0, i,j = 404,514  nnzA= 1024, nnzB=1024
tid=0, i,j = 643,507  nnzA= 1024, nnzB=1024
tid=0, i,j = 369,517  nnzA= 1024, nnzB=1024
tid=0, i,j = 887,504  nnzA= 1024, nnzB=1024
tid=0, i,j = 945,524  nnzA= 1024, nnzB=1024
tid=0, i,j = 952,499  nnzA= 1024, nnzB=1024
tid=0, i,j = 519,503  nnzA= 1024, nnzB=1024
tid=0, i,j = 892,512  nnzA= 1024, nnzB=1024
tid=0, i,j = 510,504  nnzA= 1024, nnzB=1024
tid=0, i,j = 902,496  nnzA= 1024, nnzB=1024
tid=0, i,j = 449,508  nnzA= 1024, nnzB=1024
tid=0, i,j = 574,505  nnzA= 1024, nnzB=1024
tid=0, i,j = 52,526  nnzA= 1024, nnzB=1024
tid=0, i,j = 293,518  nnzA= 1024, nnzB=1024
tid=0, i,j = 632,523  nnzA= 1024, nnzB=1024
tid=0, i,j = 786,519  nnzA= 1024, nnzB=1024
tid=0, i,j = 294,528  nnzA= 1024, nnzB=1024
tid=0, i,j = 505,534  nnzA= 1024, nnzB=1024
tid=0, i,j = 908,531  nnzA= 1024, nnzB=1024
tid=0, i,j = 137,542  nnzA= 1024, nnzB=1024
tid=0, i,j = 500,536  nnzA= 1024, nnzB=1024
tid=0, i,j = 710,552  nnzA= 1024, nnzB=1024
tid=0, i,j = 910,557  nnzA= 1024, nnzB=1024
tid=0, i,j = 998,529  nnzA= 1024, nnzB=1024
tid=0, i,j = 792,560  nnzA= 1024, nnzB=1024
tid=0, i,j = 767,547  nnzA= 1024, nnzB=1024
tid=0, i,j = 927,550  nnzA= 1024, nnzB=1024
tid=0, i,j = 391,553  nnzA= 1024, nnzB=1024
tid=0, i,j = 1018,547  nnzA= 1024, nnzB=1024
tid=0, i,j = 46,548  nnzA= 1024, nnzB=1024
tid=0, i,j = 26,556  nnzA= 1024, nnzB=1024
tid=0, i,j = 660,535  nnzA= 1024, nnzB=1024
tid=0, i,j = 861,538  nnzA= 1024, nnzB=1024
tid=0, i,j = 10,555  nnzA= 1024, nnzB=1024
tid=0, i,j = 492,538  nnzA= 1024, nnzB=1024
tid=0, i,j = 112,530  nnzA= 1024, nnzB=1024
tid=0, i,j = 799,537  nnzA= 1024, nnzB=1024
tid=0, i,j = 145,529  nnzA= 1024, nnzB=1024
tid=0, i,j = 674,533  nnzA= 1024, nnzB=1024
tid=0, i,j = 776,535  nnzA= 1024, nnzB=1024
tid=0, i,j = 912,547  nnzA= 1024, nnzB=1024
tid=0, i,j = 552,558  nnzA= 1024, nnzB=1024
tid=0, i,j = 245,540  nnzA= 1024, nnzB=1024
tid=0, i,j = 658,545  nnzA= 1024, nnzB=1024
tid=0, i,j = 351,554  nnzA= 1024, nnzB=1024
tid=0, i,j = 697,548  nnzA= 1024, nnzB=1024
tid=0, i,j = 213,546  nnzA= 1024, nnzB=1024
tid=0, i,j = 602,549  nnzA= 1024, nnzB=1024
tid=0, i,j = 597,561  nnzA= 1024, nnzB=1024
tid=0, i,j = 490,565  nnzA= 1024, nnzB=1024
tid=0, i,j = 872,569  nnzA= 1024, nnzB=1024
tid=0, i,j = 603,574  nnzA= 1024, nnzB=1024
tid=0, i,j = 914,588  nnzA= 1024, nnzB=1024
tid=0, i,j = 310,564  nnzA= 1024, nnzB=1024
tid=0, i,j = 182,580  nnzA= 1024, nnzB=1024
tid=0, i,j = 177,582  nnzA= 1024, nnzB=1024
tid=0, i,j = 877,563  nnzA= 1024, nnzB=1024
tid=0, i,j = 118,583  nnzA= 1024, nnzB=1024
tid=0, i,j = 271,571  nnzA= 1024, nnzB=1024
tid=0, i,j = 564,566  nnzA= 1024, nnzB=1024
tid=0, i,j = 919,571  nnzA= 1024, nnzB=1024
tid=0, i,j = 862,562  nnzA= 1024, nnzB=1024
tid=0, i,j = 254,587  nnzA= 1024, nnzB=1024
tid=0, i,j = 1016,589  nnzA= 1024, nnzB=1024
tid=0, i,j = 802,590  nnzA= 1024, nnzB=1024
tid=0, i,j = 609,564  nnzA= 1024, nnzB=1024
tid=0, i,j = 607,566  nnzA= 1024, nnzB=1024
tid=0, i,j = 445,581  nnzA= 1024, nnzB=1024
tid=0, i,j = 182,562  nnzA= 1024, nnzB=1024
tid=0, i,j = 95,590  nnzA= 1024, nnzB=1024
tid=0, i,j = 630,572  nnzA= 1024, nnzB=1024
tid=0, i,j = 433,585  nnzA= 1024, nnzB=1024
tid=0, i,j = 399,584  nnzA= 1024, nnzB=1024
tid=0, i,j = 274,579  nnzA= 1024, nnzB=1024
tid=0, i,j = 465,570  nnzA= 1024, nnzB=1024
tid=0, i,j = 256,576  nnzA= 1024, nnzB=1024
tid=0, i,j = 787,595  nnzA= 1024, nnzB=1024
tid=0, i,j = 759,611  nnzA= 1024, nnzB=1024
tid=0, i,j = 127,599  nnzA= 1024, nnzB=1024
tid=0, i,j = 832,608  nnzA= 1024, nnzB=1024
tid=0, i,j = 527,592  nnzA= 1024, nnzB=1024
tid=0, i,j = 76,605  nnzA= 1024, nnzB=1024
tid=0, i,j = 478,601  nnzA= 1024, nnzB=1024
tid=0, i,j = 794,610  nnzA= 1024, nnzB=1024
tid=0, i,j = 270,604  nnzA= 1024, nnzB=1024
tid=0, i,j = 430,594  nnzA= 1024, nnzB=1024
tid=0, i,j = 143,593  nnzA= 1024, nnzB=1024
tid=0, i,j = 5,620  nnzA= 1024, nnzB=1024
tid=0, i,j = 928,616  nnzA= 1024, nnzB=1024
tid=0, i,j = 41,621  nnzA= 1024, nnzB=1024
tid=0, i,j = 788,598  nnzA= 1024, nnzB=1024
tid=0, i,j = 996,619  nnzA= 1024, nnzB=1024
tid=0, i,j = 978,591  nnzA= 1024, nnzB=1024
tid=0, i,j = 398,613  nnzA= 1024, nnzB=1024
tid=0, i,j = 287,609  nnzA= 1024, nnzB=1024
tid=0, i,j = 79,623  nnzA= 1024, nnzB=1024
tid=0, i,j = 1006,612  nnzA= 1024, nnzB=1024
tid=0, i,j = 339,600  nnzA= 1024, nnzB=1024
tid=0, i,j = 386,614  nnzA= 1024, nnzB=1024
tid=0, i,j = 44,623  nnzA= 1024, nnzB=1024
tid=0, i,j = 218,602  nnzA= 1024, nnzB=1024
tid=0, i,j = 337,620  nnzA= 1024, nnzB=1024
tid=0, i,j = 677,596  nnzA= 1024, nnzB=1024
tid=0, i,j = 759,603  nnzA= 1024, nnzB=1024
tid=0, i,j = 30,617  nnzA= 1024, nnzB=1024
tid=0, i,j = 930,606  nnzA= 1024, nnzB=1024
tid=0, i,j = 115,615  nnzA= 1024, nnzB=1024
tid=0, i,j = 361,618  nnzA= 1024, nnzB=1024
tid=0, i,j = 113,638  nnzA= 1024, nnzB=1024
tid=0, i,j = 396,628  nnzA= 1024, nnzB=1024
tid=0, i,j = 73,632  nnzA= 1024, nnzB=1024
tid=0, i,j = 242,624  nnzA= 1024, nnzB=1024
tid=0, i,j = 614,649  nnzA= 1024, nnzB=1024
tid=0, i,j = 19,624  nnzA= 1024, nnzB=1024
tid=0, i,j = 957,650  nnzA= 1024, nnzB=1024
tid=0, i,j = 617,636  nnzA= 1024, nnzB=1024
tid=0, i,j = 341,630  nnzA= 1024, nnzB=1024
tid=0, i,j = 716,637  nnzA= 1024, nnzB=1024
tid=0, i,j = 285,637  nnzA= 1024, nnzB=1024
tid=0, i,j = 361,627  nnzA= 1024, nnzB=1024
tid=0, i,j = 683,625  nnzA= 1024, nnzB=1024
tid=0, i,j = 912,634  nnzA= 1024, nnzB=1024
tid=0, i,j = 966,623  nnzA= 1024, nnzB=1024
tid=0, i,j = 934,643  nnzA= 1024, nnzB=1024
tid=0, i,j = 882,629  nnzA= 1024, nnzB=1024
tid=0, i,j = 49,631  nnzA= 1024, nnzB=1024
tid=0, i,j = 616,639  nnzA= 1024, nnzB=1024
tid=0, i,j = 973,652  nnzA= 1024, nnzB=1024
tid=0, i,j = 60,653  nnzA= 1024, nnzB=1024
tid=0, i,j = 524,624  nnzA= 1024, nnzB=1024
tid=0, i,j = 367,638  nnzA= 1024, nnzB=1024
tid=0, i,j = 783,647  nnzA= 1024, nnzB=1024
tid=0, i,j = 457,641  nnzA= 1024, nnzB=1024
tid=0, i,j = 585,631  nnzA= 1024, nnzB=1024
tid=0, i,j = 195,648  nnzA= 1024, nnzB=1024
tid=0, i,j = 837,640  nnzA= 1024, nnzB=1024
tid=0, i,j = 333,653  nnzA= 1024, nnzB=1024
tid=0, i,j = 281,651  nnzA= 1024, nnzB=1024
tid=0, i,j = 51,626  nnzA= 1024, nnzB=1024
tid=0, i,j = 882,635  nnzA= 1024, nnzB=1024
tid=0, i,j = 158,664  nnzA= 1024, nnzB=1024
tid=0, i,j = 300,669  nnzA= 1024, nnzB=1024
tid=0, i,j = 454,675  nnzA= 1024, nnzB=1024
tid=0, i,j = 503,666  nnzA= 1024, nnzB=1024
tid=0, i,j = 699,681  nnzA= 1024, nnzB=1024
tid=0, i,j = 819,672  nnzA= 1024, nnzB=1024
tid=0, i,j = 910,655  nnzA= 1024, nnzB=1024
tid=0, i,j = 349,656  nnzA= 1024, nnzB=1024
tid=0, i,j = 141,671  nnzA= 1024, nnzB=1024
tid=0, i,j = 819,674  nnzA= 1024, nnzB=1024
tid=0, i,j = 36,674  nnzA= 1024, nnzB=1024
tid=0, i,j = 767,663  nnzA= 1024, nnzB=1024
tid=0, i,j = 77,665  nnzA= 1024, nnzB=1024
tid=0, i,j = 117,682  nnzA= 1024, nnzB=1024
tid=0, i,j = 591,660  nnzA= 1024, nnzB=1024
tid=0, i,j = 951,667  nnzA= 1024, nnzB=1024
tid=0, i,j = 17,685  nnzA= 1024, nnzB=1024
tid=0, i,j = 605,654  nnzA= 1024, nnzB=1024
tid=0, i,j = 907,684  nnzA= 1024, nnzB=1024
tid=0, i,j = 899,679  nnzA= 1024, nnzB=1024
tid=0, i,j = 289,677  nnzA= 1024, nnzB=1024
tid=0, i,j = 110,683  nnzA= 1024, nnzB=1024
tid=0, i,j = 202,686  nnzA= 1024, nnzB=1024
tid=0, i,j = 17,659  nnzA= 1024, nnzB=1024
tid=0, i,j = 512,661  nnzA= 1024, nnzB=1024
tid=0, i,j = 647,677  nnzA= 1024, nnzB=1024
tid=0, i,j = 398,680  nnzA= 1024, nnzB=1024
tid=0, i,j = 802,678  nnzA= 1024, nnzB=1024
tid=0, i,j = 565,671  nnzA= 1024, nnzB=1024
tid=0, i,j = 242,676  nnzA= 1024, nnzB=1024
tid=0, i,j = 365,668  nnzA= 1024, nnzB=1024
tid=0, i,j = 390,681  nnzA= 1024, nnzB=1024
tid=0, i,j = 323,701  nnzA= 1024, nnzB=1024
tid=0, i,j = 702,695  nnzA= 1024, nnzB=1024
tid=0, i,j = 76,707  nnzA= 1024, nnzB=1024
tid=0, i,j = 502,689  nnzA= 1024, nnzB=1024
tid=0, i,j = 287,688  nnzA= 1024, nnzB=1024
tid=0, i,j = 631,698  nnzA= 1024, nnzB=1024
tid=0, i,j = 102,696  nnzA= 1024, nnzB=1024
tid=0, i,j = 374,704  nnzA= 1024, nnzB=1024
tid=0, i,j = 511,706  nnzA= 1024, nnzB=1024
tid=0, i,j = 579,705  nnzA= 1024, nnzB=1024
tid=0, i,j = 378,694  nnzA= 1024, nnzB=1024
tid=0, i,j = 777,702  nnzA= 1024, nnzB=1024
tid=0, i,j = 462,711  nnzA= 1024, nnzB=1024
tid=0, i,j = 392,691  nnzA= 1024, nnzB=1024
tid=0, i,j = 152,699  nnzA= 1024, nnzB=1024
tid=0, i,j = 45,687  nnzA= 1024, nnzB=1024
tid=0, i,j = 475,714  nnzA= 1024, nnzB=1024
tid=0, i,j = 872,709  nnzA= 1024, nnzB=1024
tid=0, i,j = 299,690  nnzA= 1024, nnzB=1024
tid=0, i,j = 600,692  nnzA= 1024, nnzB=1024
tid=0, i,j = 172,715  nnzA= 1024, nnzB=1024
tid=0, i,j = 107,710  nnzA= 1024, nnzB=1024
tid=0, i,j = 293,710  nnzA= 1024, nnzB=1024
tid=0, i,j = 925,708  nnzA= 1024, nnzB=1024
tid=0, i,j = 873,709  nnzA= 1024, nnzB=1024
tid=0, i,j = 840,700  nnzA= 1024, nnzB=1024
tid=0, i,j = 259,708  nnzA= 1024, nnzB=1024
tid=0, i,j = 210,711  nnzA= 1024, nnzB=1024
tid=0, i,j = 132,703  nnzA= 1024, nnzB=1024
tid=0, i,j = 697,716  nnzA= 1024, nnzB=1024
tid=0, i,j = 480,724  nnzA= 1024, nnzB=1024
tid=0, i,j = 797,728  nnzA= 1024, nnzB=1024
tid=0, i,j = 337,726  nnzA= 1024, nnzB=1024
tid=0, i,j = 884,729  nnzA= 1024, nnzB=1024
tid=0, i,j = 848,718  nnzA= 1024, nnzB=1024
tid=0, i,j = 485,742  nnzA= 1024, nnzB=1024
tid=0, i,j = 201,720  nnzA= 1024, nnzB=1024
tid=0, i,j = 574,734  nnzA= 1024, nnzB=1024
tid=0, i,j = 912,737  nnzA= 1024, nnzB=1024
tid=0, i,j = 146,737  nnzA= 1024, nnzB=1024
tid=0, i,j = 751,715  nnzA= 1024, nnzB=1024
tid=0, i,j = 630,741  nnzA= 1024, nnzB=1024
tid=0, i,j = 910,732  nnzA= 1024, nnzB=1024
tid=0, i,j = 1023,738  nnzA= 1024, nnzB=1024
tid=0, i,j = 806,721  nnzA= 1024, nnzB=1024
tid=0, i,j = 335,739  nnzA= 1024, nnzB=1024
tid=0, i,j = 596,740  nnzA= 1024, nnzB=1024
tid=0, i,j = 675,723  nnzA= 1024, nnzB=1024
tid=0, i,j = 934,722  nnzA= 1024, nnzB=1024
tid=0, i,j = 725,720  nnzA= 1024, nnzB=1024
tid=0, i,j = 331,719  nnzA= 1024, nnzB=1024
tid=0, i,j = 275,731  nnzA= 1024, nnzB=1024
tid=0, i,j = 415,722  nnzA= 1024, nnzB=1024
tid=0, i,j = 177,727  nnzA= 1024, nnzB=1024
tid=0, i,j = 365,741  nnzA= 1024, nnzB=1024
tid=0, i,j = 620,717  nnzA= 1024, nnzB=1024
tid=0, i,j = 763,733  nnzA= 1024, nnzB=1024
tid=0, i,j = 234,717  nnzA= 1024, nnzB=1024
tid=0, i,j = 268,735  nnzA= 1024, nnzB=1024
tid=0, i,j = 115,736  nnzA= 1024, nnzB=1024
tid=0, i,j = 767,730  nnzA= 1024, nnzB=1024
tid=0, i,j = 621,745  nnzA= 1024, nnzB=1024
tid=0, i,j = 592,753  nnzA= 1024, nnzB=1024
tid=0, i,j = 847,758  nnzA= 1024, nnzB=1024
tid=0, i,j = 56,773  nnzA= 1024, nnzB=1024
tid=0, i,j = 472,753  nnzA= 1024, nnzB=1024
tid=0, i,j = 91,747  nnzA= 1024, nnzB=1024
tid=0, i,j = 633,756  nnzA= 1024, nnzB=1024
tid=0, i,j = 936,766  nnzA= 1024, nnzB=1024
tid=0, i,j = 954,763  nnzA= 1024, nnzB=1024
tid=0, i,j = 487,771  nnzA= 1024, nnzB=1024
tid=0, i,j = 381,760  nnzA= 1024, nnzB=1024
tid=0, i,j = 59,749  nnzA= 1024, nnzB=1024
tid=0, i,j = 742,752  nnzA= 1024, nnzB=1024
tid=0, i,j = 915,766  nnzA= 1024, nnzB=1024
tid=0, i,j = 745,752  nnzA= 1024, nnzB=1024
tid=0, i,j = 186,743  nnzA= 1024, nnzB=1024
tid=0, i,j = 458,770  nnzA= 1024, nnzB=1024
tid=0, i,j = 755,749  nnzA= 1024, nnzB=1024
tid=0, i,j = 340,760  nnzA= 1024, nnzB=1024
tid=0, i,j = 307,768  nnzA= 1024, nnzB=1024
tid=0, i,j = 313,752  nnzA= 1024, nnzB=1024
tid=0, i,j = 372,767  nnzA= 1024, nnzB=1024
tid=0, i,j = 348,751  nnzA= 1024, nnzB=1024
tid=0, i,j = 103,771  nnzA= 1024, nnzB=1024
tid=0, i,j = 1007,754  nnzA= 1024, nnzB=1024
tid=0, i,j = 886,748  nnzA= 1024, nnzB=1024
tid=0, i,j = 645,745  nnzA= 1024, nnzB=1024
tid=0, i,j = 273,746  nnzA= 1024, nnzB=1024
tid=0, i,j = 913,764  nnzA= 1024, nnzB=1024
tid=0, i,j = 392,764  nnzA= 1024, nnzB=1024
tid=0, i,j = 500,759  nnzA= 1024, nnzB=1024
tid=0, i,j = 962,762  nnzA= 1024, nnzB=1024
tid=0, i,j = 115,775  nnzA= 1024, nnzB=1024
tid=0, i,j = 1022,804  nnzA= 1024, nnzB=1024
tid=0, i,j = 462,786  nnzA= 1024, nnzB=1024
tid=0, i,j = 696,789  nnzA= 1024, nnzB=1024
tid=0, i,j = 816,785  nnzA= 1024, nnzB=1024
tid=0, i,j = 893,778  nnzA= 1024, nnzB=1024
tid=0, i,j = 273,788  nnzA= 1024, nnzB=1024
tid=0, i,j = 896,803  nnzA= 1024, nnzB=1024
tid=0, i,j = 256,780  nnzA= 1024, nnzB=1024
tid=0, i,j = 880,797  nnzA= 1024, nnzB=1024
tid=0, i,j = 809,793  nnzA= 1024, nnzB=1024
tid=0, i,j = 614,783  nnzA= 1024, nnzB=1024
tid=0, i,j = 636,792  nnzA= 1024, nnzB=1024
tid=0, i,j = 899,781  nnzA= 1024, nnzB=1024
tid=0, i,j = 793,791  nnzA= 1024, nnzB=1024
tid=0, i,j = 54,784  nnzA= 1024, nnzB=1024
tid=0, i,j = 347,796  nnzA= 1024, nnzB=1024
tid=0, i,j = 773,774  nnzA= 1024, nnzB=1024
tid=0, i,j = 399,782  nnzA= 1024, nnzB=1024
tid=0, i,j = 876,787  nnzA= 1024, nnzB=1024
tid=0, i,j = 802,798  nnzA= 1024, nnzB=1024
tid=0, i,j = 294,799  nnzA= 1024, nnzB=1024
tid=0, i,j = 892,782  nnzA= 1024, nnzB=1024
tid=0, i,j = 970,800  nnzA= 1024, nnzB=1024
tid=0, i,j = 537,776  nnzA= 1024, nnzB=1024
tid=0, i,j = 130,801  nnzA= 1024, nnzB=1024
tid=0, i,j = 644,779  nnzA= 1024, nnzB=1024
tid=0, i,j = 392,777  nnzA= 1024, nnzB=1024
tid=0, i,j = 986,794  nnzA= 1024, nnzB=1024
tid=0, i,j = 471,790  nnzA= 1024, nnzB=1024
tid=0, i,j = 955,792  nnzA= 1024, nnzB=1024
tid=0, i,j = 656,795  nnzA= 1024, nnzB=1024
tid=0, i,j = 479,805  nnzA= 1024, nnzB=1024
tid=0, i,j = 985,818  nnzA= 1024, nnzB=1024
tid=0, i,j = 430,817  nnzA= 1024, nnzB=1024
tid=0, i,j = 839,821  nnzA= 1024, nnzB=1024
tid=0, i,j = 115,835  nnzA= 1024, nnzB=1024
tid=0, i,j = 646,810  nnzA= 1024, nnzB=1024
tid=0, i,j = 747,822  nnzA= 1024, nnzB=1024
tid=0, i,j = 625,827  nnzA= 1024, nnzB=1024
tid=0, i,j = 982,831  nnzA= 1024, nnzB=1024
tid=0, i,j = 719,809  nnzA= 1024, nnzB=1024
tid=0, i,j = 408,815  nnzA= 1024, nnzB=1024
tid=0, i,j = 547,811  nnzA= 1024, nnzB=1024
tid=0, i,j = 295,834  nnzA= 1024, nnzB=1024
tid=0, i,j = 915,830  nnzA= 1024, nnzB=1024
tid=0, i,j = 902,816  nnzA= 1024, nnzB=1024
tid=0, i,j = 406,825  nnzA= 1024, nnzB=1024
tid=0, i,j = 886,824  nnzA= 1024, nnzB=1024
tid=0, i,j = 1003,832  nnzA= 1024, nnzB=1024
tid=0, i,j = 375,812  nnzA= 1024, nnzB=1024
tid=0, i,j = 362,833  nnzA= 1024, nnzB=1024
tid=0, i,j = 200,813  nnzA= 1024, nnzB=1024
tid=0, i,j = 737,809  nnzA= 1024, nnzB=1024
tid=0, i,j = 889,806  nnzA= 1024, nnzB=1024
tid=0, i,j = 32,805  nnzA= 1024, nnzB=1024
tid=0, i,j = 688,819  nnzA= 1024, nnzB=1024
tid=0, i,j = 999,833  nnzA= 1024, nnzB=1024
tid=0, i,j = 504,807  nnzA= 1024, nnzB=1024
tid=0, i,j = 39,823  nnzA= 1024, nnzB=1024
tid=0, i,j = 136,834  nnzA= 1024, nnzB=1024
tid=0, i,j = 814,826  nnzA= 1024, nnzB=1024
tid=0, i,j = 407,828  nnzA= 1024, nnzB=1024
tid=0, i,j = 511,829  nnzA= 1024, nnzB=1024
tid=0, i,j = 565,837  nnzA= 1024, nnzB=1024
tid=0, i,j = 741,847  nnzA= 1024, nnzB=1024
tid=0, i,j = 483,848  nnzA= 1024, nnzB=1024
tid=0, i,j = 972,865  nnzA= 1024, nnzB=1024
tid=0, i,j = 636,841  nnzA= 1024, nnzB=1024
tid=0, i,j = 994,858  nnzA= 1024, nnzB=1024
tid=0, i,j = 302,850  nnzA= 1024, nnzB=1024
tid=0, i,j = 1022,864  nnzA= 1024, nnzB=1024
tid=0, i,j = 694,845  nnzA= 1024, nnzB=1024
tid=0, i,j = 567,851  nnzA= 1024, nnzB=1024
tid=0, i,j = 533,846  nnzA= 1024, nnzB=1024
tid=0, i,j = 1014,856  nnzA= 1024, nnzB=1024
tid=0, i,j = 159,840  nnzA= 1024, nnzB=1024
tid=0, i,j = 781,858  nnzA= 1024, nnzB=1024
tid=0, i,j = 136,842  nnzA= 1024, nnzB=1024
tid=0, i,j = 529,852  nnzA= 1024, nnzB=1024
tid=0, i,j = 103,841  nnzA= 1024, nnzB=1024
tid=0, i,j = 524,843  nnzA= 1024, nnzB=1024
tid=0, i,j = 716,859  nnzA= 1024, nnzB=1024
tid=0, i,j = 623,853  nnzA= 1024, nnzB=1024
tid=0, i,j = 218,836  nnzA= 1024, nnzB=1024
tid=0, i,j = 508,859  nnzA= 1024, nnzB=1024
tid=0, i,j = 541,839  nnzA= 1024, nnzB=1024
tid=0, i,j = 114,844  nnzA= 1024, nnzB=1024
tid=0, i,j = 464,849  nnzA= 1024, nnzB=1024
tid=0, i,j = 636,862  nnzA= 1024, nnzB=1024
tid=0, i,j = 106,855  nnzA= 1024, nnzB=1024
tid=0, i,j = 150,852  nnzA= 1024, nnzB=1024
tid=0, i,j = 711,839  nnzA= 1024, nnzB=1024
tid=0, i,j = 21,863  nnzA= 1024, nnzB=1024
tid=0, i,j = 650,857  nnzA= 1024, nnzB=1024
tid=0, i,j = 151,857  nnzA= 1024, nnzB=1024
tid=0, i,j = 48,867  nnzA= 1024, nnzB=1024
tid=0, i,j = 990,877  nnzA= 1024, nnzB=1024
tid=0, i,j = 176,880  nnzA= 1024, nnzB=1024
tid=0, i,j = 775,872  nnzA= 1024, nnzB=1024
tid=0, i,j = 687,900  nnzA= 1024, nnzB=1024
tid=0, i,j = 357,876  nnzA= 1024, nnzB=1024
tid=0, i,j = 929,883  nnzA= 1024, nnzB=1024
tid=0, i,j = 42,897  nnzA= 1024, nnzB=1024
tid=0, i,j = 722,877  nnzA= 1024, nnzB=1024
tid=0, i,j = 608,882  nnzA= 1024, nnzB=1024
tid=0, i,j = 653,892  nnzA= 1024, nnzB=1024
tid=0, i,j = 173,873  nnzA= 1024, nnzB=1024
tid=0, i,j = 679,891  nnzA= 1024, nnzB=1024
tid=0, i,j = 453,871  nnzA= 1024, nnzB=1024
tid=0, i,j = 943,888  nnzA= 1024, nnzB=1024
tid=0, i,j = 506,870  nnzA= 1024, nnzB=1024
tid=0, i,j = 37,895  nnzA= 1024, nnzB=1024
tid=0, i,j = 485,874  nnzA= 1024, nnzB=1024
tid=0, i,j = 487,887  nnzA= 1024, nnzB=1024
tid=0, i,j = 687,885  nnzA= 1024, nnzB=1024
tid=0, i,j = 97,866  nnzA= 1024, nnzB=1024
tid=0, i,j = 168,875  nnzA= 1024, nnzB=1024
tid=0, i,j = 110,888  nnzA= 1024, nnzB=1024
tid=0, i,j = 33,894  nnzA= 1024, nnzB=1024
tid=0, i,j = 695,895  nnzA= 1024, nnzB=1024
tid=0, i,j = 303,868  nnzA= 1024, nnzB=1024
tid=0, i,j = 23,881  nnzA= 1024, nnzB=1024
tid=0, i,j = 390,896  nnzA= 1024, nnzB=1024
tid=0, i,j = 364,869  nnzA= 1024, nnzB=1024
tid=0, i,j = 628,890  nnzA= 1024, nnzB=1024
tid=0, i,j = 643,884  nnzA= 1024, nnzB=1024
tid=0, i,j = 892,889  nnzA= 1024, nnzB=1024
tid=0, i,j = 605,901  nnzA= 1024, nnzB=1024
tid=0, i,j = 502,915  nnzA= 1024, nnzB=1024
tid=0, i,j = 366,915  nnzA= 1024, nnzB=1024
tid=0, i,j = 548,911  nnzA= 1024, nnzB=1024
tid=0, i,j = 479,906  nnzA= 1024, nnzB=1024
tid=0, i,j = 823,916  nnzA= 1024, nnzB=1024
tid=0, i,j = 496,939  nnzA= 1024, nnzB=1024
tid=0, i,j = 215,938  nnzA= 1024, nnzB=1024
tid=0, i,j = 480,918  nnzA= 1024, nnzB=1024
tid=0, i,j = 924,914  nnzA= 1024, nnzB=1024
tid=0, i,j = 674,907  nnzA= 1024, nnzB=1024
tid=0, i,j = 479,931  nnzA= 1024, nnzB=1024
tid=0, i,j = 13,930  nnzA= 1024, nnzB=1024
tid=0, i,j = 795,905  nnzA= 1024, nnzB=1024
tid=0, i,j = 165,934  nnzA= 1024, nnzB=1024
tid=0, i,j = 685,925  nnzA= 1024, nnzB=1024
tid=0, i,j = 608,920  nnzA= 1024, nnzB=1024
tid=0, i,j = 456,909  nnzA= 1024, nnzB=1024
tid=0, i,j = 966,921  nnzA= 1024, nnzB=1024
tid=0, i,j = 216,923  nnzA= 1024, nnzB=1024
tid=0, i,j = 808,904  nnzA= 1024, nnzB=1024
tid=0, i,j = 146,901  nnzA= 1024, nnzB=1024
tid=0, i,j = 167,910  nnzA= 1024, nnzB=1024
tid=0, i,j = 860,933  nnzA= 1024, nnzB=1024
tid=0, i,j = 399,936  nnzA= 1024, nnzB=1024
tid=0, i,j = 351,935  nnzA= 1024, nnzB=1024
tid=0, i,j = 420,916  nnzA= 1024, nnzB=1024
tid=0, i,j = 57,902  nnzA= 1024, nnzB=1024
tid=0, i,j = 970,919  nnzA= 1024, nnzB=1024
tid=0, i,j = 1021,903  nnzA= 1024, nnzB=1024
tid=0, i,j = 755,926  nnzA= 1024, nnzB=1024
tid=0, i,j = 538,929  nnzA= 1024, nnzB=1024
tid=0, i,j = 414,940  nnzA= 1024, nnzB=1024
tid=0, i,j = 221,951  nnzA= 1024, nnzB=1024
tid=0, i,j = 1017,950  nnzA= 1024, nnzB=1024
tid=0, i,j = 628,948  nnzA= 1024, nnzB=1024
tid=0, i,j = 109,944  nnzA= 1024, nnzB=1024
tid=0, i,j = 653,956  nnzA= 1024, nnzB=1024
tid=0, i,j = 316,949  nnzA= 1024, nnzB=1024
tid=0, i,j = 875,971  nnzA= 1024, nnzB=1024
tid=0, i,j = 823,955  nnzA= 1024, nnzB=1024
tid=0, i,j = 671,945  nnzA= 1024, nnzB=1024
tid=0, i,j = 856,970  nnzA= 1024, nnzB=1024
tid=0, i,j = 538,943  nnzA= 1024, nnzB=1024
tid=0, i,j = 370,964  nnzA= 1024, nnzB=1024
tid=0, i,j = 504,965  nnzA= 1024, nnzB=1024
tid=0, i,j = 644,958  nnzA= 1024, nnzB=1024
tid=0, i,j = 667,959  nnzA= 1024, nnzB=1024
tid=0, i,j = 828,961  nnzA= 1024, nnzB=1024
tid=0, i,j = 1023,967  nnzA= 1024, nnzB=1024
tid=0, i,j = 748,939  nnzA= 1024, nnzB=1024
tid=0, i,j = 246,946  nnzA= 1024, nnzB=1024
tid=0, i,j = 78,960  nnzA= 1024, nnzB=1024
tid=0, i,j = 31,943  nnzA= 1024, nnzB=1024
tid=0, i,j = 564,969  nnzA= 1024, nnzB=1024
tid=0, i,j = 400,968  nnzA= 1024, nnzB=1024
tid=0, i,j = 182,947  nnzA= 1024, nnzB=1024
tid=0, i,j = 483,966  nnzA= 1024, nnzB=1024
tid=0, i,j = 656,957  nnzA= 1024, nnzB=1024
tid=0, i,j = 457,955  nnzA= 1024, nnzB=1024
tid=0, i,j = 877,962  nnzA= 1024, nnzB=1024
tid=0, i,j = 356,942  nnzA= 1024, nnzB=1024
tid=0, i,j = 586,941  nnzA= 1024, nnzB=1024
tid=0, i,j = 397,963  nnzA= 1024, nnzB=1024
tid=0, i,j = 549,972  nnzA= 1024, nnzB=1024
tid=0, i,j = 72,985  nnzA= 1024, nnzB=1024
tid=0, i,j = 582,984  nnzA= 1024, nnzB=1024
tid=0, i,j = 743,985  nnzA= 1024, nnzB=1024
tid=0, i,j = 340,987  nnzA= 1024, nnzB=1024
tid=0, i,j = 123,978  nnzA= 1024, nnzB=1024
tid=0, i,j = 449,984  nnzA= 1024, nnzB=1024
tid=0, i,j = 120,987  nnzA= 1024, nnzB=1024
tid=0, i,j = 371,980  nnzA= 1024, nnzB=1024
tid=0, i,j = 980,976  nnzA= 1024, nnzB=1024
tid=0, i,j = 58,983  nnzA= 1024, nnzB=1024
tid=0, i,j = 323,986  nnzA= 1024, nnzB=1024
tid=0, i,j = 175,981  nnzA= 1024, nnzB=1024
tid=0, i,j = 630,972  nnzA= 1024, nnzB=1024
tid=0, i,j = 347,977  nnzA= 1024, nnzB=1024
tid=0, i,j = 934,974  nnzA= 1024, nnzB=1024
tid=0, i,j = 170,995  nnzA= 1024, nnzB=1024
tid=0, i,j = 660,991  nnzA= 1024, nnzB=1024
tid=0, i,j = 172,988  nnzA= 1024, nnzB=1024
tid=0, i,j = 67,1020  nnzA= 1024, nnzB=1024
tid=0, i,j = 514,990  nnzA= 1024, nnzB=1024
tid=0, i,j = 946,997  nnzA= 1024, nnzB=1024
tid=0, i,j = 1022,1006  nnzA= 1024, nnzB=1024
tid=0, i,j = 287,1019  nnzA= 1024, nnzB=1024
tid=0, i,j = 678,998  nnzA= 1024, nnzB=1024
tid=0, i,j = 877,1001  nnzA= 1024, nnzB=1024
tid=0, i,j = 491,1022  nnzA= 1024, nnzB=1024
tid=0, i,j = 167,999  nnzA= 1024, nnzB=1024
tid=0, i,j = 585,989  nnzA= 1024, nnzB=1024
tid=0, i,j = 250,1004  nnzA= 1024, nnzB=1024
tid=0, i,j = 87,993  nnzA= 1024, nnzB=1024
tid=0, i,j = 151,1020  nnzA= 1024, nnzB=1024
tid=0, i,j = 180,1017  nnzA= 1024, nnzB=1024
tid=0, i,j = 254,1018  nnzA= 1024, nnzB=1024
tid=0, i,j = 667,1014  nnzA= 1024, nnzB=1024
tid=0, i,j = 992,994  nnzA= 1024, nnzB=1024
tid=0, i,j = 531,992  nnzA= 1024, nnzB=1024
tid=0, i,j = 286,1002  nnzA= 1024, nnzB=1024
tid=0, i,j = 15,992  nnzA= 1024, nnzB=1024
tid=0, i,j = 674,993  nnzA= 1024, nnzB=1024
tid=0, i,j = 127,1015  nnzA= 1024, nnzB=1024
tid=0, i,j = 810,1021  nnzA= 1024, nnzB=1024
tid=0, i,j = 533,1012  nnzA= 1024, nnzB=1024
tid=0, i,j = 457,1016  nnzA= 1024, nnzB=1024
tid=0, i,j = 159,1008  nnzA= 1024, nnzB=1024
tid=0, i,j = 613,1015  nnzA= 1024, nnzB=1024
tid=0, i,j = 574,1013  nnzA= 1024, nnzB=1024
tid=0, i,j = 574,1009  nnzA= 1024, nnzB=1024
tid=0, i,j = 840,1023  nnzA= 1024, nnzB=1024
Printing bucketp
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
Done.
returned from kernel 9.10131ms

  1024x1024 GraphBLAS int32_t matrix, sparse (jumbled) by row
  sparsity control: sparse only
  C GPU, 1024 entries, memory: 28.2 KB

    (0,478)   268
    (0,574)   246
    (2,376)   235
    (5,560)   278
    (6,996)   255
    (7,183)   256
    (7,666)   248
    (8,896)   255
    (9,187)   274
    (10,446)   256
    (11,46)   270
    (11,955)   284
    (12,397)   250
    (12,953)   259
    (13,192)   278
    (14,421)   267
    (15,568)   251
    (16,788)   225
    (16,904)   246
    (17,928)   240
    (18,103)   262
    (19,821)   235
    (19,886)   236
    (20,474)   267
    (21,479)   248
    (21,975)   251
    (22,569)   255
    (23,310)   272
    (24,905)   262
    ...
Not using cuda path. M_is_hypersparse: 0, A->iso: 0, B->iso: 0, A_BITMAP: 0, B_BITMAP: 0, GB_IS_FULL(A): 0, GB_IS_FULL(B): 0, semiring header size: 32
 rmm_wrap_alloc 16384 bytes

  1024x1024 GraphBLAS bool matrix, sparse by row
  sparsity control: sparse only
  M actual, 1024 entries, memory: 25.2 KB

    (0,478)   1
    (0,574)   1
    (2,376)   1
    (5,560)   1
    (6,996)   1
    (7,183)   1
    (7,666)   1
    (8,896)   1
    (9,187)   1
    (10,446)   1
    (11,46)   1
    (11,955)   1
    (12,397)   1
    (12,953)   1
    (13,192)   1
    (14,421)   1
    (15,568)   1
    (16,788)   1
    (16,904)   1
    (17,928)   1
    (18,103)   1
    (19,821)   1
    (19,886)   1
    (20,474)   1
    (21,479)   1
    (21,975)   1
    (22,569)   1
    (23,310)   1
    (24,905)   1
    ...

  1024x1024 GraphBLAS int32_t matrix, sparse by row
  sparsity control: sparse only
  C GPU, 1024 entries, memory: 28.2 KB

    (0,478)   268
    (0,574)   246
    (2,376)   235
    (5,560)   278
    (6,996)   255
    (7,183)   256
    (7,666)   248
    (8,896)   255
    (9,187)   274
    (10,446)   256
    (11,46)   270
    (11,955)   284
    (12,397)   250
    (12,953)   259
    (13,192)   278
    (14,421)   267
    (15,568)   251
    (16,788)   225
    (16,904)   246
    (17,928)   240
    (18,103)   262
    (19,821)   235
    (19,886)   236
    (20,474)   267
    (21,479)   248
    (21,975)   251
    (22,569)   255
    (23,310)   272
    (24,905)   262
    (25,241)   225
    (26,428)   224
    (28,107)   228
    (28,441)   274
    (30,694)   269
    (32,121)   239
    (33,81)   249
    (34,804)   269
    (36,451)   264
    (37,609)   263
    (38,138)   258
    (39,698)   263
    (40,950)   236
    (41,568)   236
    (42,324)   238
    (43,798)   244
    (46,208)   240
    (47,70)   264
    (48,336)   277
    (49,476)   254
    (50,35)   242
    (51,556)   265
    (52,999)   247
    (53,940)   264
    (54,558)   257
    (54,960)   259
    (55,979)   251
    (56,90)   305
    (57,846)   275
    (57,893)   272
    (58,35)   260
    (59,108)   255
    (60,479)   255
    (61,590)   264
    (62,771)   259
    (63,50)   267
    (64,268)   276
    (65,694)   249
    (66,719)   261
    (67,411)   239
    (68,324)   246
    (69,477)   254
    (70,539)   241
    (71,228)   235
    (72,297)   242
    (73,665)   269
    (75,855)   227
    (76,248)   235
    (77,433)   251
    (78,90)   275
    (81,754)   270
    (82,243)   286
    (84,253)   267
    (86,104)   247
    (87,657)   255
    (89,825)   251
    (90,37)   248
    (91,234)   259
    (91,519)   276
    (92,74)   259
    (92,218)   266
    (92,690)   256
    (93,486)   268
    (94,637)   277
    (94,722)   261
    (96,564)   282
    (97,748)   245
    (99,326)   249
    (100,281)   248
    (102,609)   258
    (103,621)   277
    (104,644)   226
    (106,652)   244
    (107,239)   273
    (107,522)   234
    (108,131)   274
    (109,884)   253
    (110,402)   251
    (111,905)   256
    (112,127)   241
    (112,779)   239
    (113,278)   251
    (114,519)   264
    (115,240)   262
    (116,198)   258
    (117,219)   230
    (117,338)   251
    (118,99)   260
    (120,477)   266
    (121,554)   271
    (121,715)   291
    (122,151)   253
    (123,621)   252
    (125,177)   236
    (126,36)   275
    (128,820)   263
    (128,835)   248
    (129,660)   255
    (130,623)   246
    (130,807)   273
    (131,253)   271
    (131,355)   260
    (132,570)   264
    (133,492)   278
    (134,821)   268
    (135,295)   266
    (136,108)   263
    (137,834)   271
    (138,288)   253
    (139,284)   249
    (139,945)   286
    (140,887)   265
    (141,199)   274
    (142,87)   235
    (142,225)   261
    (143,123)   258
    (144,574)   262
    (145,552)   250
    (146,194)   244
    (146,995)   255
    (148,357)   253
    (149,949)   253
    (150,717)   255
    (151,484)   272
    (156,290)   250
    (157,714)   302
    (157,974)   274
    (158,959)   228
    (160,297)   252
    (162,601)   264
    (163,816)   271
    (164,221)   254
    (165,396)   243
    (166,801)   242
    (167,879)   234
    (168,321)   273
    (169,901)   286
    (170,612)   282
    (171,15)   253
    (172,951)   261
    (174,0)   258
    (174,595)   259
    (175,669)   254
    (176,108)   261
    (176,188)   279
    (176,614)   269
    (176,781)   255
    (177,17)   261
    (178,631)   265
    (179,932)   225
    (180,830)   258
    (182,675)   259
    (182,1001)   257
    (183,692)   240
    (184,143)   247
    (185,450)   240
    (186,779)   270
    (187,997)   256
    (188,357)   265
    (189,111)   250
    (190,990)   262
    (192,644)   269
    (192,953)   250
    (193,135)   246
    (194,137)   267
    (195,922)   276
    (197,859)   269
    (198,910)   239
    (199,531)   270
    (201,907)   253
    (202,863)   255
    (203,865)   232
    (204,614)   268
    (207,826)   239
    (208,985)   262
    (209,808)   256
    (210,659)   250
    (211,71)   236
    (211,931)   266
    (212,426)   291
    (213,152)   255
    (214,928)   264
    (215,268)   270
    (216,550)   268
    (217,921)   252
    (218,704)   246
    (218,922)   265
    (219,66)   232
    (220,704)   235
    (221,56)   280
    (221,551)   273
    (222,545)   243
    (223,1016)   249
    (224,721)   261
    (225,935)   270
    (226,727)   254
    (228,743)   240
    (229,535)   242
    (230,382)   245
    (231,551)   260
    (232,897)   273
    (233,570)   235
    (234,520)   246
    (235,522)   261
    (236,221)   244
    (237,755)   271
    (238,964)   243
    (239,82)   243
    (240,388)   238
    (241,500)   276
    (242,124)   240
    (242,193)   243
    (242,621)   243
    (243,300)   254
    (244,588)   256
    (244,1004)   265
    (245,494)   253
    (246,326)   262
    (247,115)   263
    (247,147)   263
    (248,233)   224
    (250,485)   259
    (251,708)   262
    (252,197)   237
    (253,485)   256
    (254,40)   243
    (254,238)   261
    (255,895)   243
    (256,114)   268
    (257,461)   250
    (257,796)   237
    (258,233)   236
    (260,884)   257
    (261,945)   279
    (262,368)   260
    (264,755)   251
    (265,124)   253
    (266,352)   255
    (267,10)   238
    (268,234)   248
    (269,400)   248
    (270,877)   259
    (270,924)   231
    (271,944)   245
    (272,67)   253
    (273,100)   273
    (274,979)   284
    (276,333)   258
    (277,377)   245
    (279,877)   252
    (280,18)   242
    (281,449)   240
    (282,179)   259
    (283,1007)   244
    (284,595)   271
    (285,32)   231
    (286,37)   245
    (287,126)   299
    (287,394)   257
    (288,848)   267
    (290,317)   257
    (291,594)   264
    (292,562)   257
    (294,466)   265
    (294,960)   262
    (295,1)   245
    (295,106)   252
    (296,109)   245
    (296,183)   243
    (296,245)   238
    (297,912)   281
    (297,1006)   269
    (299,159)   271
    (300,554)   260
    (301,774)   240
    (302,30)   273
    (303,645)   243
    (304,229)   263
    (305,622)   282
    (307,264)   267
    (308,28)   241
    (309,328)   249
    (309,627)   280
    (310,357)   234
    (311,355)   243
    (312,61)   239
    (313,758)   265
    (314,571)   268
    (315,177)   236
    (315,298)   244
    (315,741)   236
    (316,177)   226
    (316,308)   279
    (317,323)   245
    (318,595)   288
    (319,126)   281
    (320,468)   260
    (321,73)   267
    (322,235)   246
    (323,375)   233
    (323,651)   255
    (324,549)   239
    (325,306)   246
    (325,487)   279
    (326,649)   272
    (327,704)   246
    (328,142)   271
    (329,176)   257
    (330,848)   249
    (330,965)   244
    (332,795)   265
    (334,695)   275
    (335,694)   236
    (336,775)   251
    (336,808)   231
    (337,608)   236
    (338,993)   243
    (339,680)   277
    (340,849)   251
    (341,36)   273
    (342,723)   252
    (343,678)   235
    (344,384)   255
    (344,680)   248
    (345,75)   252
    (347,996)   264
    (348,60)   280
    (348,821)   297
    (349,804)   265
    (350,282)   254
    (351,142)   272
    (351,937)   275
    (352,160)   256
    (353,536)   260
    (355,352)   264
    (356,340)   243
    (358,678)   257
    (360,679)   276
    (361,794)   255
    (361,989)   264
    (362,816)   295
    (363,206)   250
    (364,629)   267
    (365,990)   269
    (366,841)   262
    (366,971)   261
    (367,888)   315
    (368,587)   245
    (369,684)   261
    (370,270)   253
    (371,327)   257
    (372,471)   258
    (373,88)   246
    (374,669)   242
    (375,992)   241
    (376,336)   259
    (377,86)   292
    (378,882)   270
    (379,592)   264
    (380,77)   258
    (380,643)   240
    (381,1012)   255
    (382,816)   253
    (383,711)   240
    (385,670)   249
    (386,537)   255
    (387,347)   240
    (388,494)   268
    (389,328)   235
    (389,733)   237
    (390,551)   269
    (391,59)   254
    (391,600)   270
    (394,692)   247
    (396,645)   233
    (397,835)   259
    (398,107)   261
    (398,246)   264
    (399,436)   267
    (400,172)   260
    (400,382)   240
    (401,790)   245
    (402,320)   258
    (403,40)   257
    (404,641)   250
    (405,49)   269
    (405,475)   257
    (407,320)   277
    (408,61)   253
    (410,754)   239
    (411,643)   269
    (412,949)   260
    (413,94)   254
    (414,991)   257
    (415,26)   244
    (416,575)   254
    (417,366)   232
    (418,160)   258
    (418,669)   266
    (419,209)   252
    (419,285)   266
    (420,748)   277
    (421,614)   258
    (422,177)   217
    (423,873)   251
    (424,542)   258
    (425,263)   247
    (426,377)   261
    (427,149)   236
    (428,950)   246
    (429,305)   277
    (430,718)   237
    (431,51)   246
    (432,857)   246
    (434,604)   248
    (435,152)   248
    (436,356)   286
    (437,105)   235
    (438,814)   254
    (440,338)   251
    (441,982)   259
    (442,880)   244
    (443,753)   273
    (444,669)   240
    (445,952)   236
    (446,741)   264
    (447,970)   247
    (448,646)   244
    (448,744)   237
    (449,835)   286
    (450,579)   241
    (451,147)   258
    (451,1017)   257
    (452,868)   247
    (453,26)   262
    (454,415)   236
    (454,668)   249
    (455,43)   247
    (456,849)   270
    (456,985)   251
    (457,218)   266
    (458,510)   282
    (459,737)   250
    (460,836)   269
    (461,849)   263
    (461,917)   270
    (462,900)   262
    (463,316)   256
    (464,762)   250
    (465,355)   262
    (465,801)   254
    (466,673)   247
    (467,112)   260
    (468,288)   261
    (470,889)   248
    (471,650)   269
    (473,121)   239
    (473,127)   251
    (474,487)   265
    (475,382)   218
    (476,44)   258
    (477,342)   257
    (478,786)   267
    (480,667)   244
    (481,558)   252
    (482,680)   224
    (483,517)   270
    (484,961)   276
    (485,274)   249
    (486,1015)   262
    (487,194)   241
    (489,802)   252
    (490,811)   260
    (491,319)   254
    (492,377)   242
    (494,432)   207
    (495,809)   292
    (496,267)   255
    (496,902)   247
    (498,194)   244
    (499,952)   273
    (500,84)   259
    (501,704)   233
    (503,519)   278
    (504,510)   264
    (504,887)   262
    (505,574)   285
    (507,643)   259
    (508,449)   241
    (512,892)   253
    (513,271)   242
    (514,404)   276
    (515,758)   263
    (517,369)   271
    (518,293)   245
    (519,786)   261
    (520,270)   256
    (521,1013)   259
    (522,284)   262
    (523,632)   265
    (524,945)   273
    (525,94)   249
    (525,362)   257
    (526,52)   282
    (527,61)   242
    (528,294)   274
    (529,145)   248
    (529,998)   261
    (530,112)   253
    (531,908)   249
    (533,674)   252
    (534,505)   227
    (535,660)   261
    (535,776)   265
    (536,500)   274
    (537,799)   258
    (538,492)   241
    (538,861)   258
    (540,245)   272
    (542,137)   268
    (545,658)   246
    (546,213)   272
    (547,767)   255
    (547,912)   279
    (547,1018)   252
    (548,46)   261
    (548,697)   265
    (549,602)   257
    (550,927)   277
    (552,710)   271
    (553,391)   244
    (554,351)   227
    (555,10)   235
    (556,26)   238
    (557,910)   255
    (558,552)   261
    (560,792)   265
    (561,597)   257
    (562,182)   264
    (562,862)   261
    (563,877)   276
    (564,310)   259
    (564,609)   251
    (565,490)   251
    (566,564)   263
    (566,607)   251
    (569,872)   279
    (570,465)   263
    (571,271)   271
    (571,919)   243
    (572,630)   237
    (574,603)   272
    (576,256)   284
    (579,274)   236
    (580,182)   252
    (581,445)   251
    (582,177)   196
    (583,118)   280
    (584,399)   250
    (585,433)   244
    (587,254)   237
    (588,914)   254
    (589,1016)   269
    (590,95)   277
    (590,802)   279
    (591,978)   265
    (592,527)   245
    (593,143)   276
    (594,430)   232
    (595,787)   261
    (596,677)   247
    (598,788)   250
    (599,127)   228
    (600,339)   249
    (601,478)   271
    (602,218)   271
    (603,759)   242
    (604,270)   247
    (605,76)   243
    (606,930)   257
    (608,832)   267
    (609,287)   265
    (610,794)   256
    (611,759)   247
    (612,1006)   282
    (613,398)   239
    (614,386)   259
    (615,115)   264
    (616,928)   254
    (617,30)   260
    (618,361)   243
    (619,996)   222
    (620,5)   248
    (620,337)   256
    (621,41)   251
    (623,44)   267
    (623,79)   252
    (623,966)   263
    (624,19)   270
    (624,242)   258
    (624,524)   244
    (625,683)   288
    (626,51)   242
    (627,361)   257
    (628,396)   248
    (629,882)   260
    (630,341)   237
    (631,49)   238
    (631,585)   234
    (632,73)   268
    (634,912)   278
    (635,882)   266
    (636,617)   252
    (637,285)   251
    (637,716)   275
    (638,113)   274
    (638,367)   254
    (639,616)   258
    (640,837)   234
    (641,457)   251
    (643,934)   265
    (647,783)   240
    (648,195)   270
    (649,614)   239
    (650,957)   265
    (651,281)   252
    (652,973)   267
    (653,60)   249
    (653,333)   268
    (654,605)   272
    (655,910)   234
    (656,349)   255
    (659,17)   250
    (660,591)   275
    (661,512)   277
    (663,767)   258
    (664,158)   224
    (665,77)   239
    (666,503)   248
    (667,951)   261
    (668,365)   278
    (669,300)   273
    (671,141)   272
    (671,565)   285
    (672,819)   223
    (674,36)   249
    (674,819)   249
    (675,454)   234
    (676,242)   263
    (677,289)   278
    (677,647)   255
    (678,802)   240
    (679,899)   242
    (680,398)   266
    (681,390)   266
    (681,699)   233
    (682,117)   246
    (683,110)   265
    (684,907)   243
    (685,17)   239
    (686,202)   255
    (687,45)   222
    (688,287)   242
    (689,502)   257
    (690,299)   252
    (691,392)   256
    (692,600)   264
    (694,378)   243
    (695,702)   271
    (696,102)   251
    (698,631)   252
    (699,152)   272
    (700,840)   267
    (701,323)   239
    (702,777)   232
    (703,132)   264
    (704,374)   261
    (705,579)   254
    (706,511)   233
    (707,76)   261
    (708,259)   269
    (708,925)   266
    (709,872)   269
    (709,873)   265
    (710,107)   235
    (710,293)   266
    (711,210)   257
    (711,462)   267
    (714,475)   245
    (715,172)   253
    (715,751)   241
    (716,697)   249
    (717,234)   239
    (717,620)   244
    (718,848)   260
    (719,331)   265
    (720,201)   255
    (720,725)   272
    (721,806)   262
    (722,415)   239
    (722,934)   262
    (723,675)   249
    (724,480)   259
    (726,337)   259
    (727,177)   237
    (728,797)   272
    (729,884)   241
    (730,767)   249
    (731,275)   275
    (732,910)   231
    (733,763)   283
    (734,574)   263
    (735,268)   253
    (736,115)   218
    (737,146)   238
    (737,912)   249
    (738,1023)   252
    (739,335)   259
    (740,596)   233
    (741,365)   270
    (741,630)   256
    (742,485)   250
    (743,186)   252
    (745,621)   250
    (745,645)   246
    (746,273)   276
    (747,91)   256
    (748,886)   245
    (749,59)   273
    (749,755)   254
    (751,348)   253
    (752,313)   255
    (752,742)   277
    (752,745)   260
    (753,472)   260
    (753,592)   249
    (754,1007)   234
    (756,633)   255
    (758,847)   268
    (759,500)   253
    (760,340)   251
    (760,381)   270
    (762,962)   270
    (763,954)   236
    (764,392)   236
    (764,913)   258
    (766,915)   265
    (766,936)   259
    (767,372)   266
    (768,307)   266
    (770,458)   265
    (771,103)   241
    (771,487)   264
    (773,56)   248
    (774,773)   259
    (775,115)   266
    (776,537)   254
    (777,392)   258
    (778,893)   287
    (779,644)   270
    (780,256)   263
    (781,899)   261
    (782,399)   251
    (782,892)   277
    (783,614)   237
    (784,54)   231
    (785,816)   261
    (786,462)   248
    (787,876)   262
    (788,273)   276
    (789,696)   260
    (790,471)   251
    (791,793)   261
    (792,636)   264
    (792,955)   263
    (793,809)   269
    (794,986)   249
    (795,656)   253
    (796,347)   246
    (797,880)   264
    (798,802)   256
    (799,294)   267
    (800,970)   231
    (801,130)   244
    (803,896)   256
    (804,1022)   257
    (805,32)   232
    (805,479)   257
    (806,889)   245
    (807,504)   251
    (809,719)   272
    (809,737)   270
    (810,646)   241
    (811,547)   238
    (812,375)   262
    (813,200)   257
    (815,408)   252
    (816,902)   256
    (817,430)   241
    (818,985)   256
    (819,688)   254
    (821,839)   257
    (822,747)   262
    (823,39)   259
    (824,886)   241
    (825,406)   247
    (826,814)   242
    (827,625)   266
    (828,407)   260
    (829,511)   254
    (830,915)   263
    (831,982)   266
    (832,1003)   246
    (833,362)   259
    (833,999)   258
    (834,136)   263
    (834,295)   267
    (835,115)   281
    (836,218)   272
    (837,565)   285
    (839,541)   280
    (839,711)   273
    (840,159)   251
    (841,103)   240
    (841,636)   271
    (842,136)   257
    (843,524)   254
    (844,114)   260
    (845,694)   268
    (846,533)   274
    (847,741)   243
    (848,483)   269
    (849,464)   257
    (850,302)   245
    (851,567)   248
    (852,150)   262
    (852,529)   258
    (853,623)   234
    (855,106)   265
    (856,1014)   261
    (857,151)   270
    (857,650)   280
    (858,781)   242
    (858,994)   242
    (859,508)   255
    (859,716)   284
    (862,636)   241
    (863,21)   242
    (864,1022)   242
    (865,972)   264
    (866,97)   243
    (867,48)   235
    (868,303)   249
    (869,364)   255
    (870,506)   241
    (871,453)   255
    (872,775)   259
    (873,173)   269
    (874,485)   249
    (875,168)   249
    (876,357)   243
    (877,722)   255
    (877,990)   267
    (880,176)   291
    (881,23)   268
    (882,608)   248
    (883,929)   251
    (884,643)   247
    (885,687)   259
    (887,487)   257
    (888,110)   266
    (888,943)   264
    (889,892)   267
    (890,628)   261
    (891,679)   258
    (892,653)   254
    (894,33)   258
    (895,37)   266
    (895,695)   269
    (896,390)   269
    (897,42)   265
    (900,687)   281
    (901,146)   241
    (901,605)   261
    (902,57)   230
    (903,1021)   250
    (904,808)   237
    (905,795)   271
    (906,479)   257
    (907,674)   277
    (909,456)   250
    (910,167)   265
    (911,548)   248
    (914,924)   250
    (915,366)   253
    (915,502)   238
    (916,420)   273
    (916,823)   247
    (918,480)   248
    (919,970)   259
    (920,608)   246
    (921,966)   230
    (923,216)   247
    (925,685)   275
    (926,755)   274
    (929,538)   268
    (930,13)   259
    (931,479)   250
    (933,860)   261
    (934,165)   250
    (935,351)   233
    (936,399)   244
    (938,215)   264
    (939,496)   276
    (939,748)   262
    (940,414)   242
    (941,586)   265
    (942,356)   274
    (943,31)   263
    (943,538)   262
    (944,109)   249
    (945,671)   258
    (946,246)   255
    (947,182)   262
    (948,628)   262
    (949,316)   238
    (950,1017)   259
    (951,221)   250
    (955,457)   237
    (955,823)   241
    (956,653)   258
    (957,656)   255
    (958,644)   238
    (959,667)   246
    (960,78)   247
    (961,828)   252
    (962,877)   269
    (963,397)   284
    (964,370)   262
    (965,504)   244
    (966,483)   246
    (967,1023)   246
    (968,400)   233
    (969,564)   254
    (970,856)   257
    (971,875)   243
    (972,549)   259
    (972,630)   240
    (974,934)   281
    (976,980)   247
    (977,347)   230
    (978,123)   258
    (980,371)   245
    (981,175)   258
    (983,58)   252
    (984,449)   248
    (984,582)   246
    (985,72)   253
    (985,743)   237
    (986,323)   248
    (987,120)   241
    (987,340)   266
    (988,172)   251
    (989,585)   241
    (990,514)   271
    (991,660)   256
    (992,15)   283
    (992,531)   277
    (993,87)   267
    (993,674)   252
    (994,992)   244
    (995,170)   269
    (997,946)   270
    (998,678)   251
    (999,167)   258
    (1001,877)   250
    (1002,286)   242
    (1004,250)   259
    (1006,1022)   248
    (1008,159)   264
    (1009,574)   258
    (1012,533)   270
    (1013,574)   273
    (1014,667)   247
    (1015,127)   244
    (1015,613)   245
    (1016,457)   246
    (1017,180)   267
    (1018,254)   237
    (1019,287)   248
    (1020,67)   261
    (1020,151)   248
    (1021,810)   239
    (1022,491)   268
    (1023,840)   264


  1024x1024 GraphBLAS int32_t matrix, sparse by row
  C_actual, 1024 entries, memory: 40.2 KB

    (0,478)   268
    (0,574)   246
    (2,376)   235
    (5,560)   278
    (6,996)   255
    (7,183)   256
    (7,666)   248
    (8,896)   255
    (9,187)   274
    (10,446)   256
    (11,46)   270
    (11,955)   284
    (12,397)   250
    (12,953)   259
    (13,192)   278
    (14,421)   267
    (15,568)   251
    (16,788)   225
    (16,904)   246
    (17,928)   240
    (18,103)   262
    (19,821)   235
    (19,886)   236
    (20,474)   267
    (21,479)   248
    (21,975)   251
    (22,569)   255
    (23,310)   272
    (24,905)   262
    (25,241)   225
    (26,428)   224
    (28,107)   228
    (28,441)   274
    (30,694)   269
    (32,121)   239
    (33,81)   249
    (34,804)   269
    (36,451)   264
    (37,609)   263
    (38,138)   258
    (39,698)   263
    (40,950)   236
    (41,568)   236
    (42,324)   238
    (43,798)   244
    (46,208)   240
    (47,70)   264
    (48,336)   277
    (49,476)   254
    (50,35)   242
    (51,556)   265
    (52,999)   247
    (53,940)   264
    (54,558)   257
    (54,960)   259
    (55,979)   251
    (56,90)   305
    (57,846)   275
    (57,893)   272
    (58,35)   260
    (59,108)   255
    (60,479)   255
    (61,590)   264
    (62,771)   259
    (63,50)   267
    (64,268)   276
    (65,694)   249
    (66,719)   261
    (67,411)   239
    (68,324)   246
    (69,477)   254
    (70,539)   241
    (71,228)   235
    (72,297)   242
    (73,665)   269
    (75,855)   227
    (76,248)   235
    (77,433)   251
    (78,90)   275
    (81,754)   270
    (82,243)   286
    (84,253)   267
    (86,104)   247
    (87,657)   255
    (89,825)   251
    (90,37)   248
    (91,234)   259
    (91,519)   276
    (92,74)   259
    (92,218)   266
    (92,690)   256
    (93,486)   268
    (94,637)   277
    (94,722)   261
    (96,564)   282
    (97,748)   245
    (99,326)   249
    (100,281)   248
    (102,609)   258
    (103,621)   277
    (104,644)   226
    (106,652)   244
    (107,239)   273
    (107,522)   234
    (108,131)   274
    (109,884)   253
    (110,402)   251
    (111,905)   256
    (112,127)   241
    (112,779)   239
    (113,278)   251
    (114,519)   264
    (115,240)   262
    (116,198)   258
    (117,219)   230
    (117,338)   251
    (118,99)   260
    (120,477)   266
    (121,554)   271
    (121,715)   291
    (122,151)   253
    (123,621)   252
    (125,177)   236
    (126,36)   275
    (128,820)   263
    (128,835)   248
    (129,660)   255
    (130,623)   246
    (130,807)   273
    (131,253)   271
    (131,355)   260
    (132,570)   264
    (133,492)   278
    (134,821)   268
    (135,295)   266
    (136,108)   263
    (137,834)   271
    (138,288)   253
    (139,284)   249
    (139,945)   286
    (140,887)   265
    (141,199)   274
    (142,87)   235
    (142,225)   261
    (143,123)   258
    (144,574)   262
    (145,552)   250
    (146,194)   244
    (146,995)   255
    (148,357)   253
    (149,949)   253
    (150,717)   255
    (151,484)   272
    (156,290)   250
    (157,714)   302
    (157,974)   274
    (158,959)   228
    (160,297)   252
    (162,601)   264
    (163,816)   271
    (164,221)   254
    (165,396)   243
    (166,801)   242
    (167,879)   234
    (168,321)   273
    (169,901)   286
    (170,612)   282
    (171,15)   253
    (172,951)   261
    (174,0)   258
    (174,595)   259
    (175,669)   254
    (176,108)   261
    (176,188)   279
    (176,614)   269
    (176,781)   255
    (177,17)   261
    (178,631)   265
    (179,932)   225
    (180,830)   258
    (182,675)   259
    (182,1001)   257
    (183,692)   240
    (184,143)   247
    (185,450)   240
    (186,779)   270
    (187,997)   256
    (188,357)   265
    (189,111)   250
    (190,990)   262
    (192,644)   269
    (192,953)   250
    (193,135)   246
    (194,137)   267
    (195,922)   276
    (197,859)   269
    (198,910)   239
    (199,531)   270
    (201,907)   253
    (202,863)   255
    (203,865)   232
    (204,614)   268
    (207,826)   239
    (208,985)   262
    (209,808)   256
    (210,659)   250
    (211,71)   236
    (211,931)   266
    (212,426)   291
    (213,152)   255
    (214,928)   264
    (215,268)   270
    (216,550)   268
    (217,921)   252
    (218,704)   246
    (218,922)   265
    (219,66)   232
    (220,704)   235
    (221,56)   280
    (221,551)   273
    (222,545)   243
    (223,1016)   249
    (224,721)   261
    (225,935)   270
    (226,727)   254
    (228,743)   240
    (229,535)   242
    (230,382)   245
    (231,551)   260
    (232,897)   273
    (233,570)   235
    (234,520)   246
    (235,522)   261
    (236,221)   244
    (237,755)   271
    (238,964)   243
    (239,82)   243
    (240,388)   238
    (241,500)   276
    (242,124)   240
    (242,193)   243
    (242,621)   243
    (243,300)   254
    (244,588)   256
    (244,1004)   265
    (245,494)   253
    (246,326)   262
    (247,115)   263
    (247,147)   263
    (248,233)   224
    (250,485)   259
    (251,708)   262
    (252,197)   237
    (253,485)   256
    (254,40)   243
    (254,238)   261
    (255,895)   243
    (256,114)   268
    (257,461)   250
    (257,796)   237
    (258,233)   236
    (260,884)   257
    (261,945)   279
    (262,368)   260
    (264,755)   251
    (265,124)   253
    (266,352)   255
    (267,10)   238
    (268,234)   248
    (269,400)   248
    (270,877)   259
    (270,924)   231
    (271,944)   245
    (272,67)   253
    (273,100)   273
    (274,979)   284
    (276,333)   258
    (277,377)   245
    (279,877)   252
    (280,18)   242
    (281,449)   240
    (282,179)   259
    (283,1007)   244
    (284,595)   271
    (285,32)   231
    (286,37)   245
    (287,126)   299
    (287,394)   257
    (288,848)   267
    (290,317)   257
    (291,594)   264
    (292,562)   257
    (294,466)   265
    (294,960)   262
    (295,1)   245
    (295,106)   252
    (296,109)   245
    (296,183)   243
    (296,245)   238
    (297,912)   281
    (297,1006)   269
    (299,159)   271
    (300,554)   260
    (301,774)   240
    (302,30)   273
    (303,645)   243
    (304,229)   263
    (305,622)   282
    (307,264)   267
    (308,28)   241
    (309,328)   249
    (309,627)   280
    (310,357)   234
    (311,355)   243
    (312,61)   239
    (313,758)   265
    (314,571)   268
    (315,177)   236
    (315,298)   244
    (315,741)   236
    (316,177)   226
    (316,308)   279
    (317,323)   245
    (318,595)   288
    (319,126)   281
    (320,468)   260
    (321,73)   267
    (322,235)   246
    (323,375)   233
    (323,651)   255
    (324,549)   239
    (325,306)   246
    (325,487)   279
    (326,649)   272
    (327,704)   246
    (328,142)   271
    (329,176)   257
    (330,848)   249
    (330,965)   244
    (332,795)   265
    (334,695)   275
    (335,694)   236
    (336,775)   251
    (336,808)   231
    (337,608)   236
    (338,993)   243
    (339,680)   277
    (340,849)   251
    (341,36)   273
    (342,723)   252
    (343,678)   235
    (344,384)   255
    (344,680)   248
    (345,75)   252
    (347,996)   264
    (348,60)   280
    (348,821)   297
    (349,804)   265
    (350,282)   254
    (351,142)   272
    (351,937)   275
    (352,160)   256
    (353,536)   260
    (355,352)   264
    (356,340)   243
    (358,678)   257
    (360,679)   276
    (361,794)   255
    (361,989)   264
    (362,816)   295
    (363,206)   250
    (364,629)   267
    (365,990)   269
    (366,841)   262
    (366,971)   261
    (367,888)   315
    (368,587)   245
    (369,684)   261
    (370,270)   253
    (371,327)   257
    (372,471)   258
    (373,88)   246
    (374,669)   242
    (375,992)   241
    (376,336)   259
    (377,86)   292
    (378,882)   270
    (379,592)   264
    (380,77)   258
    (380,643)   240
    (381,1012)   255
    (382,816)   253
    (383,711)   240
    (385,670)   249
    (386,537)   255
    (387,347)   240
    (388,494)   268
    (389,328)   235
    (389,733)   237
    (390,551)   269
    (391,59)   254
    (391,600)   270
    (394,692)   247
    (396,645)   233
    (397,835)   259
    (398,107)   261
    (398,246)   264
    (399,436)   267
    (400,172)   260
    (400,382)   240
    (401,790)   245
    (402,320)   258
    (403,40)   257
    (404,641)   250
    (405,49)   269
    (405,475)   257
    (407,320)   277
    (408,61)   253
    (410,754)   239
    (411,643)   269
    (412,949)   260
    (413,94)   254
    (414,991)   257
    (415,26)   244
    (416,575)   254
    (417,366)   232
    (418,160)   258
    (418,669)   266
    (419,209)   252
    (419,285)   266
    (420,748)   277
    (421,614)   258
    (422,177)   217
    (423,873)   251
    (424,542)   258
    (425,263)   247
    (426,377)   261
    (427,149)   236
    (428,950)   246
    (429,305)   277
    (430,718)   237
    (431,51)   246
    (432,857)   246
    (434,604)   248
    (435,152)   248
    (436,356)   286
    (437,105)   235
    (438,814)   254
    (440,338)   251
    (441,982)   259
    (442,880)   244
    (443,753)   273
    (444,669)   240
    (445,952)   236
    (446,741)   264
    (447,970)   247
    (448,646)   244
    (448,744)   237
    (449,835)   286
    (450,579)   241
    (451,147)   258
    (451,1017)   257
    (452,868)   247
    (453,26)   262
    (454,415)   236
    (454,668)   249
    (455,43)   247
    (456,849)   270
    (456,985)   251
    (457,218)   266
    (458,510)   282
    (459,737)   250
    (460,836)   269
    (461,849)   263
    (461,917)   270
    (462,900)   262
    (463,316)   256
    (464,762)   250
    (465,355)   262
    (465,801)   254
    (466,673)   247
    (467,112)   260
    (468,288)   261
    (470,889)   248
    (471,650)   269
    (473,121)   239
    (473,127)   251
    (474,487)   265
    (475,382)   218
    (476,44)   258
    (477,342)   257
    (478,786)   267
    (480,667)   244
    (481,558)   252
    (482,680)   224
    (483,517)   270
    (484,961)   276
    (485,274)   249
    (486,1015)   262
    (487,194)   241
    (489,802)   252
    (490,811)   260
    (491,319)   254
    (492,377)   242
    (494,432)   207
    (495,809)   292
    (496,267)   255
    (496,902)   247
    (498,194)   244
    (499,952)   273
    (500,84)   259
    (501,704)   233
    (503,519)   278
    (504,510)   264
    (504,887)   262
    (505,574)   285
    (507,643)   259
    (508,449)   241
    (512,892)   253
    (513,271)   242
    (514,404)   276
    (515,758)   263
    (517,369)   271
    (518,293)   245
    (519,786)   261
    (520,270)   256
    (521,1013)   259
    (522,284)   262
    (523,632)   265
    (524,945)   273
    (525,94)   249
    (525,362)   257
    (526,52)   282
    (527,61)   242
    (528,294)   274
    (529,145)   248
    (529,998)   261
    (530,112)   253
    (531,908)   249
    (533,674)   252
    (534,505)   227
    (535,660)   261
    (535,776)   265
    (536,500)   274
    (537,799)   258
    (538,492)   241
    (538,861)   258
    (540,245)   272
    (542,137)   268
    (545,658)   246
    (546,213)   272
    (547,767)   255
    (547,912)   279
    (547,1018)   252
    (548,46)   261
    (548,697)   265
    (549,602)   257
    (550,927)   277
    (552,710)   271
    (553,391)   244
    (554,351)   227
    (555,10)   235
    (556,26)   238
    (557,910)   255
    (558,552)   261
    (560,792)   265
    (561,597)   257
    (562,182)   264
    (562,862)   261
    (563,877)   276
    (564,310)   259
    (564,609)   251
    (565,490)   251
    (566,564)   263
    (566,607)   251
    (569,872)   279
    (570,465)   263
    (571,271)   271
    (571,919)   243
    (572,630)   237
    (574,603)   272
    (576,256)   284
    (579,274)   236
    (580,182)   252
    (581,445)   251
    (582,177)   196
    (583,118)   280
    (584,399)   250
    (585,433)   244
    (587,254)   237
    (588,914)   254
    (589,1016)   269
    (590,95)   277
    (590,802)   279
    (591,978)   265
    (592,527)   245
    (593,143)   276
    (594,430)   232
    (595,787)   261
    (596,677)   247
    (598,788)   250
    (599,127)   228
    (600,339)   249
    (601,478)   271
    (602,218)   271
    (603,759)   242
    (604,270)   247
    (605,76)   243
    (606,930)   257
    (608,832)   267
    (609,287)   265
    (610,794)   256
    (611,759)   247
    (612,1006)   282
    (613,398)   239
    (614,386)   259
    (615,115)   264
    (616,928)   254
    (617,30)   260
    (618,361)   243
    (619,996)   222
    (620,5)   248
    (620,337)   256
    (621,41)   251
    (623,44)   267
    (623,79)   252
    (623,966)   263
    (624,19)   270
    (624,242)   258
    (624,524)   244
    (625,683)   288
    (626,51)   242
    (627,361)   257
    (628,396)   248
    (629,882)   260
    (630,341)   237
    (631,49)   238
    (631,585)   234
    (632,73)   268
    (634,912)   278
    (635,882)   266
    (636,617)   252
    (637,285)   251
    (637,716)   275
    (638,113)   274
    (638,367)   254
    (639,616)   258
    (640,837)   234
    (641,457)   251
    (643,934)   265
    (647,783)   240
    (648,195)   270
    (649,614)   239
    (650,957)   265
    (651,281)   252
    (652,973)   267
    (653,60)   249
    (653,333)   268
    (654,605)   272
    (655,910)   234
    (656,349)   255
    (659,17)   250
    (660,591)   275
    (661,512)   277
    (663,767)   258
    (664,158)   224
    (665,77)   239
    (666,503)   248
    (667,951)   261
    (668,365)   278
    (669,300)   273
    (671,141)   272
    (671,565)   285
    (672,819)   223
    (674,36)   249
    (674,819)   249
    (675,454)   234
    (676,242)   263
    (677,289)   278
    (677,647)   255
    (678,802)   240
    (679,899)   242
    (680,398)   266
    (681,390)   266
    (681,699)   233
    (682,117)   246
    (683,110)   265
    (684,907)   243
    (685,17)   239
    (686,202)   255
    (687,45)   222
    (688,287)   242
    (689,502)   257
    (690,299)   252
    (691,392)   256
    (692,600)   264
    (694,378)   243
    (695,702)   271
    (696,102)   251
    (698,631)   252
    (699,152)   272
    (700,840)   267
    (701,323)   239
    (702,777)   232
    (703,132)   264
    (704,374)   261
    (705,579)   254
    (706,511)   233
    (707,76)   261
    (708,259)   269
    (708,925)   266
    (709,872)   269
    (709,873)   265
    (710,107)   235
    (710,293)   266
    (711,210)   257
    (711,462)   267
    (714,475)   245
    (715,172)   253
    (715,751)   241
    (716,697)   249
    (717,234)   239
    (717,620)   244
    (718,848)   260
    (719,331)   265
    (720,201)   255
    (720,725)   272
    (721,806)   262
    (722,415)   239
    (722,934)   262
    (723,675)   249
    (724,480)   259
    (726,337)   259
    (727,177)   237
    (728,797)   272
    (729,884)   241
    (730,767)   249
    (731,275)   275
    (732,910)   231
    (733,763)   283
    (734,574)   263
    (735,268)   253
    (736,115)   218
    (737,146)   238
    (737,912)   249
    (738,1023)   252
    (739,335)   259
    (740,596)   233
    (741,365)   270
    (741,630)   256
    (742,485)   250
    (743,186)   252
    (745,621)   250
    (745,645)   246
    (746,273)   276
    (747,91)   256
    (748,886)   245
    (749,59)   273
    (749,755)   254
    (751,348)   253
    (752,313)   255
    (752,742)   277
    (752,745)   260
    (753,472)   260
    (753,592)   249
    (754,1007)   234
    (756,633)   255
    (758,847)   268
    (759,500)   253
    (760,340)   251
    (760,381)   270
    (762,962)   270
    (763,954)   236
    (764,392)   236
    (764,913)   258
    (766,915)   265
    (766,936)   259
    (767,372)   266
    (768,307)   266
    (770,458)   265
    (771,103)   241
    (771,487)   264
    (773,56)   248
    (774,773)   259
    (775,115)   266
    (776,537)   254
    (777,392)   258
    (778,893)   287
    (779,644)   270
    (780,256)   263
    (781,899)   261
    (782,399)   251
    (782,892)   277
    (783,614)   237
    (784,54)   231
    (785,816)   261
    (786,462)   248
    (787,876)   262
    (788,273)   276
    (789,696)   260
    (790,471)   251
    (791,793)   261
    (792,636)   264
    (792,955)   263
    (793,809)   269
    (794,986)   249
    (795,656)   253
    (796,347)   246
    (797,880)   264
    (798,802)   256
    (799,294)   267
    (800,970)   231
    (801,130)   244
    (803,896)   256
    (804,1022)   257
    (805,32)   232
    (805,479)   257
    (806,889)   245
    (807,504)   251
    (809,719)   272
    (809,737)   270
    (810,646)   241
    (811,547)   238
    (812,375)   262
    (813,200)   257
    (815,408)   252
    (816,902)   256
    (817,430)   241
    (818,985)   256
    (819,688)   254
    (821,839)   257
    (822,747)   262
    (823,39)   259
    (824,886)   241
    (825,406)   247
    (826,814)   242
    (827,625)   266
    (828,407)   260
    (829,511)   254
    (830,915)   263
    (831,982)   266
    (832,1003)   246
    (833,362)   259
    (833,999)   258
    (834,136)   263
    (834,295)   267
    (835,115)   281
    (836,218)   272
    (837,565)   285
    (839,541)   280
    (839,711)   273
    (840,159)   251
    (841,103)   240
    (841,636)   271
    (842,136)   257
    (843,524)   254
    (844,114)   260
    (845,694)   268
    (846,533)   274
    (847,741)   243
    (848,483)   269
    (849,464)   257
    (850,302)   245
    (851,567)   248
    (852,150)   262
    (852,529)   258
    (853,623)   234
    (855,106)   265
    (856,1014)   261
    (857,151)   270
    (857,650)   280
    (858,781)   242
    (858,994)   242
    (859,508)   255
    (859,716)   284
    (862,636)   241
    (863,21)   242
    (864,1022)   242
    (865,972)   264
    (866,97)   243
    (867,48)   235
    (868,303)   249
    (869,364)   255
    (870,506)   241
    (871,453)   255
    (872,775)   259
    (873,173)   269
    (874,485)   249
    (875,168)   249
    (876,357)   243
    (877,722)   255
    (877,990)   267
    (880,176)   291
    (881,23)   268
    (882,608)   248
    (883,929)   251
    (884,643)   247
    (885,687)   259
    (887,487)   257
    (888,110)   266
    (888,943)   264
    (889,892)   267
    (890,628)   261
    (891,679)   258
    (892,653)   254
    (894,33)   258
    (895,37)   266
    (895,695)   269
    (896,390)   269
    (897,42)   265
    (900,687)   281
    (901,146)   241
    (901,605)   261
    (902,57)   230
    (903,1021)   250
    (904,808)   237
    (905,795)   271
    (906,479)   257
    (907,674)   277
    (909,456)   250
    (910,167)   265
    (911,548)   248
    (914,924)   250
    (915,366)   253
    (915,502)   238
    (916,420)   273
    (916,823)   247
    (918,480)   248
    (919,970)   259
    (920,608)   246
    (921,966)   230
    (923,216)   247
    (925,685)   275
    (926,755)   274
    (929,538)   268
    (930,13)   259
    (931,479)   250
    (933,860)   261
    (934,165)   250
    (935,351)   233
    (936,399)   244
    (938,215)   264
    (939,496)   276
    (939,748)   262
    (940,414)   242
    (941,586)   265
    (942,356)   274
    (943,31)   263
    (943,538)   262
    (944,109)   249
    (945,671)   258
    (946,246)   255
    (947,182)   262
    (948,628)   262
    (949,316)   238
    (950,1017)   259
    (951,221)   250
    (955,457)   237
    (955,823)   241
    (956,653)   258
    (957,656)   255
    (958,644)   238
    (959,667)   246
    (960,78)   247
    (961,828)   252
    (962,877)   269
    (963,397)   284
    (964,370)   262
    (965,504)   244
    (966,483)   246
    (967,1023)   246
    (968,400)   233
    (969,564)   254
    (970,856)   257
    (971,875)   243
    (972,549)   259
    (972,630)   240
    (974,934)   281
    (976,980)   247
    (977,347)   230
    (978,123)   258
    (980,371)   245
    (981,175)   258
    (983,58)   252
    (984,449)   248
    (984,582)   246
    (985,72)   253
    (985,743)   237
    (986,323)   248
    (987,120)   241
    (987,340)   266
    (988,172)   251
    (989,585)   241
    (990,514)   271
    (991,660)   256
    (992,15)   283
    (992,531)   277
    (993,87)   267
    (993,674)   252
    (994,992)   244
    (995,170)   269
    (997,946)   270
    (998,678)   251
    (999,167)   258
    (1001,877)   250
    (1002,286)   242
    (1004,250)   259
    (1006,1022)   248
    (1008,159)   264
    (1009,574)   258
    (1012,533)   270
    (1013,574)   273
    (1014,667)   247
    (1015,127)   244
    (1015,613)   245
    (1016,457)   246
    (1017,180)   267
    (1018,254)   237
    (1019,287)   248
    (1020,67)   261
    (1020,151)   248
    (1021,810)   239
    (1022,491)   268
    (1023,840)   264

 rmm_wrap_alloc 16384 bytes
 rmm_wrap_alloc 16384 bytes

  1024x1024 GraphBLAS double matrix, sparse by row
  Diff actual, 1024 entries, memory: 32.2 KB

    (0,478)    0
    (0,574)    0
    (2,376)    0
    (5,560)    0
    (6,996)    0
    (7,183)    0
    (7,666)    0
    (8,896)    0
    (9,187)    0
    (10,446)    0
    (11,46)    0
    (11,955)    0
    (12,397)    0
    (12,953)    0
    (13,192)    0
    (14,421)    0
    (15,568)    0
    (16,788)    0
    (16,904)    0
    (17,928)    0
    (18,103)    0
    (19,821)    0
    (19,886)    0
    (20,474)    0
    (21,479)    0
    (21,975)    0
    (22,569)    0
    (23,310)    0
    (24,905)    0
    (25,241)    0
    (26,428)    0
    (28,107)    0
    (28,441)    0
    (30,694)    0
    (32,121)    0
    (33,81)    0
    (34,804)    0
    (36,451)    0
    (37,609)    0
    (38,138)    0
    (39,698)    0
    (40,950)    0
    (41,568)    0
    (42,324)    0
    (43,798)    0
    (46,208)    0
    (47,70)    0
    (48,336)    0
    (49,476)    0
    (50,35)    0
    (51,556)    0
    (52,999)    0
    (53,940)    0
    (54,558)    0
    (54,960)    0
    (55,979)    0
    (56,90)    0
    (57,846)    0
    (57,893)    0
    (58,35)    0
    (59,108)    0
    (60,479)    0
    (61,590)    0
    (62,771)    0
    (63,50)    0
    (64,268)    0
    (65,694)    0
    (66,719)    0
    (67,411)    0
    (68,324)    0
    (69,477)    0
    (70,539)    0
    (71,228)    0
    (72,297)    0
    (73,665)    0
    (75,855)    0
    (76,248)    0
    (77,433)    0
    (78,90)    0
    (81,754)    0
    (82,243)    0
    (84,253)    0
    (86,104)    0
    (87,657)    0
    (89,825)    0
    (90,37)    0
    (91,234)    0
    (91,519)    0
    (92,74)    0
    (92,218)    0
    (92,690)    0
    (93,486)    0
    (94,637)    0
    (94,722)    0
    (96,564)    0
    (97,748)    0
    (99,326)    0
    (100,281)    0
    (102,609)    0
    (103,621)    0
    (104,644)    0
    (106,652)    0
    (107,239)    0
    (107,522)    0
    (108,131)    0
    (109,884)    0
    (110,402)    0
    (111,905)    0
    (112,127)    0
    (112,779)    0
    (113,278)    0
    (114,519)    0
    (115,240)    0
    (116,198)    0
    (117,219)    0
    (117,338)    0
    (118,99)    0
    (120,477)    0
    (121,554)    0
    (121,715)    0
    (122,151)    0
    (123,621)    0
    (125,177)    0
    (126,36)    0
    (128,820)    0
    (128,835)    0
    (129,660)    0
    (130,623)    0
    (130,807)    0
    (131,253)    0
    (131,355)    0
    (132,570)    0
    (133,492)    0
    (134,821)    0
    (135,295)    0
    (136,108)    0
    (137,834)    0
    (138,288)    0
    (139,284)    0
    (139,945)    0
    (140,887)    0
    (141,199)    0
    (142,87)    0
    (142,225)    0
    (143,123)    0
    (144,574)    0
    (145,552)    0
    (146,194)    0
    (146,995)    0
    (148,357)    0
    (149,949)    0
    (150,717)    0
    (151,484)    0
    (156,290)    0
    (157,714)    0
    (157,974)    0
    (158,959)    0
    (160,297)    0
    (162,601)    0
    (163,816)    0
    (164,221)    0
    (165,396)    0
    (166,801)    0
    (167,879)    0
    (168,321)    0
    (169,901)    0
    (170,612)    0
    (171,15)    0
    (172,951)    0
    (174,0)    0
    (174,595)    0
    (175,669)    0
    (176,108)    0
    (176,188)    0
    (176,614)    0
    (176,781)    0
    (177,17)    0
    (178,631)    0
    (179,932)    0
    (180,830)    0
    (182,675)    0
    (182,1001)    0
    (183,692)    0
    (184,143)    0
    (185,450)    0
    (186,779)    0
    (187,997)    0
    (188,357)    0
    (189,111)    0
    (190,990)    0
    (192,644)    0
    (192,953)    0
    (193,135)    0
    (194,137)    0
    (195,922)    0
    (197,859)    0
    (198,910)    0
    (199,531)    0
    (201,907)    0
    (202,863)    0
    (203,865)    0
    (204,614)    0
    (207,826)    0
    (208,985)    0
    (209,808)    0
    (210,659)    0
    (211,71)    0
    (211,931)    0
    (212,426)    0
    (213,152)    0
    (214,928)    0
    (215,268)    0
    (216,550)    0
    (217,921)    0
    (218,704)    0
    (218,922)    0
    (219,66)    0
    (220,704)    0
    (221,56)    0
    (221,551)    0
    (222,545)    0
    (223,1016)    0
    (224,721)    0
    (225,935)    0
    (226,727)    0
    (228,743)    0
    (229,535)    0
    (230,382)    0
    (231,551)    0
    (232,897)    0
    (233,570)    0
    (234,520)    0
    (235,522)    0
    (236,221)    0
    (237,755)    0
    (238,964)    0
    (239,82)    0
    (240,388)    0
    (241,500)    0
    (242,124)    0
    (242,193)    0
    (242,621)    0
    (243,300)    0
    (244,588)    0
    (244,1004)    0
    (245,494)    0
    (246,326)    0
    (247,115)    0
    (247,147)    0
    (248,233)    0
    (250,485)    0
    (251,708)    0
    (252,197)    0
    (253,485)    0
    (254,40)    0
    (254,238)    0
    (255,895)    0
    (256,114)    0
    (257,461)    0
    (257,796)    0
    (258,233)    0
    (260,884)    0
    (261,945)    0
    (262,368)    0
    (264,755)    0
    (265,124)    0
    (266,352)    0
    (267,10)    0
    (268,234)    0
    (269,400)    0
    (270,877)    0
    (270,924)    0
    (271,944)    0
    (272,67)    0
    (273,100)    0
    (274,979)    0
    (276,333)    0
    (277,377)    0
    (279,877)    0
    (280,18)    0
    (281,449)    0
    (282,179)    0
    (283,1007)    0
    (284,595)    0
    (285,32)    0
    (286,37)    0
    (287,126)    0
    (287,394)    0
    (288,848)    0
    (290,317)    0
    (291,594)    0
    (292,562)    0
    (294,466)    0
    (294,960)    0
    (295,1)    0
    (295,106)    0
    (296,109)    0
    (296,183)    0
    (296,245)    0
    (297,912)    0
    (297,1006)    0
    (299,159)    0
    (300,554)    0
    (301,774)    0
    (302,30)    0
    (303,645)    0
    (304,229)    0
    (305,622)    0
    (307,264)    0
    (308,28)    0
    (309,328)    0
    (309,627)    0
    (310,357)    0
    (311,355)    0
    (312,61)    0
    (313,758)    0
    (314,571)    0
    (315,177)    0
    (315,298)    0
    (315,741)    0
    (316,177)    0
    (316,308)    0
    (317,323)    0
    (318,595)    0
    (319,126)    0
    (320,468)    0
    (321,73)    0
    (322,235)    0
    (323,375)    0
    (323,651)    0
    (324,549)    0
    (325,306)    0
    (325,487)    0
    (326,649)    0
    (327,704)    0
    (328,142)    0
    (329,176)    0
    (330,848)    0
    (330,965)    0
    (332,795)    0
    (334,695)    0
    (335,694)    0
    (336,775)    0
    (336,808)    0
    (337,608)    0
    (338,993)    0
    (339,680)    0
    (340,849)    0
    (341,36)    0
    (342,723)    0
    (343,678)    0
    (344,384)    0
    (344,680)    0
    (345,75)    0
    (347,996)    0
    (348,60)    0
    (348,821)    0
    (349,804)    0
    (350,282)    0
    (351,142)    0
    (351,937)    0
    (352,160)    0
    (353,536)    0
    (355,352)    0
    (356,340)    0
    (358,678)    0
    (360,679)    0
    (361,794)    0
    (361,989)    0
    (362,816)    0
    (363,206)    0
    (364,629)    0
    (365,990)    0
    (366,841)    0
    (366,971)    0
    (367,888)    0
    (368,587)    0
    (369,684)    0
    (370,270)    0
    (371,327)    0
    (372,471)    0
    (373,88)    0
    (374,669)    0
    (375,992)    0
    (376,336)    0
    (377,86)    0
    (378,882)    0
    (379,592)    0
    (380,77)    0
    (380,643)    0
    (381,1012)    0
    (382,816)    0
    (383,711)    0
    (385,670)    0
    (386,537)    0
    (387,347)    0
    (388,494)    0
    (389,328)    0
    (389,733)    0
    (390,551)    0
    (391,59)    0
    (391,600)    0
    (394,692)    0
    (396,645)    0
    (397,835)    0
    (398,107)    0
    (398,246)    0
    (399,436)    0
    (400,172)    0
    (400,382)    0
    (401,790)    0
    (402,320)    0
    (403,40)    0
    (404,641)    0
    (405,49)    0
    (405,475)    0
    (407,320)    0
    (408,61)    0
    (410,754)    0
    (411,643)    0
    (412,949)    0
    (413,94)    0
    (414,991)    0
    (415,26)    0
    (416,575)    0
    (417,366)    0
    (418,160)    0
    (418,669)    0
    (419,209)    0
    (419,285)    0
    (420,748)    0
    (421,614)    0
    (422,177)    0
    (423,873)    0
    (424,542)    0
    (425,263)    0
    (426,377)    0
    (427,149)    0
    (428,950)    0
    (429,305)    0
    (430,718)    0
    (431,51)    0
    (432,857)    0
    (434,604)    0
    (435,152)    0
    (436,356)    0
    (437,105)    0
    (438,814)    0
    (440,338)    0
    (441,982)    0
    (442,880)    0
    (443,753)    0
    (444,669)    0
    (445,952)    0
    (446,741)    0
    (447,970)    0
    (448,646)    0
    (448,744)    0
    (449,835)    0
    (450,579)    0
    (451,147)    0
    (451,1017)    0
    (452,868)    0
    (453,26)    0
    (454,415)    0
    (454,668)    0
    (455,43)    0
    (456,849)    0
    (456,985)    0
    (457,218)    0
    (458,510)    0
    (459,737)    0
    (460,836)    0
    (461,849)    0
    (461,917)    0
    (462,900)    0
    (463,316)    0
    (464,762)    0
    (465,355)    0
    (465,801)    0
    (466,673)    0
    (467,112)    0
    (468,288)    0
    (470,889)    0
    (471,650)    0
    (473,121)    0
    (473,127)    0
    (474,487)    0
    (475,382)    0
    (476,44)    0
    (477,342)    0
    (478,786)    0
    (480,667)    0
    (481,558)    0
    (482,680)    0
    (483,517)    0
    (484,961)    0
    (485,274)    0
    (486,1015)    0
    (487,194)    0
    (489,802)    0
    (490,811)    0
    (491,319)    0
    (492,377)    0
    (494,432)    0
    (495,809)    0
    (496,267)    0
    (496,902)    0
    (498,194)    0
    (499,952)    0
    (500,84)    0
    (501,704)    0
    (503,519)    0
    (504,510)    0
    (504,887)    0
    (505,574)    0
    (507,643)    0
    (508,449)    0
    (512,892)    0
    (513,271)    0
    (514,404)    0
    (515,758)    0
    (517,369)    0
    (518,293)    0
    (519,786)    0
    (520,270)    0
    (521,1013)    0
    (522,284)    0
    (523,632)    0
    (524,945)    0
    (525,94)    0
    (525,362)    0
    (526,52)    0
    (527,61)    0
    (528,294)    0
    (529,145)    0
    (529,998)    0
    (530,112)    0
    (531,908)    0
    (533,674)    0
    (534,505)    0
    (535,660)    0
    (535,776)    0
    (536,500)    0
    (537,799)    0
    (538,492)    0
    (538,861)    0
    (540,245)    0
    (542,137)    0
    (545,658)    0
    (546,213)    0
    (547,767)    0
    (547,912)    0
    (547,1018)    0
    (548,46)    0
    (548,697)    0
    (549,602)    0
    (550,927)    0
    (552,710)    0
    (553,391)    0
    (554,351)    0
    (555,10)    0
    (556,26)    0
    (557,910)    0
    (558,552)    0
    (560,792)    0
    (561,597)    0
    (562,182)    0
    (562,862)    0
    (563,877)    0
    (564,310)    0
    (564,609)    0
    (565,490)    0
    (566,564)    0
    (566,607)    0
    (569,872)    0
    (570,465)    0
    (571,271)    0
    (571,919)    0
    (572,630)    0
    (574,603)    0
    (576,256)    0
    (579,274)    0
    (580,182)    0
    (581,445)    0
    (582,177)    0
    (583,118)    0
    (584,399)    0
    (585,433)    0
    (587,254)    0
    (588,914)    0
    (589,1016)    0
    (590,95)    0
    (590,802)    0
    (591,978)    0
    (592,527)    0
    (593,143)    0
    (594,430)    0
    (595,787)    0
    (596,677)    0
    (598,788)    0
    (599,127)    0
    (600,339)    0
    (601,478)    0
    (602,218)    0
    (603,759)    0
    (604,270)    0
    (605,76)    0
    (606,930)    0
    (608,832)    0
    (609,287)    0
    (610,794)    0
    (611,759)    0
    (612,1006)    0
    (613,398)    0
    (614,386)    0
    (615,115)    0
    (616,928)    0
    (617,30)    0
    (618,361)    0
    (619,996)    0
    (620,5)    0
    (620,337)    0
    (621,41)    0
    (623,44)    0
    (623,79)    0
    (623,966)    0
    (624,19)    0
    (624,242)    0
    (624,524)    0
    (625,683)    0
    (626,51)    0
    (627,361)    0
    (628,396)    0
    (629,882)    0
    (630,341)    0
    (631,49)    0
    (631,585)    0
    (632,73)    0
    (634,912)    0
    (635,882)    0
    (636,617)    0
    (637,285)    0
    (637,716)    0
    (638,113)    0
    (638,367)    0
    (639,616)    0
    (640,837)    0
    (641,457)    0
    (643,934)    0
    (647,783)    0
    (648,195)    0
    (649,614)    0
    (650,957)    0
    (651,281)    0
    (652,973)    0
    (653,60)    0
    (653,333)    0
    (654,605)    0
    (655,910)    0
    (656,349)    0
    (659,17)    0
    (660,591)    0
    (661,512)    0
    (663,767)    0
    (664,158)    0
    (665,77)    0
    (666,503)    0
    (667,951)    0
    (668,365)    0
    (669,300)    0
    (671,141)    0
    (671,565)    0
    (672,819)    0
    (674,36)    0
    (674,819)    0
    (675,454)    0
    (676,242)    0
    (677,289)    0
    (677,647)    0
    (678,802)    0
    (679,899)    0
    (680,398)    0
    (681,390)    0
    (681,699)    0
    (682,117)    0
    (683,110)    0
    (684,907)    0
    (685,17)    0
    (686,202)    0
    (687,45)    0
    (688,287)    0
    (689,502)    0
    (690,299)    0
    (691,392)    0
    (692,600)    0
    (694,378)    0
    (695,702)    0
    (696,102)    0
    (698,631)    0
    (699,152)    0
    (700,840)    0
    (701,323)    0
    (702,777)    0
    (703,132)    0
    (704,374)    0
    (705,579)    0
    (706,511)    0
    (707,76)    0
    (708,259)    0
    (708,925)    0
    (709,872)    0
    (709,873)    0
    (710,107)    0
    (710,293)    0
    (711,210)    0
    (711,462)    0
    (714,475)    0
    (715,172)    0
    (715,751)    0
    (716,697)    0
    (717,234)    0
    (717,620)    0
    (718,848)    0
    (719,331)    0
    (720,201)    0
    (720,725)    0
    (721,806)    0
    (722,415)    0
    (722,934)    0
    (723,675)    0
    (724,480)    0
    (726,337)    0
    (727,177)    0
    (728,797)    0
    (729,884)    0
    (730,767)    0
    (731,275)    0
    (732,910)    0
    (733,763)    0
    (734,574)    0
    (735,268)    0
    (736,115)    0
    (737,146)    0
    (737,912)    0
    (738,1023)    0
    (739,335)    0
    (740,596)    0
    (741,365)    0
    (741,630)    0
    (742,485)    0
    (743,186)    0
    (745,621)    0
    (745,645)    0
    (746,273)    0
    (747,91)    0
    (748,886)    0
    (749,59)    0
    (749,755)    0
    (751,348)    0
    (752,313)    0
    (752,742)    0
    (752,745)    0
    (753,472)    0
    (753,592)    0
    (754,1007)    0
    (756,633)    0
    (758,847)    0
    (759,500)    0
    (760,340)    0
    (760,381)    0
    (762,962)    0
    (763,954)    0
    (764,392)    0
    (764,913)    0
    (766,915)    0
    (766,936)    0
    (767,372)    0
    (768,307)    0
    (770,458)    0
    (771,103)    0
    (771,487)    0
    (773,56)    0
    (774,773)    0
    (775,115)    0
    (776,537)    0
    (777,392)    0
    (778,893)    0
    (779,644)    0
    (780,256)    0
    (781,899)    0
    (782,399)    0
    (782,892)    0
    (783,614)    0
    (784,54)    0
    (785,816)    0
    (786,462)    0
    (787,876)    0
    (788,273)    0
    (789,696)    0
    (790,471)    0
    (791,793)    0
    (792,636)    0
    (792,955)    0
    (793,809)    0
    (794,986)    0
    (795,656)    0
    (796,347)    0
    (797,880)    0
    (798,802)    0
    (799,294)    0
    (800,970)    0
    (801,130)    0
    (803,896)    0
    (804,1022)    0
    (805,32)    0
    (805,479)    0
    (806,889)    0
    (807,504)    0
    (809,719)    0
    (809,737)    0
    (810,646)    0
    (811,547)    0
    (812,375)    0
    (813,200)    0
    (815,408)    0
    (816,902)    0
    (817,430)    0
    (818,985)    0
    (819,688)    0
    (821,839)    0
    (822,747)    0
    (823,39)    0
    (824,886)    0
    (825,406)    0
    (826,814)    0
    (827,625)    0
    (828,407)    0
    (829,511)    0
    (830,915)    0
    (831,982)    0
    (832,1003)    0
    (833,362)    0
    (833,999)    0
    (834,136)    0
    (834,295)    0
    (835,115)    0
    (836,218)    0
    (837,565)    0
    (839,541)    0
    (839,711)    0
    (840,159)    0
    (841,103)    0
    (841,636)    0
    (842,136)    0
    (843,524)    0
    (844,114)    0
    (845,694)    0
    (846,533)    0
    (847,741)    0
    (848,483)    0
    (849,464)    0
    (850,302)    0
    (851,567)    0
    (852,150)    0
    (852,529)    0
    (853,623)    0
    (855,106)    0
    (856,1014)    0
    (857,151)    0
    (857,650)    0
    (858,781)    0
    (858,994)    0
    (859,508)    0
    (859,716)    0
    (862,636)    0
    (863,21)    0
    (864,1022)    0
    (865,972)    0
    (866,97)    0
    (867,48)    0
    (868,303)    0
    (869,364)    0
    (870,506)    0
    (871,453)    0
    (872,775)    0
    (873,173)    0
    (874,485)    0
    (875,168)    0
    (876,357)    0
    (877,722)    0
    (877,990)    0
    (880,176)    0
    (881,23)    0
    (882,608)    0
    (883,929)    0
    (884,643)    0
    (885,687)    0
    (887,487)    0
    (888,110)    0
    (888,943)    0
    (889,892)    0
    (890,628)    0
    (891,679)    0
    (892,653)    0
    (894,33)    0
    (895,37)    0
    (895,695)    0
    (896,390)    0
    (897,42)    0
    (900,687)    0
    (901,146)    0
    (901,605)    0
    (902,57)    0
    (903,1021)    0
    (904,808)    0
    (905,795)    0
    (906,479)    0
    (907,674)    0
    (909,456)    0
    (910,167)    0
    (911,548)    0
    (914,924)    0
    (915,366)    0
    (915,502)    0
    (916,420)    0
    (916,823)    0
    (918,480)    0
    (919,970)    0
    (920,608)    0
    (921,966)    0
    (923,216)    0
    (925,685)    0
    (926,755)    0
    (929,538)    0
    (930,13)    0
    (931,479)    0
    (933,860)    0
    (934,165)    0
    (935,351)    0
    (936,399)    0
    (938,215)    0
    (939,496)    0
    (939,748)    0
    (940,414)    0
    (941,586)    0
    (942,356)    0
    (943,31)    0
    (943,538)    0
    (944,109)    0
    (945,671)    0
    (946,246)    0
    (947,182)    0
    (948,628)    0
    (949,316)    0
    (950,1017)    0
    (951,221)    0
    (955,457)    0
    (955,823)    0
    (956,653)    0
    (957,656)    0
    (958,644)    0
    (959,667)    0
    (960,78)    0
    (961,828)    0
    (962,877)    0
    (963,397)    0
    (964,370)    0
    (965,504)    0
    (966,483)    0
    (967,1023)    0
    (968,400)    0
    (969,564)    0
    (970,856)    0
    (971,875)    0
    (972,549)    0
    (972,630)    0
    (974,934)    0
    (976,980)    0
    (977,347)    0
    (978,123)    0
    (980,371)    0
    (981,175)    0
    (983,58)    0
    (984,449)    0
    (984,582)    0
    (985,72)    0
    (985,743)    0
    (986,323)    0
    (987,120)    0
    (987,340)    0
    (988,172)    0
    (989,585)    0
    (990,514)    0
    (991,660)    0
    (992,15)    0
    (992,531)    0
    (993,87)    0
    (993,674)    0
    (994,992)    0
    (995,170)    0
    (997,946)    0
    (998,678)    0
    (999,167)    0
    (1001,877)    0
    (1002,286)    0
    (1004,250)    0
    (1006,1022)    0
    (1008,159)    0
    (1009,574)    0
    (1012,533)    0
    (1013,574)    0
    (1014,667)    0
    (1015,127)    0
    (1015,613)    0
    (1016,457)    0
    (1017,180)    0
    (1018,254)    0
    (1019,287)    0
    (1020,67)    0
    (1020,151)    0
    (1021,810)    0
    (1022,491)    0
    (1023,840)    0


  1024x1024 GraphBLAS bool matrix, sparse by row
  T actual, 1024 entries, memory: 25.2 KB

    (0,478)   1
    (0,574)   1
    (2,376)   1
    (5,560)   1
    (6,996)   1
    (7,183)   1
    (7,666)   1
    (8,896)   1
    (9,187)   1
    (10,446)   1
    (11,46)   1
    (11,955)   1
    (12,397)   1
    (12,953)   1
    (13,192)   1
    (14,421)   1
    (15,568)   1
    (16,788)   1
    (16,904)   1
    (17,928)   1
    (18,103)   1
    (19,821)   1
    (19,886)   1
    (20,474)   1
    (21,479)   1
    (21,975)   1
    (22,569)   1
    (23,310)   1
    (24,905)   1
    ...
 work:1024 gpus:0 Getting test data
Creating problem gen
filling matrices
inside fill, using seed 4567
fill_random nrows=1024ncols=1024 need 1024 values, invsparse = 1024
fill_random after alloc values
vdim ready 
vlen ready 
ready to fill p
filling sparse
1024 nonzeroes left to fill..
35 nonzeroes left to fill..
inside fill, using seed 4567
fill_random nrows=1024ncols=1024 need 1024 values, invsparse = 1024
fill_random after alloc values
vdim ready 
vlen ready 
ready to fill p
filling sparse
1024 nonzeroes left to fill..
35 nonzeroes left to fill..
inside fill, using seed 543210
fill_random nrows=1024ncols=1024 need 1048576 values, invsparse = 1
fill_random after alloc values
vdim ready 
vlen ready 
ready to fill p
filling dense
 rmm_wrap_alloc 16384 bytes
 rmm_wrap_alloc 16384 bytes
 rmm_wrap_alloc 524288 bytes
 rmm_wrap_alloc 524288 bytes
 rmm_wrap_alloc 1048576 bytes
 rmm_wrap_alloc 1048576 bytes
 rmm_wrap_alloc 524288 bytes
 rmm_wrap_alloc 2097152 bytes
 rmm_wrap_alloc 2097152 bytes
 rmm_wrap_alloc 1048576 bytes
 rmm_wrap_alloc 4194304 bytes
 rmm_wrap_alloc 4194304 bytes
 rmm_wrap_alloc 2097152 bytes
 rmm_wrap_alloc 8388608 bytes
 rmm_wrap_alloc 8388608 bytes
 rmm_wrap_alloc 4194304 bytes
 rmm_wrap_alloc 8388608 bytes
 rmm_wrap_alloc 4194304 bytes
 rmm_wrap_alloc 8388608 bytes
inside fill, using seed 32
fill_random nrows=1024ncols=1024 need 5120 values, invsparse = 205
fill_random after alloc values
vdim ready 
vlen ready 
ready to fill p
filling sparse
5120 nonzeroes left to fill..
2026 nonzeroes left to fill..
 rmm_wrap_alloc 16384 bytes
 rmm_wrap_alloc 65536 bytes
1024 slots to fill
all pairs to bucket 5, no filling
done assigning buckets
Building semiring factgory
 calling stringify semiring: 0x7f1ff5304500
inside enumify: 0x7f1ff5304500

    GraphBLAS Semiring: semiring (user-defined)
    GraphBLAS Monoid: semiring->add (built-in)
    GraphBLAS BinaryOp: monoid->op (built-in) z=plus(x,y)
    GraphBLAS type: ztype int32_t size: 4
    GraphBLAS type: xtype int32_t size: 4
    GraphBLAS type: ytype int32_t size: 4
    identity: [   0 ] 

    GraphBLAS BinaryOp: semiring->multiply (built-in) z=times(x,y)
    GraphBLAS type: ztype int32_t size: 4
    GraphBLAS type: xtype int32_t size: 4
    GraphBLAS type: ytype int32_t size: 4
Getting semiring add
Getting semiring mult
Getting semiring add op
Getting types
Getting opcodes
Getting typecodes
Performing asserts
Invoking boolean rename
Invoking boolean rename
Invoking enumify binop
e 14
Invoking enumify monoid
Calling enumify binop
Inside plus binop code
e 11
Calling enumify identity
Calling enumify terminal
Done enumify monoid
Done invoking enumify monoid
atype
btype
ctype
Invoking enumify_mask, mtype 0x7f2028b57180
GB_enumify_mask gets mcode: 1 Mask_struct: 0 Mask_comp: 0
got mask_ecode: 4
constructing semiring scode
before: add_ecode: 11, id_ecode: 0, term_ecode: 31, mult_ecode: 14, flipxy: 0, zcode: 6, xcode: 6, ycode: 6, mask_ecode: 4, ccode: 6, acode: 6, bcode: 6, csparsity: 0, msparsity: 0, asparsity: 0, bsparsity: 0
serialized_scode: 397409434374399488
done enumify semiring
scode=397409434374399488
done stringify semiring
 returned from  stringify semiring
 rmm_wrap_alloc 256 bytes
 rmm_wrap_alloc 8192 bytes
1024 slots to fill
all pairs to bucket 5, no filling
done assigning buckets
bucket 5 has 1024 dots to do
LAUNCHING BUCKET CODE: 5
Confiring spdnINside get cached file
looking for prog in file /home/cjnolet/.SuiteSparse/GraphBLAS/6.3.0/GB_semiring_397409434374399488.h
opening /home/cjnolet/.SuiteSparse/GraphBLAS/6.3.0/GB_semiring_397409434374399488.h for write
about to close
 read cache file /home/cjnolet/.SuiteSparse/GraphBLAS/6.3.0/GB_semiring_397409434374399488.h
successful_read: 1
Just closed
 jit_cache get program GB_jit_AxB_dot3_phase3_spdn
found memory-cached prog GB_jit_AxB_dot3_phase3_spdn
 got kernel instance AxB_dot3_phase3_spdn_int32_t_int32_t_int32_t
found memory-cached prog AxB_dot3_phase3_spdn_int32_t_int32_t_int32_t
Launching _Z20AxB_dot3_phase3_spdnIiiiEvxxPxP16GB_Matrix_opaqueS2_S2_S2_i<<<32,32,0,0>>>(long,long,long*,GB_Matrix_opaque*,GB_Matrix_opaque*,GB_Matrix_opaque*,GB_Matrix_opaque*,int)
Printing bucketp
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
Done.
returned from kernel 2.7095ms

  1024x1024 GraphBLAS int32_t matrix, sparse (jumbled) by row
  sparsity control: sparse only
  C GPU, 1024 entries, memory: 28.2 KB
  pending tuples: 0 max pending: 0 zombies: 131

    (0,478)   1
    (0,574)   2
    (2,376) zombie
    (5,560)   3
    (6,996)   2
    (7,183)   0
    (7,666)   0
    (8,896)   2
    (9,187)   0
    (10,446)   2
    (11,46)   2
    (11,955)   2
    (12,397)   1
    (12,953)   0
    (13,192)   1
    (14,421)   1
    (15,568)   1
    (16,788)   1
    (16,904)   0
    (17,928)   0
    (18,103) zombie
    (19,821)   1
    (19,886)   0
    (20,474)   4
    (21,479)   1
    (21,975)   1
    (22,569)   1
    (23,310)   2
    (24,905)   0
    ...
 rmm_wrap_alloc 256 bytes
Not using cuda path. M_is_hypersparse: 0, A->iso: 0, B->iso: 0, A_BITMAP: 0, B_BITMAP: 0, GB_IS_FULL(A): 0, GB_IS_FULL(B): 0, semiring header size: 32
 rmm_wrap_alloc 16384 bytes

  1024x1024 GraphBLAS bool matrix, sparse by row
  sparsity control: sparse only
  M actual, 1024 entries, memory: 25.2 KB

    (0,478)   1
    (0,574)   1
    (2,376)   1
    (5,560)   1
    (6,996)   1
    (7,183)   1
    (7,666)   1
    (8,896)   1
    (9,187)   1
    (10,446)   1
    (11,46)   1
    (11,955)   1
    (12,397)   1
    (12,953)   1
    (13,192)   1
    (14,421)   1
    (15,568)   1
    (16,788)   1
    (16,904)   1
    (17,928)   1
    (18,103)   1
    (19,821)   1
    (19,886)   1
    (20,474)   1
    (21,479)   1
    (21,975)   1
    (22,569)   1
    (23,310)   1
    (24,905)   1
    ...
 rmm_wrap_alloc 16384 bytes

  1024x1024 GraphBLAS int32_t matrix, sparse by row
  sparsity control: sparse only
  C GPU, 893 entries, memory: 28.2 KB

    (0,478)   1
    (0,574)   2
    (5,560)   3
    (6,996)   2
    (7,183)   0
    (7,666)   0
    (8,896)   2
    (9,187)   0
    (10,446)   2
    (11,46)   2
    (11,955)   2
    (12,397)   1
    (12,953)   0
    (13,192)   1
    (14,421)   1
    (15,568)   1
    (16,788)   1
    (16,904)   0
    (17,928)   0
    (19,821)   1
    (19,886)   0
    (20,474)   4
    (21,479)   1
    (21,975)   1
    (22,569)   1
    (23,310)   2
    (24,905)   0
    (25,241)   0
    (26,428)   0
    (28,107)   2
    (32,121)   0
    (33,81)   2
    (37,609)   2
    (39,698)   1
    (41,568)   1
    (42,324)   0
    (43,798)   1
    (46,208)   0
    (47,70)   1
    (48,336)   1
    (49,476)   1
    (50,35)   0
    (51,556)   0
    (52,999)   1
    (53,940)   1
    (54,558)   0
    (54,960)   1
    (55,979)   1
    (56,90)   2
    (57,846)   3
    (57,893)   0
    (58,35)   0
    (59,108)   3
    (60,479)   1
    (61,590)   2
    (62,771)   0
    (63,50)   0
    (64,268)   3
    (66,719)   2
    (67,411)   2
    (68,324)   0
    (69,477)   0
    (70,539)   1
    (71,228)   3
    (72,297)   3
    (73,665)   0
    (75,855)   0
    (76,248)   0
    (77,433)   4
    (78,90)   3
    (81,754)   4
    (82,243)   2
    (84,253)   1
    (86,104)   3
    (87,657)   0
    (89,825)   2
    (90,37)   4
    (91,234)   1
    (91,519)   1
    (92,74)   3
    (92,218)   1
    (92,690)   1
    (93,486)   2
    (94,637)   0
    (94,722)   1
    (96,564)   1
    (99,326)   2
    (100,281)   1
    (102,609)   2
    (104,644)   0
    (106,652)   1
    (107,239)   0
    (107,522)   2
    (108,131)   1
    (109,884)   2
    (110,402)   3
    (111,905)   2
    (112,127)   0
    (112,779)   0
    (113,278)   0
    (114,519)   1
    (115,240)   4
    (117,219)   0
    (117,338)   2
    (118,99)   4
    (120,477)   1
    (121,554)   3
    (121,715)   3
    (122,151)   3
    (125,177)   5
    (128,820)   6
    (129,660)   0
    (130,623)   1
    (131,253)   1
    (131,355)   1
    (133,492)   1
    (134,821)   0
    (135,295)   2
    (136,108)   3
    (137,834)   2
    (138,288)   1
    (139,284)   2
    (139,945)   0
    (141,199)   1
    (142,87)   4
    (142,225)   1
    (143,123)   0
    (144,574)   0
    (146,194)   3
    (148,357)   0
    (149,949)   1
    (150,717)   2
    (151,484)   2
    (156,290)   2
    (157,714)   0
    (157,974)   1
    (160,297)   1
    (162,601)   2
    (163,816)   3
    (164,221)   1
    (165,396)   1
    (166,801)   3
    (167,879)   3
    (168,321)   0
    (169,901)   3
    (172,951)   1
    (176,108)   1
    (176,188)   1
    (176,614)   2
    (176,781)   1
    (178,631)   1
    (179,932)   2
    (180,830)   3
    (182,675)   1
    (182,1001)   2
    (183,692)   1
    (184,143)   2
    (185,450)   1
    (186,779)   0
    (187,997)   3
    (188,357)   1
    (189,111)   2
    (190,990)   1
    (192,644)   0
    (192,953)   0
    (193,135)   1
    (194,137)   4
    (195,922)   4
    (197,859)   1
    (198,910)   1
    (199,531)   3
    (201,907)   0
    (202,863)   1
    (203,865)   4
    (204,614)   3
    (207,826)   1
    (208,985)   2
    (209,808)   3
    (211,71)   4
    (211,931)   3
    (212,426)   0
    (213,152)   0
    (214,928)   0
    (215,268)   3
    (216,550)   3
    (217,921)   0
    (218,704)   2
    (218,922)   2
    (219,66)   1
    (220,704)   2
    (221,56)   1
    (221,551)   2
    (222,545)   1
    (223,1016)   2
    (224,721)   1
    (225,935)   1
    (226,727)   0
    (228,743)   4
    (229,535)   2
    (231,551)   3
    (232,897)   2
    (234,520)   2
    (235,522)   2
    (236,221)   3
    (237,755)   2
    (238,964)   2
    (239,82)   0
    (240,388)   0
    (241,500)   2
    (242,124)   3
    (242,193)   0
    (243,300)   0
    (244,588)   0
    (244,1004)   3
    (245,494)   0
    (246,326)   1
    (247,115)   1
    (247,147)   1
    (248,233)   0
    (250,485)   6
    (251,708)   0
    (252,197)   1
    (253,485)   5
    (254,40)   3
    (254,238)   0
    (255,895)   3
    (256,114)   0
    (257,461)   2
    (257,796)   0
    (258,233)   1
    (260,884)   2
    (261,945)   1
    (262,368)   2
    (264,755)   1
    (265,124)   1
    (266,352)   3
    (267,10)   1
    (268,234)   1
    (269,400)   1
    (270,877)   0
    (270,924)   0
    (271,944)   0
    (272,67)   3
    (273,100)   1
    (274,979)   4
    (276,333)   2
    (277,377)   0
    (279,877)   1
    (280,18)   3
    (281,449)   3
    (282,179)   2
    (283,1007)   2
    (285,32)   1
    (286,37)   2
    (287,394)   3
    (288,848)   0
    (290,317)   0
    (291,594)   1
    (294,466)   2
    (294,960)   0
    (295,1)   0
    (295,106)   2
    (296,109)   2
    (296,183)   0
    (296,245)   0
    (297,912)   1
    (299,159)   1
    (300,554)   1
    (301,774)   1
    (302,30)   1
    (303,645)   1
    (304,229)   1
    (305,622)   0
    (307,264)   3
    (308,28)   0
    (309,328)   4
    (309,627)   0
    (310,357)   1
    (311,355)   1
    (312,61)   2
    (314,571)   3
    (315,177)   3
    (315,741)   0
    (316,177)   3
    (316,308)   4
    (320,468)   1
    (321,73)   0
    (322,235)   2
    (323,375)   3
    (323,651)   3
    (324,549)   2
    (325,306)   1
    (325,487)   1
    (326,649)   2
    (327,704)   0
    (329,176)   2
    (330,848)   1
    (330,965)   2
    (332,795)   1
    (334,695)   1
    (336,808)   4
    (337,608)   1
    (338,993)   2
    (339,680)   0
    (340,849)   1
    (342,723)   2
    (343,678)   2
    (344,384)   3
    (344,680)   0
    (345,75)   0
    (347,996)   3
    (348,60)   3
    (348,821)   1
    (350,282)   1
    (352,160)   2
    (353,536)   1
    (355,352)   5
    (356,340)   2
    (358,678)   2
    (360,679)   1
    (361,794)   0
    (361,989)   3
    (362,816)   2
    (363,206)   4
    (364,629)   0
    (365,990)   0
    (366,841)   1
    (366,971)   0
    (367,888)   2
    (368,587)   0
    (369,684)   3
    (370,270)   1
    (372,471)   1
    (373,88)   1
    (375,992)   2
    (376,336)   3
    (377,86)   1
    (378,882)   1
    (379,592)   2
    (380,77)   2
    (380,643)   2
    (381,1012)   2
    (382,816)   2
    (383,711)   2
    (385,670)   1
    (386,537)   1
    (387,347)   2
    (388,494)   1
    (389,328)   3
    (390,551)   1
    (391,59)   2
    (391,600)   1
    (394,692)   4
    (396,645)   2
    (398,107)   3
    (398,246)   2
    (399,436)   3
    (400,172)   0
    (401,790)   3
    (402,320)   2
    (403,40)   2
    (404,641)   0
    (405,49)   0
    (405,475)   1
    (407,320)   3
    (408,61)   4
    (410,754)   3
    (411,643)   2
    (412,949)   1
    (413,94)   5
    (415,26)   1
    (416,575)   0
    (417,366)   3
    (418,160)   0
    (419,209)   1
    (421,614)   1
    (422,177)   2
    (423,873)   1
    (424,542)   3
    (425,263)   0
    (426,377)   0
    (427,149)   0
    (429,305)   0
    (430,718)   1
    (431,51)   0
    (432,857)   2
    (434,604)   0
    (435,152)   2
    (436,356)   1
    (437,105)   3
    (440,338)   0
    (441,982)   2
    (442,880)   1
    (443,753)   1
    (446,741)   0
    (448,646)   0
    (448,744)   2
    (450,579)   1
    (451,147)   0
    (451,1017)   0
    (452,868)   3
    (453,26)   1
    (454,415)   1
    (454,668)   0
    (455,43)   0
    (456,849)   1
    (456,985)   2
    (457,218)   2
    (458,510)   4
    (459,737)   2
    (460,836)   2
    (461,849)   0
    (461,917)   2
    (462,900)   1
    (463,316)   1
    (464,762)   1
    (465,355)   1
    (465,801)   1
    (466,673)   0
    (468,288)   1
    (470,889)   2
    (471,650)   1
    (473,121)   1
    (473,127)   2
    (474,487)   0
    (476,44)   0
    (477,342)   1
    (480,667)   1
    (481,558)   0
    (482,680)   1
    (483,517)   1
    (484,961)   1
    (485,274)   0
    (486,1015)   3
    (487,194)   1
    (489,802)   2
    (490,811)   1
    (491,319)   4
    (492,377)   1
    (494,432)   1
    (495,809)   0
    (496,267)   2
    (496,902)   1
    (498,194)   1
    (500,84)   0
    (501,704)   2
    (503,519)   2
    (504,510)   3
    (505,574)   1
    (507,643)   3
    (508,449)   3
    (512,892)   3
    (513,271)   2
    (517,369)   1
    (518,293)   2
    (520,270)   1
    (521,1013)   1
    (522,284)   1
    (524,945)   1
    (525,94)   5
    (525,362)   2
    (526,52)   1
    (527,61)   3
    (529,998)   0
    (531,908)   1
    (533,674)   4
    (535,660)   1
    (535,776)   1
    (536,500)   3
    (537,799)   2
    (538,492)   2
    (538,861)   1
    (540,245)   0
    (542,137)   2
    (545,658)   0
    (546,213)   1
    (547,767)   1
    (547,912)   3
    (547,1018)   1
    (548,46)   2
    (548,697)   0
    (549,602)   2
    (550,927)   2
    (553,391)   1
    (554,351)   2
    (555,10)   2
    (556,26)   2
    (557,910)   0
    (560,792)   0
    (562,182)   0
    (562,862)   1
    (563,877)   0
    (564,310)   3
    (564,609)   3
    (565,490)   0
    (566,564)   2
    (566,607)   1
    (569,872)   0
    (570,465)   1
    (571,271)   3
    (571,919)   1
    (574,603)   0
    (576,256)   4
    (579,274)   0
    (580,182)   0
    (581,445)   0
    (582,177)   3
    (583,118)   0
    (584,399)   1
    (585,433)   4
    (587,254)   2
    (588,914)   2
    (589,1016)   3
    (590,95)   3
    (590,802)   2
    (592,527)   0
    (593,143)   2
    (594,430)   0
    (595,787)   2
    (598,788)   1
    (599,127)   3
    (601,478)   2
    (602,218)   0
    (603,759)   1
    (604,270)   1
    (605,76)   3
    (606,930)   0
    (608,832)   1
    (609,287)   1
    (610,794)   0
    (611,759)   1
    (613,398)   3
    (614,386)   4
    (615,115)   0
    (616,928)   0
    (617,30)   2
    (618,361)   5
    (619,996)   4
    (620,5)   3
    (621,41)   0
    (623,44)   2
    (624,19)   1
    (624,242)   2
    (624,524)   1
    (626,51)   0
    (627,361)   1
    (628,396)   3
    (629,882)   1
    (630,341)   1
    (631,49)   1
    (631,585)   1
    (632,73)   1
    (634,912)   2
    (635,882)   1
    (636,617)   1
    (637,716)   0
    (638,113)   1
    (639,616)   5
    (640,837)   2
    (641,457)   1
    (643,934)   3
    (647,783)   2
    (648,195)   1
    (649,614)   1
    (650,957)   1
    (651,281)   2
    (652,973)   1
    (653,60)   1
    (653,333)   2
    (654,605)   3
    (655,910)   0
    (656,349)   3
    (660,591)   4
    (661,512)   2
    (663,767)   0
    (665,77)   3
    (666,503)   4
    (667,951)   2
    (668,365)   4
    (669,300)   1
    (671,141)   1
    (671,565)   2
    (672,819)   1
    (674,819)   1
    (675,454)   0
    (676,242)   2
    (677,289)   4
    (678,802)   3
    (680,398)   1
    (681,390)   1
    (682,117)   4
    (683,110)   2
    (684,907)   0
    (686,202)   0
    (687,45)   1
    (688,287)   2
    (689,502)   3
    (690,299)   3
    (691,392)   2
    (692,600)   0
    (694,378)   1
    (695,702)   1
    (696,102)   2
    (698,631)   0
    (699,152)   1
    (700,840)   1
    (702,777)   1
    (703,132)   1
    (704,374)   1
    (705,579)   1
    (706,511)   3
    (707,76)   3
    (708,259)   2
    (708,925)   0
    (709,872)   1
    (709,873)   1
    (710,107)   3
    (710,293)   2
    (711,462)   0
    (714,475)   2
    (715,172)   0
    (715,751)   2
    (716,697)   0
    (717,234)   0
    (718,848)   2
    (719,331)   1
    (720,201)   1
    (720,725)   2
    (722,415)   2
    (722,934)   2
    (723,675)   2
    (724,480)   3
    (727,177)   4
    (728,797)   1
    (729,884)   1
    (730,767)   0
    (731,275)   1
    (732,910)   0
    (733,763)   5
    (734,574)   0
    (735,268)   3
    (736,115)   1
    (737,912)   2
    (738,1023)   2
    (739,335)   0
    (740,596)   3
    (741,365)   1
    (742,485)   5
    (743,186)   1
    (745,645)   2
    (746,273)   3
    (747,91)   5
    (748,886)   0
    (749,59)   2
    (749,755)   2
    (751,348)   0
    (752,313)   2
    (752,742)   0
    (752,745)   1
    (753,472)   1
    (753,592)   1
    (754,1007)   0
    (756,633)   1
    (758,847)   2
    (759,500)   3
    (760,340)   2
    (760,381)   2
    (762,962)   3
    (763,954)   0
    (764,392)   1
    (764,913)   3
    (766,915)   3
    (766,936)   0
    (767,372)   1
    (768,307)   0
    (770,458)   0
    (771,487)   0
    (773,56)   1
    (774,773)   0
    (775,115)   1
    (776,537)   1
    (777,392)   1
    (778,893)   0
    (779,644)   0
    (780,256)   2
    (782,399)   1
    (782,892)   2
    (783,614)   2
    (785,816)   1
    (786,462)   1
    (787,876)   1
    (788,273)   4
    (789,696)   2
    (790,471)   1
    (791,793)   3
    (792,636)   3
    (792,955)   3
    (793,809)   0
    (794,986)   1
    (795,656)   0
    (796,347)   3
    (797,880)   2
    (798,802)   0
    (801,130)   1
    (803,896)   3
    (804,1022)   3
    (805,32)   1
    (805,479)   1
    (806,889)   2
    (807,504)   3
    (809,719)   1
    (809,737)   2
    (810,646)   0
    (812,375)   3
    (813,200)   2
    (815,408)   3
    (816,902)   1
    (817,430)   1
    (818,985)   5
    (819,688)   1
    (821,839)   1
    (822,747)   1
    (823,39)   1
    (824,886)   0
    (825,406)   0
    (828,407)   2
    (829,511)   1
    (830,915)   2
    (831,982)   1
    (832,1003)   2
    (833,362)   2
    (833,999)   2
    (834,136)   2
    (834,295)   1
    (835,115)   1
    (836,218)   2
    (837,565)   4
    (839,541)   0
    (839,711)   0
    (840,159)   1
    (841,636)   1
    (842,136)   2
    (843,524)   0
    (844,114)   0
    (846,533)   1
    (847,741)   0
    (848,483)   1
    (849,464)   3
    (850,302)   0
    (851,567)   1
    (852,150)   4
    (852,529)   0
    (853,623)   1
    (855,106)   2
    (856,1014)   1
    (857,151)   2
    (857,650)   1
    (858,781)   1
    (858,994)   0
    (859,508)   0
    (859,716)   0
    (862,636)   2
    (863,21)   4
    (864,1022)   2
    (866,97)   0
    (867,48)   1
    (868,303)   1
    (869,364)   4
    (871,453)   1
    (873,173)   0
    (874,485)   7
    (875,168)   1
    (876,357)   0
    (877,722)   1
    (877,990)   0
    (880,176)   2
    (881,23)   1
    (882,608)   0
    (884,643)   3
    (885,687)   0
    (887,487)   0
    (888,110)   2
    (888,943)   0
    (889,892)   3
    (890,628)   2
    (891,679)   1
    (892,653)   2
    (894,33)   0
    (895,37)   2
    (895,695)   0
    (896,390)   0
    (897,42)   2
    (900,687)   0
    (901,605)   2
    (902,57)   1
    (903,1021)   1
    (904,808)   4
    (905,795)   3
    (906,479)   0
    (907,674)   2
    (909,456)   2
    (911,548)   1
    (914,924)   1
    (915,366)   2
    (915,502)   3
    (916,420)   3
    (916,823)   1
    (918,480)   3
    (920,608)   1
    (925,685)   0
    (926,755)   4
    (929,538)   0
    (930,13)   1
    (931,479)   3
    (933,860)   0
    (934,165)   0
    (935,351)   2
    (936,399)   1
    (938,215)   0
    (939,496)   0
    (940,414)   0
    (941,586)   5
    (942,356)   1
    (943,31)   4
    (943,538)   0
    (944,109)   3
    (945,671)   1
    (946,246)   3
    (947,182)   0
    (948,628)   2
    (949,316)   0
    (950,1017)   0
    (951,221)   2
    (955,457)   1
    (955,823)   0
    (956,653)   2
    (957,656)   0
    (958,644)   0
    (959,667)   2
    (960,78)   3
    (961,828)   4
    (962,877)   1
    (963,397)   1
    (964,370)   1
    (965,504)   3
    (966,483)   2
    (967,1023)   2
    (968,400)   0
    (969,564)   1
    (970,856)   1
    (971,875)   1
    (972,549)   1
    (974,934)   2
    (977,347)   3
    (978,123)   0
    (981,175)   3
    (983,58)   1
    (984,449)   1
    (984,582)   2
    (985,72)   1
    (985,743)   2
    (987,120)   2
    (987,340)   4
    (988,172)   0
    (989,585)   2
    (991,660)   1
    (992,531)   3
    (993,87)   2
    (993,674)   2
    (994,992)   2
    (995,170)   2
    (997,946)   1
    (998,678)   2
    (1001,877)   1
    (1002,286)   2
    (1004,250)   3
    (1006,1022)   3
    (1008,159)   1
    (1009,574)   0
    (1012,533)   1
    (1013,574)   1
    (1014,667)   3
    (1015,127)   1
    (1015,613)   2
    (1016,457)   1
    (1017,180)   2
    (1018,254)   2
    (1019,287)   3
    (1020,67)   3
    (1020,151)   2
    (1021,810)   1
    (1022,491)   0
    (1023,840)   2


  1024x1024 GraphBLAS int32_t matrix, sparse by row
  C_actual, 893 entries, memory: 28.2 KB

    (0,478)   1
    (0,574)   2
    (5,560)   3
    (6,996)   2
    (7,183)   0
    (7,666)   0
    (8,896)   2
    (9,187)   0
    (10,446)   2
    (11,46)   2
    (11,955)   2
    (12,397)   1
    (12,953)   0
    (13,192)   1
    (14,421)   1
    (15,568)   1
    (16,788)   1
    (16,904)   0
    (17,928)   0
    (19,821)   1
    (19,886)   0
    (20,474)   4
    (21,479)   1
    (21,975)   1
    (22,569)   1
    (23,310)   2
    (24,905)   0
    (25,241)   0
    (26,428)   0
    (28,107)   2
    (32,121)   0
    (33,81)   2
    (37,609)   2
    (39,698)   1
    (41,568)   1
    (42,324)   0
    (43,798)   1
    (46,208)   0
    (47,70)   1
    (48,336)   1
    (49,476)   1
    (50,35)   0
    (51,556)   0
    (52,999)   1
    (53,940)   1
    (54,558)   0
    (54,960)   1
    (55,979)   1
    (56,90)   2
    (57,846)   3
    (57,893)   0
    (58,35)   0
    (59,108)   3
    (60,479)   1
    (61,590)   2
    (62,771)   0
    (63,50)   0
    (64,268)   3
    (66,719)   2
    (67,411)   2
    (68,324)   0
    (69,477)   0
    (70,539)   1
    (71,228)   3
    (72,297)   3
    (73,665)   0
    (75,855)   0
    (76,248)   0
    (77,433)   4
    (78,90)   3
    (81,754)   4
    (82,243)   2
    (84,253)   1
    (86,104)   3
    (87,657)   0
    (89,825)   2
    (90,37)   4
    (91,234)   1
    (91,519)   1
    (92,74)   3
    (92,218)   1
    (92,690)   1
    (93,486)   2
    (94,637)   0
    (94,722)   1
    (96,564)   1
    (99,326)   2
    (100,281)   1
    (102,609)   2
    (104,644)   0
    (106,652)   1
    (107,239)   0
    (107,522)   2
    (108,131)   1
    (109,884)   2
    (110,402)   3
    (111,905)   2
    (112,127)   0
    (112,779)   0
    (113,278)   0
    (114,519)   1
    (115,240)   4
    (117,219)   0
    (117,338)   2
    (118,99)   4
    (120,477)   1
    (121,554)   3
    (121,715)   3
    (122,151)   3
    (125,177)   5
    (128,820)   6
    (129,660)   0
    (130,623)   1
    (131,253)   1
    (131,355)   1
    (133,492)   1
    (134,821)   0
    (135,295)   2
    (136,108)   3
    (137,834)   2
    (138,288)   1
    (139,284)   2
    (139,945)   0
    (141,199)   1
    (142,87)   4
    (142,225)   1
    (143,123)   0
    (144,574)   0
    (146,194)   3
    (148,357)   0
    (149,949)   1
    (150,717)   2
    (151,484)   2
    (156,290)   2
    (157,714)   0
    (157,974)   1
    (160,297)   1
    (162,601)   2
    (163,816)   3
    (164,221)   1
    (165,396)   1
    (166,801)   3
    (167,879)   3
    (168,321)   0
    (169,901)   3
    (172,951)   1
    (176,108)   1
    (176,188)   1
    (176,614)   2
    (176,781)   1
    (178,631)   1
    (179,932)   2
    (180,830)   3
    (182,675)   1
    (182,1001)   2
    (183,692)   1
    (184,143)   2
    (185,450)   1
    (186,779)   0
    (187,997)   3
    (188,357)   1
    (189,111)   2
    (190,990)   1
    (192,644)   0
    (192,953)   0
    (193,135)   1
    (194,137)   4
    (195,922)   4
    (197,859)   1
    (198,910)   1
    (199,531)   3
    (201,907)   0
    (202,863)   1
    (203,865)   4
    (204,614)   3
    (207,826)   1
    (208,985)   2
    (209,808)   3
    (211,71)   4
    (211,931)   3
    (212,426)   0
    (213,152)   0
    (214,928)   0
    (215,268)   3
    (216,550)   3
    (217,921)   0
    (218,704)   2
    (218,922)   2
    (219,66)   1
    (220,704)   2
    (221,56)   1
    (221,551)   2
    (222,545)   1
    (223,1016)   2
    (224,721)   1
    (225,935)   1
    (226,727)   0
    (228,743)   4
    (229,535)   2
    (231,551)   3
    (232,897)   2
    (234,520)   2
    (235,522)   2
    (236,221)   3
    (237,755)   2
    (238,964)   2
    (239,82)   0
    (240,388)   0
    (241,500)   2
    (242,124)   3
    (242,193)   0
    (243,300)   0
    (244,588)   0
    (244,1004)   3
    (245,494)   0
    (246,326)   1
    (247,115)   1
    (247,147)   1
    (248,233)   0
    (250,485)   6
    (251,708)   0
    (252,197)   1
    (253,485)   5
    (254,40)   3
    (254,238)   0
    (255,895)   3
    (256,114)   0
    (257,461)   2
    (257,796)   0
    (258,233)   1
    (260,884)   2
    (261,945)   1
    (262,368)   2
    (264,755)   1
    (265,124)   1
    (266,352)   3
    (267,10)   1
    (268,234)   1
    (269,400)   1
    (270,877)   0
    (270,924)   0
    (271,944)   0
    (272,67)   3
    (273,100)   1
    (274,979)   4
    (276,333)   2
    (277,377)   0
    (279,877)   1
    (280,18)   3
    (281,449)   3
    (282,179)   2
    (283,1007)   2
    (285,32)   1
    (286,37)   2
    (287,394)   3
    (288,848)   0
    (290,317)   0
    (291,594)   1
    (294,466)   2
    (294,960)   0
    (295,1)   0
    (295,106)   2
    (296,109)   2
    (296,183)   0
    (296,245)   0
    (297,912)   1
    (299,159)   1
    (300,554)   1
    (301,774)   1
    (302,30)   1
    (303,645)   1
    (304,229)   1
    (305,622)   0
    (307,264)   3
    (308,28)   0
    (309,328)   4
    (309,627)   0
    (310,357)   1
    (311,355)   1
    (312,61)   2
    (314,571)   3
    (315,177)   3
    (315,741)   0
    (316,177)   3
    (316,308)   4
    (320,468)   1
    (321,73)   0
    (322,235)   2
    (323,375)   3
    (323,651)   3
    (324,549)   2
    (325,306)   1
    (325,487)   1
    (326,649)   2
    (327,704)   0
    (329,176)   2
    (330,848)   1
    (330,965)   2
    (332,795)   1
    (334,695)   1
    (336,808)   4
    (337,608)   1
    (338,993)   2
    (339,680)   0
    (340,849)   1
    (342,723)   2
    (343,678)   2
    (344,384)   3
    (344,680)   0
    (345,75)   0
    (347,996)   3
    (348,60)   3
    (348,821)   1
    (350,282)   1
    (352,160)   2
    (353,536)   1
    (355,352)   5
    (356,340)   2
    (358,678)   2
    (360,679)   1
    (361,794)   0
    (361,989)   3
    (362,816)   2
    (363,206)   4
    (364,629)   0
    (365,990)   0
    (366,841)   1
    (366,971)   0
    (367,888)   2
    (368,587)   0
    (369,684)   3
    (370,270)   1
    (372,471)   1
    (373,88)   1
    (375,992)   2
    (376,336)   3
    (377,86)   1
    (378,882)   1
    (379,592)   2
    (380,77)   2
    (380,643)   2
    (381,1012)   2
    (382,816)   2
    (383,711)   2
    (385,670)   1
    (386,537)   1
    (387,347)   2
    (388,494)   1
    (389,328)   3
    (390,551)   1
    (391,59)   2
    (391,600)   1
    (394,692)   4
    (396,645)   2
    (398,107)   3
    (398,246)   2
    (399,436)   3
    (400,172)   0
    (401,790)   3
    (402,320)   2
    (403,40)   2
    (404,641)   0
    (405,49)   0
    (405,475)   1
    (407,320)   3
    (408,61)   4
    (410,754)   3
    (411,643)   2
    (412,949)   1
    (413,94)   5
    (415,26)   1
    (416,575)   0
    (417,366)   3
    (418,160)   0
    (419,209)   1
    (421,614)   1
    (422,177)   2
    (423,873)   1
    (424,542)   3
    (425,263)   0
    (426,377)   0
    (427,149)   0
    (429,305)   0
    (430,718)   1
    (431,51)   0
    (432,857)   2
    (434,604)   0
    (435,152)   2
    (436,356)   1
    (437,105)   3
    (440,338)   0
    (441,982)   2
    (442,880)   1
    (443,753)   1
    (446,741)   0
    (448,646)   0
    (448,744)   2
    (450,579)   1
    (451,147)   0
    (451,1017)   0
    (452,868)   3
    (453,26)   1
    (454,415)   1
    (454,668)   0
    (455,43)   0
    (456,849)   1
    (456,985)   2
    (457,218)   2
    (458,510)   4
    (459,737)   2
    (460,836)   2
    (461,849)   0
    (461,917)   2
    (462,900)   1
    (463,316)   1
    (464,762)   1
    (465,355)   1
    (465,801)   1
    (466,673)   0
    (468,288)   1
    (470,889)   2
    (471,650)   1
    (473,121)   1
    (473,127)   2
    (474,487)   0
    (476,44)   0
    (477,342)   1
    (480,667)   1
    (481,558)   0
    (482,680)   1
    (483,517)   1
    (484,961)   1
    (485,274)   0
    (486,1015)   3
    (487,194)   1
    (489,802)   2
    (490,811)   1
    (491,319)   4
    (492,377)   1
    (494,432)   1
    (495,809)   0
    (496,267)   2
    (496,902)   1
    (498,194)   1
    (500,84)   0
    (501,704)   2
    (503,519)   2
    (504,510)   3
    (505,574)   1
    (507,643)   3
    (508,449)   3
    (512,892)   3
    (513,271)   2
    (517,369)   1
    (518,293)   2
    (520,270)   1
    (521,1013)   1
    (522,284)   1
    (524,945)   1
    (525,94)   5
    (525,362)   2
    (526,52)   1
    (527,61)   3
    (529,998)   0
    (531,908)   1
    (533,674)   4
    (535,660)   1
    (535,776)   1
    (536,500)   3
    (537,799)   2
    (538,492)   2
    (538,861)   1
    (540,245)   0
    (542,137)   2
    (545,658)   0
    (546,213)   1
    (547,767)   1
    (547,912)   3
    (547,1018)   1
    (548,46)   2
    (548,697)   0
    (549,602)   2
    (550,927)   2
    (553,391)   1
    (554,351)   2
    (555,10)   2
    (556,26)   2
    (557,910)   0
    (560,792)   0
    (562,182)   0
    (562,862)   1
    (563,877)   0
    (564,310)   3
    (564,609)   3
    (565,490)   0
    (566,564)   2
    (566,607)   1
    (569,872)   0
    (570,465)   1
    (571,271)   3
    (571,919)   1
    (574,603)   0
    (576,256)   4
    (579,274)   0
    (580,182)   0
    (581,445)   0
    (582,177)   3
    (583,118)   0
    (584,399)   1
    (585,433)   4
    (587,254)   2
    (588,914)   2
    (589,1016)   3
    (590,95)   3
    (590,802)   2
    (592,527)   0
    (593,143)   2
    (594,430)   0
    (595,787)   2
    (598,788)   1
    (599,127)   3
    (601,478)   2
    (602,218)   0
    (603,759)   1
    (604,270)   1
    (605,76)   3
    (606,930)   0
    (608,832)   1
    (609,287)   1
    (610,794)   0
    (611,759)   1
    (613,398)   3
    (614,386)   4
    (615,115)   0
    (616,928)   0
    (617,30)   2
    (618,361)   5
    (619,996)   4
    (620,5)   3
    (621,41)   0
    (623,44)   2
    (624,19)   1
    (624,242)   2
    (624,524)   1
    (626,51)   0
    (627,361)   1
    (628,396)   3
    (629,882)   1
    (630,341)   1
    (631,49)   1
    (631,585)   1
    (632,73)   1
    (634,912)   2
    (635,882)   1
    (636,617)   1
    (637,716)   0
    (638,113)   1
    (639,616)   5
    (640,837)   2
    (641,457)   1
    (643,934)   3
    (647,783)   2
    (648,195)   1
    (649,614)   1
    (650,957)   1
    (651,281)   2
    (652,973)   1
    (653,60)   1
    (653,333)   2
    (654,605)   3
    (655,910)   0
    (656,349)   3
    (660,591)   4
    (661,512)   2
    (663,767)   0
    (665,77)   3
    (666,503)   4
    (667,951)   2
    (668,365)   4
    (669,300)   1
    (671,141)   1
    (671,565)   2
    (672,819)   1
    (674,819)   1
    (675,454)   0
    (676,242)   2
    (677,289)   4
    (678,802)   3
    (680,398)   1
    (681,390)   1
    (682,117)   4
    (683,110)   2
    (684,907)   0
    (686,202)   0
    (687,45)   1
    (688,287)   2
    (689,502)   3
    (690,299)   3
    (691,392)   2
    (692,600)   0
    (694,378)   1
    (695,702)   1
    (696,102)   2
    (698,631)   0
    (699,152)   1
    (700,840)   1
    (702,777)   1
    (703,132)   1
    (704,374)   1
    (705,579)   1
    (706,511)   3
    (707,76)   3
    (708,259)   2
    (708,925)   0
    (709,872)   1
    (709,873)   1
    (710,107)   3
    (710,293)   2
    (711,462)   0
    (714,475)   2
    (715,172)   0
    (715,751)   2
    (716,697)   0
    (717,234)   0
    (718,848)   2
    (719,331)   1
    (720,201)   1
    (720,725)   2
    (722,415)   2
    (722,934)   2
    (723,675)   2
    (724,480)   3
    (727,177)   4
    (728,797)   1
    (729,884)   1
    (730,767)   0
    (731,275)   1
    (732,910)   0
    (733,763)   5
    (734,574)   0
    (735,268)   3
    (736,115)   1
    (737,912)   2
    (738,1023)   2
    (739,335)   0
    (740,596)   3
    (741,365)   1
    (742,485)   5
    (743,186)   1
    (745,645)   2
    (746,273)   3
    (747,91)   5
    (748,886)   0
    (749,59)   2
    (749,755)   2
    (751,348)   0
    (752,313)   2
    (752,742)   0
    (752,745)   1
    (753,472)   1
    (753,592)   1
    (754,1007)   0
    (756,633)   1
    (758,847)   2
    (759,500)   3
    (760,340)   2
    (760,381)   2
    (762,962)   3
    (763,954)   0
    (764,392)   1
    (764,913)   3
    (766,915)   3
    (766,936)   0
    (767,372)   1
    (768,307)   0
    (770,458)   0
    (771,487)   0
    (773,56)   1
    (774,773)   0
    (775,115)   1
    (776,537)   1
    (777,392)   1
    (778,893)   0
    (779,644)   0
    (780,256)   2
    (782,399)   1
    (782,892)   2
    (783,614)   2
    (785,816)   1
    (786,462)   1
    (787,876)   1
    (788,273)   4
    (789,696)   2
    (790,471)   1
    (791,793)   3
    (792,636)   3
    (792,955)   3
    (793,809)   0
    (794,986)   1
    (795,656)   0
    (796,347)   3
    (797,880)   2
    (798,802)   0
    (801,130)   1
    (803,896)   3
    (804,1022)   3
    (805,32)   1
    (805,479)   1
    (806,889)   2
    (807,504)   3
    (809,719)   1
    (809,737)   2
    (810,646)   0
    (812,375)   3
    (813,200)   2
    (815,408)   3
    (816,902)   1
    (817,430)   1
    (818,985)   5
    (819,688)   1
    (821,839)   1
    (822,747)   1
    (823,39)   1
    (824,886)   0
    (825,406)   0
    (828,407)   2
    (829,511)   1
    (830,915)   2
    (831,982)   1
    (832,1003)   2
    (833,362)   2
    (833,999)   2
    (834,136)   2
    (834,295)   1
    (835,115)   1
    (836,218)   2
    (837,565)   4
    (839,541)   0
    (839,711)   0
    (840,159)   1
    (841,636)   1
    (842,136)   2
    (843,524)   0
    (844,114)   0
    (846,533)   1
    (847,741)   0
    (848,483)   1
    (849,464)   3
    (850,302)   0
    (851,567)   1
    (852,150)   4
    (852,529)   0
    (853,623)   1
    (855,106)   2
    (856,1014)   1
    (857,151)   2
    (857,650)   1
    (858,781)   1
    (858,994)   0
    (859,508)   0
    (859,716)   0
    (862,636)   2
    (863,21)   4
    (864,1022)   2
    (866,97)   0
    (867,48)   1
    (868,303)   1
    (869,364)   4
    (871,453)   1
    (873,173)   0
    (874,485)   7
    (875,168)   1
    (876,357)   0
    (877,722)   1
    (877,990)   0
    (880,176)   2
    (881,23)   1
    (882,608)   0
    (884,643)   3
    (885,687)   0
    (887,487)   0
    (888,110)   2
    (888,943)   0
    (889,892)   3
    (890,628)   2
    (891,679)   1
    (892,653)   2
    (894,33)   0
    (895,37)   2
    (895,695)   0
    (896,390)   0
    (897,42)   2
    (900,687)   0
    (901,605)   2
    (902,57)   1
    (903,1021)   1
    (904,808)   4
    (905,795)   3
    (906,479)   0
    (907,674)   2
    (909,456)   2
    (911,548)   1
    (914,924)   1
    (915,366)   2
    (915,502)   3
    (916,420)   3
    (916,823)   1
    (918,480)   3
    (920,608)   1
    (925,685)   0
    (926,755)   4
    (929,538)   0
    (930,13)   1
    (931,479)   3
    (933,860)   0
    (934,165)   0
    (935,351)   2
    (936,399)   1
    (938,215)   0
    (939,496)   0
    (940,414)   0
    (941,586)   5
    (942,356)   1
    (943,31)   4
    (943,538)   0
    (944,109)   3
    (945,671)   1
    (946,246)   3
    (947,182)   0
    (948,628)   2
    (949,316)   0
    (950,1017)   0
    (951,221)   2
    (955,457)   1
    (955,823)   0
    (956,653)   2
    (957,656)   0
    (958,644)   0
    (959,667)   2
    (960,78)   3
    (961,828)   4
    (962,877)   1
    (963,397)   1
    (964,370)   1
    (965,504)   3
    (966,483)   2
    (967,1023)   2
    (968,400)   0
    (969,564)   1
    (970,856)   1
    (971,875)   1
    (972,549)   1
    (974,934)   2
    (977,347)   3
    (978,123)   0
    (981,175)   3
    (983,58)   1
    (984,449)   1
    (984,582)   2
    (985,72)   1
    (985,743)   2
    (987,120)   2
    (987,340)   4
    (988,172)   0
    (989,585)   2
    (991,660)   1
    (992,531)   3
    (993,87)   2
    (993,674)   2
    (994,992)   2
    (995,170)   2
    (997,946)   1
    (998,678)   2
    (1001,877)   1
    (1002,286)   2
    (1004,250)   3
    (1006,1022)   3
    (1008,159)   1
    (1009,574)   0
    (1012,533)   1
    (1013,574)   1
    (1014,667)   3
    (1015,127)   1
    (1015,613)   2
    (1016,457)   1
    (1017,180)   2
    (1018,254)   2
    (1019,287)   3
    (1020,67)   3
    (1020,151)   2
    (1021,810)   1
    (1022,491)   0
    (1023,840)   2

 rmm_wrap_alloc 256 bytes
 rmm_wrap_alloc 256 bytes

  1024x1024 GraphBLAS double matrix, sparse by row
  Diff actual, 893 entries, memory: 32.2 KB

    (0,478)    0
    (0,574)    0
    (5,560)    0
    (6,996)    0
    (7,183)    0
    (7,666)    0
    (8,896)    0
    (9,187)    0
    (10,446)    0
    (11,46)    0
    (11,955)    0
    (12,397)    0
    (12,953)    0
    (13,192)    0
    (14,421)    0
    (15,568)    0
    (16,788)    0
    (16,904)    0
    (17,928)    0
    (19,821)    0
    (19,886)    0
    (20,474)    0
    (21,479)    0
    (21,975)    0
    (22,569)    0
    (23,310)    0
    (24,905)    0
    (25,241)    0
    (26,428)    0
    (28,107)    0
    (32,121)    0
    (33,81)    0
    (37,609)    0
    (39,698)    0
    (41,568)    0
    (42,324)    0
    (43,798)    0
    (46,208)    0
    (47,70)    0
    (48,336)    0
    (49,476)    0
    (50,35)    0
    (51,556)    0
    (52,999)    0
    (53,940)    0
    (54,558)    0
    (54,960)    0
    (55,979)    0
    (56,90)    0
    (57,846)    0
    (57,893)    0
    (58,35)    0
    (59,108)    0
    (60,479)    0
    (61,590)    0
    (62,771)    0
    (63,50)    0
    (64,268)    0
    (66,719)    0
    (67,411)    0
    (68,324)    0
    (69,477)    0
    (70,539)    0
    (71,228)    0
    (72,297)    0
    (73,665)    0
    (75,855)    0
    (76,248)    0
    (77,433)    0
    (78,90)    0
    (81,754)    0
    (82,243)    0
    (84,253)    0
    (86,104)    0
    (87,657)    0
    (89,825)    0
    (90,37)    0
    (91,234)    0
    (91,519)    0
    (92,74)    0
    (92,218)    0
    (92,690)    0
    (93,486)    0
    (94,637)    0
    (94,722)    0
    (96,564)    0
    (99,326)    0
    (100,281)    0
    (102,609)    0
    (104,644)    0
    (106,652)    0
    (107,239)    0
    (107,522)    0
    (108,131)    0
    (109,884)    0
    (110,402)    0
    (111,905)    0
    (112,127)    0
    (112,779)    0
    (113,278)    0
    (114,519)    0
    (115,240)    0
    (117,219)    0
    (117,338)    0
    (118,99)    0
    (120,477)    0
    (121,554)    0
    (121,715)    0
    (122,151)    0
    (125,177)    0
    (128,820)    0
    (129,660)    0
    (130,623)    0
    (131,253)    0
    (131,355)    0
    (133,492)    0
    (134,821)    0
    (135,295)    0
    (136,108)    0
    (137,834)    0
    (138,288)    0
    (139,284)    0
    (139,945)    0
    (141,199)    0
    (142,87)    0
    (142,225)    0
    (143,123)    0
    (144,574)    0
    (146,194)    0
    (148,357)    0
    (149,949)    0
    (150,717)    0
    (151,484)    0
    (156,290)    0
    (157,714)    0
    (157,974)    0
    (160,297)    0
    (162,601)    0
    (163,816)    0
    (164,221)    0
    (165,396)    0
    (166,801)    0
    (167,879)    0
    (168,321)    0
    (169,901)    0
    (172,951)    0
    (176,108)    0
    (176,188)    0
    (176,614)    0
    (176,781)    0
    (178,631)    0
    (179,932)    0
    (180,830)    0
    (182,675)    0
    (182,1001)    0
    (183,692)    0
    (184,143)    0
    (185,450)    0
    (186,779)    0
    (187,997)    0
    (188,357)    0
    (189,111)    0
    (190,990)    0
    (192,644)    0
    (192,953)    0
    (193,135)    0
    (194,137)    0
    (195,922)    0
    (197,859)    0
    (198,910)    0
    (199,531)    0
    (201,907)    0
    (202,863)    0
    (203,865)    0
    (204,614)    0
    (207,826)    0
    (208,985)    0
    (209,808)    0
    (211,71)    0
    (211,931)    0
    (212,426)    0
    (213,152)    0
    (214,928)    0
    (215,268)    0
    (216,550)    0
    (217,921)    0
    (218,704)    0
    (218,922)    0
    (219,66)    0
    (220,704)    0
    (221,56)    0
    (221,551)    0
    (222,545)    0
    (223,1016)    0
    (224,721)    0
    (225,935)    0
    (226,727)    0
    (228,743)    0
    (229,535)    0
    (231,551)    0
    (232,897)    0
    (234,520)    0
    (235,522)    0
    (236,221)    0
    (237,755)    0
    (238,964)    0
    (239,82)    0
    (240,388)    0
    (241,500)    0
    (242,124)    0
    (242,193)    0
    (243,300)    0
    (244,588)    0
    (244,1004)    0
    (245,494)    0
    (246,326)    0
    (247,115)    0
    (247,147)    0
    (248,233)    0
    (250,485)    0
    (251,708)    0
    (252,197)    0
    (253,485)    0
    (254,40)    0
    (254,238)    0
    (255,895)    0
    (256,114)    0
    (257,461)    0
    (257,796)    0
    (258,233)    0
    (260,884)    0
    (261,945)    0
    (262,368)    0
    (264,755)    0
    (265,124)    0
    (266,352)    0
    (267,10)    0
    (268,234)    0
    (269,400)    0
    (270,877)    0
    (270,924)    0
    (271,944)    0
    (272,67)    0
    (273,100)    0
    (274,979)    0
    (276,333)    0
    (277,377)    0
    (279,877)    0
    (280,18)    0
    (281,449)    0
    (282,179)    0
    (283,1007)    0
    (285,32)    0
    (286,37)    0
    (287,394)    0
    (288,848)    0
    (290,317)    0
    (291,594)    0
    (294,466)    0
    (294,960)    0
    (295,1)    0
    (295,106)    0
    (296,109)    0
    (296,183)    0
    (296,245)    0
    (297,912)    0
    (299,159)    0
    (300,554)    0
    (301,774)    0
    (302,30)    0
    (303,645)    0
    (304,229)    0
    (305,622)    0
    (307,264)    0
    (308,28)    0
    (309,328)    0
    (309,627)    0
    (310,357)    0
    (311,355)    0
    (312,61)    0
    (314,571)    0
    (315,177)    0
    (315,741)    0
    (316,177)    0
    (316,308)    0
    (320,468)    0
    (321,73)    0
    (322,235)    0
    (323,375)    0
    (323,651)    0
    (324,549)    0
    (325,306)    0
    (325,487)    0
    (326,649)    0
    (327,704)    0
    (329,176)    0
    (330,848)    0
    (330,965)    0
    (332,795)    0
    (334,695)    0
    (336,808)    0
    (337,608)    0
    (338,993)    0
    (339,680)    0
    (340,849)    0
    (342,723)    0
    (343,678)    0
    (344,384)    0
    (344,680)    0
    (345,75)    0
    (347,996)    0
    (348,60)    0
    (348,821)    0
    (350,282)    0
    (352,160)    0
    (353,536)    0
    (355,352)    0
    (356,340)    0
    (358,678)    0
    (360,679)    0
    (361,794)    0
    (361,989)    0
    (362,816)    0
    (363,206)    0
    (364,629)    0
    (365,990)    0
    (366,841)    0
    (366,971)    0
    (367,888)    0
    (368,587)    0
    (369,684)    0
    (370,270)    0
    (372,471)    0
    (373,88)    0
    (375,992)    0
    (376,336)    0
    (377,86)    0
    (378,882)    0
    (379,592)    0
    (380,77)    0
    (380,643)    0
    (381,1012)    0
    (382,816)    0
    (383,711)    0
    (385,670)    0
    (386,537)    0
    (387,347)    0
    (388,494)    0
    (389,328)    0
    (390,551)    0
    (391,59)    0
    (391,600)    0
    (394,692)    0
    (396,645)    0
    (398,107)    0
    (398,246)    0
    (399,436)    0
    (400,172)    0
    (401,790)    0
    (402,320)    0
    (403,40)    0
    (404,641)    0
    (405,49)    0
    (405,475)    0
    (407,320)    0
    (408,61)    0
    (410,754)    0
    (411,643)    0
    (412,949)    0
    (413,94)    0
    (415,26)    0
    (416,575)    0
    (417,366)    0
    (418,160)    0
    (419,209)    0
    (421,614)    0
    (422,177)    0
    (423,873)    0
    (424,542)    0
    (425,263)    0
    (426,377)    0
    (427,149)    0
    (429,305)    0
    (430,718)    0
    (431,51)    0
    (432,857)    0
    (434,604)    0
    (435,152)    0
    (436,356)    0
    (437,105)    0
    (440,338)    0
    (441,982)    0
    (442,880)    0
    (443,753)    0
    (446,741)    0
    (448,646)    0
    (448,744)    0
    (450,579)    0
    (451,147)    0
    (451,1017)    0
    (452,868)    0
    (453,26)    0
    (454,415)    0
    (454,668)    0
    (455,43)    0
    (456,849)    0
    (456,985)    0
    (457,218)    0
    (458,510)    0
    (459,737)    0
    (460,836)    0
    (461,849)    0
    (461,917)    0
    (462,900)    0
    (463,316)    0
    (464,762)    0
    (465,355)    0
    (465,801)    0
    (466,673)    0
    (468,288)    0
    (470,889)    0
    (471,650)    0
    (473,121)    0
    (473,127)    0
    (474,487)    0
    (476,44)    0
    (477,342)    0
    (480,667)    0
    (481,558)    0
    (482,680)    0
    (483,517)    0
    (484,961)    0
    (485,274)    0
    (486,1015)    0
    (487,194)    0
    (489,802)    0
    (490,811)    0
    (491,319)    0
    (492,377)    0
    (494,432)    0
    (495,809)    0
    (496,267)    0
    (496,902)    0
    (498,194)    0
    (500,84)    0
    (501,704)    0
    (503,519)    0
    (504,510)    0
    (505,574)    0
    (507,643)    0
    (508,449)    0
    (512,892)    0
    (513,271)    0
    (517,369)    0
    (518,293)    0
    (520,270)    0
    (521,1013)    0
    (522,284)    0
    (524,945)    0
    (525,94)    0
    (525,362)    0
    (526,52)    0
    (527,61)    0
    (529,998)    0
    (531,908)    0
    (533,674)    0
    (535,660)    0
    (535,776)    0
    (536,500)    0
    (537,799)    0
    (538,492)    0
    (538,861)    0
    (540,245)    0
    (542,137)    0
    (545,658)    0
    (546,213)    0
    (547,767)    0
    (547,912)    0
    (547,1018)    0
    (548,46)    0
    (548,697)    0
    (549,602)    0
    (550,927)    0
    (553,391)    0
    (554,351)    0
    (555,10)    0
    (556,26)    0
    (557,910)    0
    (560,792)    0
    (562,182)    0
    (562,862)    0
    (563,877)    0
    (564,310)    0
    (564,609)    0
    (565,490)    0
    (566,564)    0
    (566,607)    0
    (569,872)    0
    (570,465)    0
    (571,271)    0
    (571,919)    0
    (574,603)    0
    (576,256)    0
    (579,274)    0
    (580,182)    0
    (581,445)    0
    (582,177)    0
    (583,118)    0
    (584,399)    0
    (585,433)    0
    (587,254)    0
    (588,914)    0
    (589,1016)    0
    (590,95)    0
    (590,802)    0
    (592,527)    0
    (593,143)    0
    (594,430)    0
    (595,787)    0
    (598,788)    0
    (599,127)    0
    (601,478)    0
    (602,218)    0
    (603,759)    0
    (604,270)    0
    (605,76)    0
    (606,930)    0
    (608,832)    0
    (609,287)    0
    (610,794)    0
    (611,759)    0
    (613,398)    0
    (614,386)    0
    (615,115)    0
    (616,928)    0
    (617,30)    0
    (618,361)    0
    (619,996)    0
    (620,5)    0
    (621,41)    0
    (623,44)    0
    (624,19)    0
    (624,242)    0
    (624,524)    0
    (626,51)    0
    (627,361)    0
    (628,396)    0
    (629,882)    0
    (630,341)    0
    (631,49)    0
    (631,585)    0
    (632,73)    0
    (634,912)    0
    (635,882)    0
    (636,617)    0
    (637,716)    0
    (638,113)    0
    (639,616)    0
    (640,837)    0
    (641,457)    0
    (643,934)    0
    (647,783)    0
    (648,195)    0
    (649,614)    0
    (650,957)    0
    (651,281)    0
    (652,973)    0
    (653,60)    0
    (653,333)    0
    (654,605)    0
    (655,910)    0
    (656,349)    0
    (660,591)    0
    (661,512)    0
    (663,767)    0
    (665,77)    0
    (666,503)    0
    (667,951)    0
    (668,365)    0
    (669,300)    0
    (671,141)    0
    (671,565)    0
    (672,819)    0
    (674,819)    0
    (675,454)    0
    (676,242)    0
    (677,289)    0
    (678,802)    0
    (680,398)    0
    (681,390)    0
    (682,117)    0
    (683,110)    0
    (684,907)    0
    (686,202)    0
    (687,45)    0
    (688,287)    0
    (689,502)    0
    (690,299)    0
    (691,392)    0
    (692,600)    0
    (694,378)    0
    (695,702)    0
    (696,102)    0
    (698,631)    0
    (699,152)    0
    (700,840)    0
    (702,777)    0
    (703,132)    0
    (704,374)    0
    (705,579)    0
    (706,511)    0
    (707,76)    0
    (708,259)    0
    (708,925)    0
    (709,872)    0
    (709,873)    0
    (710,107)    0
    (710,293)    0
    (711,462)    0
    (714,475)    0
    (715,172)    0
    (715,751)    0
    (716,697)    0
    (717,234)    0
    (718,848)    0
    (719,331)    0
    (720,201)    0
    (720,725)    0
    (722,415)    0
    (722,934)    0
    (723,675)    0
    (724,480)    0
    (727,177)    0
    (728,797)    0
    (729,884)    0
    (730,767)    0
    (731,275)    0
    (732,910)    0
    (733,763)    0
    (734,574)    0
    (735,268)    0
    (736,115)    0
    (737,912)    0
    (738,1023)    0
    (739,335)    0
    (740,596)    0
    (741,365)    0
    (742,485)    0
    (743,186)    0
    (745,645)    0
    (746,273)    0
    (747,91)    0
    (748,886)    0
    (749,59)    0
    (749,755)    0
    (751,348)    0
    (752,313)    0
    (752,742)    0
    (752,745)    0
    (753,472)    0
    (753,592)    0
    (754,1007)    0
    (756,633)    0
    (758,847)    0
    (759,500)    0
    (760,340)    0
    (760,381)    0
    (762,962)    0
    (763,954)    0
    (764,392)    0
    (764,913)    0
    (766,915)    0
    (766,936)    0
    (767,372)    0
    (768,307)    0
    (770,458)    0
    (771,487)    0
    (773,56)    0
    (774,773)    0
    (775,115)    0
    (776,537)    0
    (777,392)    0
    (778,893)    0
    (779,644)    0
    (780,256)    0
    (782,399)    0
    (782,892)    0
    (783,614)    0
    (785,816)    0
    (786,462)    0
    (787,876)    0
    (788,273)    0
    (789,696)    0
    (790,471)    0
    (791,793)    0
    (792,636)    0
    (792,955)    0
    (793,809)    0
    (794,986)    0
    (795,656)    0
    (796,347)    0
    (797,880)    0
    (798,802)    0
    (801,130)    0
    (803,896)    0
    (804,1022)    0
    (805,32)    0
    (805,479)    0
    (806,889)    0
    (807,504)    0
    (809,719)    0
    (809,737)    0
    (810,646)    0
    (812,375)    0
    (813,200)    0
    (815,408)    0
    (816,902)    0
    (817,430)    0
    (818,985)    0
    (819,688)    0
    (821,839)    0
    (822,747)    0
    (823,39)    0
    (824,886)    0
    (825,406)    0
    (828,407)    0
    (829,511)    0
    (830,915)    0
    (831,982)    0
    (832,1003)    0
    (833,362)    0
    (833,999)    0
    (834,136)    0
    (834,295)    0
    (835,115)    0
    (836,218)    0
    (837,565)    0
    (839,541)    0
    (839,711)    0
    (840,159)    0
    (841,636)    0
    (842,136)    0
    (843,524)    0
    (844,114)    0
    (846,533)    0
    (847,741)    0
    (848,483)    0
    (849,464)    0
    (850,302)    0
    (851,567)    0
    (852,150)    0
    (852,529)    0
    (853,623)    0
    (855,106)    0
    (856,1014)    0
    (857,151)    0
    (857,650)    0
    (858,781)    0
    (858,994)    0
    (859,508)    0
    (859,716)    0
    (862,636)    0
    (863,21)    0
    (864,1022)    0
    (866,97)    0
    (867,48)    0
    (868,303)    0
    (869,364)    0
    (871,453)    0
    (873,173)    0
    (874,485)    0
    (875,168)    0
    (876,357)    0
    (877,722)    0
    (877,990)    0
    (880,176)    0
    (881,23)    0
    (882,608)    0
    (884,643)    0
    (885,687)    0
    (887,487)    0
    (888,110)    0
    (888,943)    0
    (889,892)    0
    (890,628)    0
    (891,679)    0
    (892,653)    0
    (894,33)    0
    (895,37)    0
    (895,695)    0
    (896,390)    0
    (897,42)    0
    (900,687)    0
    (901,605)    0
    (902,57)    0
    (903,1021)    0
    (904,808)    0
    (905,795)    0
    (906,479)    0
    (907,674)    0
    (909,456)    0
    (911,548)    0
    (914,924)    0
    (915,366)    0
    (915,502)    0
    (916,420)    0
    (916,823)    0
    (918,480)    0
    (920,608)    0
    (925,685)    0
    (926,755)    0
    (929,538)    0
    (930,13)    0
    (931,479)    0
    (933,860)    0
    (934,165)    0
    (935,351)    0
    (936,399)    0
    (938,215)    0
    (939,496)    0
    (940,414)    0
    (941,586)    0
    (942,356)    0
    (943,31)    0
    (943,538)    0
    (944,109)    0
    (945,671)    0
    (946,246)    0
    (947,182)    0
    (948,628)    0
    (949,316)    0
    (950,1017)    0
    (951,221)    0
    (955,457)    0
    (955,823)    0
    (956,653)    0
    (957,656)    0
    (958,644)    0
    (959,667)    0
    (960,78)    0
    (961,828)    0
    (962,877)    0
    (963,397)    0
    (964,370)    0
    (965,504)    0
    (966,483)    0
    (967,1023)    0
    (968,400)    0
    (969,564)    0
    (970,856)    0
    (971,875)    0
    (972,549)    0
    (974,934)    0
    (977,347)    0
    (978,123)    0
    (981,175)    0
    (983,58)    0
    (984,449)    0
    (984,582)    0
    (985,72)    0
    (985,743)    0
    (987,120)    0
    (987,340)    0
    (988,172)    0
    (989,585)    0
    (991,660)    0
    (992,531)    0
    (993,87)    0
    (993,674)    0
    (994,992)    0
    (995,170)    0
    (997,946)    0
    (998,678)    0
    (1001,877)    0
    (1002,286)    0
    (1004,250)    0
    (1006,1022)    0
    (1008,159)    0
    (1009,574)    0
    (1012,533)    0
    (1013,574)    0
    (1014,667)    0
    (1015,127)    0
    (1015,613)    0
    (1016,457)    0
    (1017,180)    0
    (1018,254)    0
    (1019,287)    0
    (1020,67)    0
    (1020,151)    0
    (1021,810)    0
    (1022,491)    0
    (1023,840)    0


  1024x1024 GraphBLAS bool matrix, sparse by row
  T actual, 893 entries, memory: 25.2 KB

    (0,478)   1
    (0,574)   1
    (5,560)   1
    (6,996)   1
    (7,183)   1
    (7,666)   1
    (8,896)   1
    (9,187)   1
    (10,446)   1
    (11,46)   1
    (11,955)   1
    (12,397)   1
    (12,953)   1
    (13,192)   1
    (14,421)   1
    (15,568)   1
    (16,788)   1
    (16,904)   1
    (17,928)   1
    (19,821)   1
    (19,886)   1
    (20,474)   1
    (21,479)   1
    (21,975)   1
    (22,569)   1
    (23,310)   1
    (24,905)   1
    (25,241)   1
    (26,428)   1
    ...
 work:893 gpus:0 Getting test data
Creating problem gen
filling matrices
inside fill, using seed 4567
fill_random nrows=1024ncols=1024 need 1024 values, invsparse = 1024
fill_random after alloc values
vdim ready 
vlen ready 
ready to fill p
filling sparse
1024 nonzeroes left to fill..
35 nonzeroes left to fill..
 rmm_wrap_alloc 8192 bytes
inside fill, using seed 4567
fill_random nrows=1024ncols=1024 need 1024 values, invsparse = 1024
fill_random after alloc values
vdim ready 
vlen ready 
ready to fill p
filling sparse
1024 nonzeroes left to fill..
35 nonzeroes left to fill..
 rmm_wrap_alloc 4096 bytes
inside fill, using seed 543210
fill_random nrows=1024ncols=1024 need 2048 values, invsparse = 512
fill_random after alloc values
vdim ready 
vlen ready 
ready to fill p
filling sparse
2048 nonzeroes left to fill..
504 nonzeroes left to fill..
 rmm_wrap_alloc 256 bytes
 rmm_wrap_alloc 256 bytes
 rmm_wrap_alloc 16384 bytes
 rmm_wrap_alloc 16384 bytes
 rmm_wrap_alloc 16384 bytes
 rmm_wrap_alloc 256 bytes
 rmm_wrap_alloc 8192 bytes
 rmm_wrap_alloc 8192 bytes
inside fill, using seed 32
fill_random nrows=1024ncols=1024 need 10240 values, invsparse = 103
fill_random after alloc values
vdim ready 
vlen ready 
ready to fill p
filling sparse
10240 nonzeroes left to fill..
4633 nonzeroes left to fill..
 rmm_wrap_alloc 16384 bytes
 rmm_wrap_alloc 131072 bytes
 rmm_wrap_alloc 256 bytes
1024 slots to fill
all pairs to bucket 6, no filling
done assigning buckets
Building semiring factgory
 calling stringify semiring: 0x7f1ff534e400
inside enumify: 0x7f1ff534e400

    GraphBLAS Semiring: semiring (user-defined)
    GraphBLAS Monoid: semiring->add (built-in)
    GraphBLAS BinaryOp: monoid->op (built-in) z=plus(x,y)
    GraphBLAS type: ztype int32_t size: 4
    GraphBLAS type: xtype int32_t size: 4
    GraphBLAS type: ytype int32_t size: 4
    identity: [   0 ] 

    GraphBLAS BinaryOp: semiring->multiply (built-in) z=times(x,y)
    GraphBLAS type: ztype int32_t size: 4
    GraphBLAS type: xtype int32_t size: 4
    GraphBLAS type: ytype int32_t size: 4
Getting semiring add
Getting semiring mult
Getting semiring add op
Getting types
Getting opcodes
Getting typecodes
Performing asserts
Invoking boolean rename
Invoking boolean rename
Invoking enumify binop
e 14
Invoking enumify monoid
Calling enumify binop
Inside plus binop code
e 11
Calling enumify identity
Calling enumify terminal
Done enumify monoid
Done invoking enumify monoid
atype
btype
ctype
Invoking enumify_mask, mtype 0x7f2028b57180
GB_enumify_mask gets mcode: 1 Mask_struct: 0 Mask_comp: 0
got mask_ecode: 4
constructing semiring scode
before: add_ecode: 11, id_ecode: 0, term_ecode: 31, mult_ecode: 14, flipxy: 0, zcode: 6, xcode: 6, ycode: 6, mask_ecode: 4, ccode: 6, acode: 6, bcode: 6, csparsity: 0, msparsity: 0, asparsity: 0, bsparsity: 0
serialized_scode: 397409434374399488
done enumify semiring
scode=397409434374399488
done stringify semiring
 returned from  stringify semiring
 rmm_wrap_alloc 256 bytes
 rmm_wrap_alloc 8192 bytes
1024 slots to fill
all pairs to bucket 6, no filling
done assigning buckets
bucket 6 has 1024 dots to do
LAUNCHING BUCKET CODE: 6
INside get cached file
looking for prog in file /home/cjnolet/.SuiteSparse/GraphBLAS/6.3.0/GB_semiring_397409434374399488.h
opening /home/cjnolet/.SuiteSparse/GraphBLAS/6.3.0/GB_semiring_397409434374399488.h for write
about to close
 read cache file /home/cjnolet/.SuiteSparse/GraphBLAS/6.3.0/GB_semiring_397409434374399488.h
successful_read: 1
Just closed
 jit_cache get program GB_jit_AxB_dot3_phase3_vssp
found memory-cached prog GB_jit_AxB_dot3_phase3_vssp
 got kernel instance AxB_dot3_phase3_vssp_int32_t_int32_t_int32_t
found memory-cached prog AxB_dot3_phase3_vssp_int32_t_int32_t_int32_t
Launching _Z20AxB_dot3_phase3_vsspIiiiEvxxPxP16GB_Matrix_opaqueS2_S2_S2_i<<<32,32,0,0>>>(long,long,long*,GB_Matrix_opaque*,GB_Matrix_opaque*,GB_Matrix_opaque*,GB_Matrix_opaque*,int)
Printing bucketp
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
Done.
returned from kernel 0.908288ms

  1024x1024 GraphBLAS int32_t matrix, sparse by row
  sparsity control: sparse only
  C GPU, 1024 entries, memory: 28.2 KB
  pending tuples: 0 max pending: 0 zombies: 1001

    (0,478) zombie
    (0,574) zombie
    (2,376) zombie
    (5,560) zombie
    (6,996) zombie
    (7,183) zombie
    (7,666) zombie
    (8,896) zombie
    (9,187) zombie
    (10,446) zombie
    (11,46) zombie
    (11,955) zombie
    (12,397) zombie
    (12,953) zombie
    (13,192) zombie
    (14,421) zombie
    (15,568) zombie
    (16,788) zombie
    (16,904) zombie
    (17,928) zombie
    (18,103) zombie
    (19,821) zombie
    (19,886) zombie
    (20,474) zombie
    (21,479) zombie
    (21,975) zombie
    (22,569) zombie
    (23,310) zombie
    (24,905) zombie
    ...
 rmm_wrap_alloc 256 bytes
Not using cuda path. M_is_hypersparse: 0, A->iso: 0, B->iso: 0, A_BITMAP: 0, B_BITMAP: 0, GB_IS_FULL(A): 0, GB_IS_FULL(B): 0, semiring header size: 32
 rmm_wrap_alloc 16384 bytes

  1024x1024 GraphBLAS bool matrix, sparse by row
  sparsity control: sparse only
  M actual, 1024 entries, memory: 25.2 KB

    (0,478)   1
    (0,574)   1
    (2,376)   1
    (5,560)   1
    (6,996)   1
    (7,183)   1
    (7,666)   1
    (8,896)   1
    (9,187)   1
    (10,446)   1
    (11,46)   1
    (11,955)   1
    (12,397)   1
    (12,953)   1
    (13,192)   1
    (14,421)   1
    (15,568)   1
    (16,788)   1
    (16,904)   1
    (17,928)   1
    (18,103)   1
    (19,821)   1
    (19,886)   1
    (20,474)   1
    (21,479)   1
    (21,975)   1
    (22,569)   1
    (23,310)   1
    (24,905)   1
    ...
 rmm_wrap_alloc 16384 bytes
 rmm_wrap_alloc 256 bytes
 rmm_wrap_alloc 256 bytes

  1024x1024 GraphBLAS int32_t matrix, sparse by row
  sparsity control: sparse only
  C GPU, 23 entries, memory: 16.6 KB

    (42,324)   0
    (73,665)   1
    (106,652)   0
    (138,288)   1
    (242,124)   1
    (295,1)   0
    (300,554)   1
    (312,61)   0
    (344,384)   0
    (496,267)   0
    (587,254)   1
    (686,202)   0
    (708,925)   1
    (715,751)   0
    (729,884)   0
    (741,365)   1
    (751,348)   1
    (792,636)   0
    (857,151)   0
    (876,357)   0
    (940,414)   0
    (945,671)   0
    (968,400)   1


  1024x1024 GraphBLAS int32_t matrix, hypersparse by row
  C_actual, 23 entries, memory: 1.1 KB

    (42,324)   0
    (73,665)   1
    (106,652)   0
    (138,288)   1
    (242,124)   1
    (295,1)   0
    (300,554)   1
    (312,61)   0
    (344,384)   0
    (496,267)   0
    (587,254)   1
    (686,202)   0
    (708,925)   1
    (715,751)   0
    (729,884)   0
    (741,365)   1
    (751,348)   1
    (792,636)   0
    (857,151)   0
    (876,357)   0
    (940,414)   0
    (945,671)   0
    (968,400)   1

 rmm_wrap_alloc 256 bytes
 rmm_wrap_alloc 256 bytes
 rmm_wrap_alloc 256 bytes
 rmm_wrap_alloc 256 bytes
 rmm_wrap_alloc 256 bytes
 rmm_wrap_alloc 256 bytes
 rmm_wrap_alloc 256 bytes
 rmm_wrap_alloc 256 bytes
 rmm_wrap_alloc 256 bytes
 rmm_wrap_alloc 256 bytes

  1024x1024 GraphBLAS double matrix, hypersparse by row
  Diff actual, 23 entries, memory: 1.2 KB

    (42,324)    0
    (73,665)    0
    (106,652)    0
    (138,288)    0
    (242,124)    0
    (295,1)    0
    (300,554)    0
    (312,61)    0
    (344,384)    0
    (496,267)    0
    (587,254)    0
    (686,202)    0
    (708,925)    0
    (715,751)    0
    (729,884)    0
    (741,365)    0
    (751,348)    0
    (792,636)    0
    (857,151)    0
    (876,357)    0
    (940,414)    0
    (945,671)    0
    (968,400)    0


  1024x1024 GraphBLAS bool matrix, hypersparse by row
  T actual, 23 entries, memory: 1.0 KB

    (42,324)   1
    (73,665)   1
    (106,652)   1
    (138,288)   1
    (242,124)   1
    (295,1)   1
    (300,554)   1
    (312,61)   1
    (344,384)   1
    (496,267)   1
    (587,254)   1
    (686,202)   1
    (708,925)   1
    (715,751)   1
    (729,884)   1
    (741,365)   1
    (751,348)   1
    (792,636)   1
    (857,151)   1
    (876,357)   1
    (940,414)   1
    (945,671)   1
    (968,400)   1
 work:23 gpus:0 Getting test data
Creating problem gen
filling matrices
inside fill, using seed 4567
fill_random nrows=1024ncols=1024 need 1024 values, invsparse = 1024
fill_random after alloc values
vdim ready 
vlen ready 
ready to fill p
filling sparse
1024 nonzeroes left to fill..
35 nonzeroes left to fill..
inside fill, using seed 4567
fill_random nrows=1024ncols=1024 need 1024 values, invsparse = 1024
fill_random after alloc values
vdim ready 
vlen ready 
ready to fill p
filling sparse
1024 nonzeroes left to fill..
35 nonzeroes left to fill..
inside fill, using seed 543210
fill_random nrows=1024ncols=1024 need 2048 values, invsparse = 512
fill_random after alloc values
vdim ready 
vlen ready 
ready to fill p
filling sparse
2048 nonzeroes left to fill..
504 nonzeroes left to fill..
 rmm_wrap_alloc 256 bytes
 rmm_wrap_alloc 16384 bytes
inside fill, using seed 32
fill_random nrows=1024ncols=1024 need 4096 values, invsparse = 256
fill_random after alloc values
vdim ready 
vlen ready 
ready to fill p
filling sparse
4096 nonzeroes left to fill..
1491 nonzeroes left to fill..
 rmm_wrap_alloc 16384 bytes
 rmm_wrap_alloc 32768 bytes
1024 slots to fill
all pairs to bucket 7, no filling
done assigning buckets
Building semiring factgory
 calling stringify semiring: 0x7f1ff5382700
inside enumify: 0x7f1ff5382700

    GraphBLAS Semiring: semiring (user-defined)
    GraphBLAS Monoid: semiring->add (built-in)
    GraphBLAS BinaryOp: monoid->op (built-in) z=plus(x,y)
    GraphBLAS type: ztype int32_t size: 4
    GraphBLAS type: xtype int32_t size: 4
    GraphBLAS type: ytype int32_t size: 4
    identity: [   0 ] 

    GraphBLAS BinaryOp: semiring->multiply (built-in) z=times(x,y)
    GraphBLAS type: ztype int32_t size: 4
    GraphBLAS type: xtype int32_t size: 4
    GraphBLAS type: ytype int32_t size: 4
Getting semiring add
Getting semiring mult
Getting semiring add op
Getting types
Getting opcodes
Getting typecodes
Performing asserts
Invoking boolean rename
Invoking boolean rename
Invoking enumify binop
e 14
Invoking enumify monoid
Calling enumify binop
Inside plus binop code
e 11
Calling enumify identity
Calling enumify terminal
Done enumify monoid
Done invoking enumify monoid
atype
btype
ctype
Invoking enumify_mask, mtype 0x7f2028b57180
GB_enumify_mask gets mcode: 1 Mask_struct: 0 Mask_comp: 0
got mask_ecode: 4
constructing semiring scode
before: add_ecode: 11, id_ecode: 0, term_ecode: 31, mult_ecode: 14, flipxy: 0, zcode: 6, xcode: 6, ycode: 6, mask_ecode: 4, ccode: 6, acode: 6, bcode: 6, csparsity: 0, msparsity: 0, asparsity: 0, bsparsity: 0
serialized_scode: 397409434374399488
done enumify semiring
scode=397409434374399488
done stringify semiring
 returned from  stringify semiring
 rmm_wrap_alloc 256 bytes
 rmm_wrap_alloc 8192 bytes
1024 slots to fill
all pairs to bucket 7, no filling
done assigning buckets
bucket 7 has 1024 dots to do
LAUNCHING BUCKET CODE: 7
INside get cached file
looking for prog in file /home/cjnolet/.SuiteSparse/GraphBLAS/6.3.0/GB_semiring_397409434374399488.h
opening /home/cjnolet/.SuiteSparse/GraphBLAS/6.3.0/GB_semiring_397409434374399488.h for write
about to close
 read cache file /home/cjnolet/.SuiteSparse/GraphBLAS/6.3.0/GB_semiring_397409434374399488.h
successful_read: 1
Just closed
 jit_cache get program GB_jit_AxB_dot3_phase3_vsvs
found memory-cached prog GB_jit_AxB_dot3_phase3_vsvs
 got kernel instance AxB_dot3_phase3_vsvs_int32_t_int32_t_int32_t
found memory-cached prog AxB_dot3_phase3_vsvs_int32_t_int32_t_int32_t
Launching _Z20AxB_dot3_phase3_vsvsIiiiEvxxPxP16GB_Matrix_opaqueS2_S2_S2_i<<<2,512,0,0>>>(long,long,long*,GB_Matrix_opaque*,GB_Matrix_opaque*,GB_Matrix_opaque*,GB_Matrix_opaque*,int)
Printing bucketp
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
Done.
returned from kernel 0.616448ms

  1024x1024 GraphBLAS int32_t matrix, sparse (jumbled) by row
  sparsity control: sparse only
  C GPU, 1024 entries, memory: 28.2 KB
  pending tuples: 0 max pending: 0 zombies: 1010

    (0,478) zombie
    (0,574) zombie
    (2,376) zombie
    (5,560) zombie
    (6,996) zombie
    (7,183) zombie
    (7,666) zombie
    (8,896) zombie
    (9,187) zombie
    (10,446) zombie
    (11,46) zombie
    (11,955) zombie
    (12,397) zombie
    (12,953) zombie
    (13,192) zombie
    (14,421) zombie
    (15,568) zombie
    (16,788) zombie
    (16,904) zombie
    (17,928) zombie
    (18,103) zombie
    (19,821) zombie
    (19,886) zombie
    (20,474) zombie
    (21,479) zombie
    (21,975) zombie
    (22,569) zombie
    (23,310) zombie
    (24,905) zombie
    ...
Not using cuda path. M_is_hypersparse: 0, A->iso: 0, B->iso: 0, A_BITMAP: 0, B_BITMAP: 0, GB_IS_FULL(A): 0, GB_IS_FULL(B): 0, semiring header size: 32
 rmm_wrap_alloc 16384 bytes
 rmm_wrap_alloc 16384 bytes

  1024x1024 GraphBLAS bool matrix, sparse by row
  sparsity control: sparse only
  M actual, 1024 entries, memory: 25.2 KB

    (0,478)   1
    (0,574)   1
    (2,376)   1
    (5,560)   1
    (6,996)   1
    (7,183)   1
    (7,666)   1
    (8,896)   1
    (9,187)   1
    (10,446)   1
    (11,46)   1
    (11,955)   1
    (12,397)   1
    (12,953)   1
    (13,192)   1
    (14,421)   1
    (15,568)   1
    (16,788)   1
    (16,904)   1
    (17,928)   1
    (18,103)   1
    (19,821)   1
    (19,886)   1
    (20,474)   1
    (21,479)   1
    (21,975)   1
    (22,569)   1
    (23,310)   1
    (24,905)   1
    ...
 rmm_wrap_alloc 16384 bytes
 rmm_wrap_alloc 256 bytes
 rmm_wrap_alloc 256 bytes
 rmm_wrap_alloc 256 bytes

  1024x1024 GraphBLAS int32_t matrix, sparse by row
  sparsity control: sparse only
  C GPU, 14 entries, memory: 16.4 KB

    (99,326)   0
    (115,240)   0
    (176,614)   0
    (180,830)   1
    (343,678)   0
    (398,246)   0
    (411,643)   0
    (557,910)   0
    (590,95)   0
    (601,478)   0
    (623,44)   0
    (729,884)   0
    (825,406)   1
    (891,679)   0


  1024x1024 GraphBLAS int32_t matrix, hypersparse by row
  C_actual, 14 entries, memory: 704 bytes

    (99,326)   0
    (115,240)   0
    (176,614)   0
    (180,830)   1
    (343,678)   0
    (398,246)   0
    (411,643)   0
    (557,910)   0
    (590,95)   0
    (601,478)   0
    (623,44)   0
    (729,884)   0
    (825,406)   1
    (891,679)   0

 rmm_wrap_alloc 256 bytes
 rmm_wrap_alloc 256 bytes
 rmm_wrap_alloc 256 bytes
 rmm_wrap_alloc 256 bytes
 rmm_wrap_alloc 256 bytes
 rmm_wrap_alloc 256 bytes

  1024x1024 GraphBLAS double matrix, hypersparse by row
  Diff actual, 14 entries, memory: 768 bytes

    (99,326)    0
    (115,240)    0
    (176,614)    0
    (180,830)    0
    (343,678)    0
    (398,246)    0
    (411,643)    0
    (557,910)    0
    (590,95)    0
    (601,478)    0
    (623,44)    0
    (729,884)    0
    (825,406)    0
    (891,679)    0


  1024x1024 GraphBLAS bool matrix, hypersparse by row
  T actual, 14 entries, memory: 656 bytes

    (99,326)   1
    (115,240)   1
    (176,614)   1
    (180,830)   1
    (343,678)   1
    (398,246)   1
    (411,643)   1
    (557,910)   1
    (590,95)   1
    (601,478)   1
    (623,44)   1
    (729,884)   1
    (825,406)   1
    (891,679)   1
 work:14 gpus:0 Getting test data
Creating problem gen
filling matrices
inside fill, using seed 4567
fill_random nrows=1024ncols=1024 need 1024 values, invsparse = 1024
fill_random after alloc values
vdim ready 
vlen ready 
ready to fill p
filling sparse
1024 nonzeroes left to fill..
35 nonzeroes left to fill..
inside fill, using seed 4567
fill_random nrows=1024ncols=1024 need 1024 values, invsparse = 1024
fill_random after alloc values
vdim ready 
vlen ready 
ready to fill p
filling sparse
1024 nonzeroes left to fill..
35 nonzeroes left to fill..
inside fill, using seed 543210
fill_random nrows=1024ncols=1024 need 2048 values, invsparse = 512
fill_random after alloc values
vdim ready 
vlen ready 
ready to fill p
filling sparse
2048 nonzeroes left to fill..
504 nonzeroes left to fill..
 rmm_wrap_alloc 256 bytes
inside fill, using seed 32
fill_random nrows=1024ncols=1024 need 4096 values, invsparse = 256
fill_random after alloc values
vdim ready 
vlen ready 
ready to fill p
filling sparse
4096 nonzeroes left to fill..
1491 nonzeroes left to fill..
 rmm_wrap_alloc 16384 bytes
1024 slots to fill
all pairs to bucket 8, no filling
done assigning buckets
Building semiring factgory
 calling stringify semiring: 0x7f1ff5382800
inside enumify: 0x7f1ff5382800

    GraphBLAS Semiring: semiring (user-defined)
    GraphBLAS Monoid: semiring->add (built-in)
    GraphBLAS BinaryOp: monoid->op (built-in) z=plus(x,y)
    GraphBLAS type: ztype int32_t size: 4
    GraphBLAS type: xtype int32_t size: 4
    GraphBLAS type: ytype int32_t size: 4
    identity: [   0 ] 

    GraphBLAS BinaryOp: semiring->multiply (built-in) z=times(x,y)
    GraphBLAS type: ztype int32_t size: 4
    GraphBLAS type: xtype int32_t size: 4
    GraphBLAS type: ytype int32_t size: 4
Getting semiring add
Getting semiring mult
Getting semiring add op
Getting types
Getting opcodes
Getting typecodes
Performing asserts
Invoking boolean rename
Invoking boolean rename
Invoking enumify binop
e 14
Invoking enumify monoid
Calling enumify binop
Inside plus binop code
e 11
Calling enumify identity
Calling enumify terminal
Done enumify monoid
Done invoking enumify monoid
atype
btype
ctype
Invoking enumify_mask, mtype 0x7f2028b57180
GB_enumify_mask gets mcode: 1 Mask_struct: 0 Mask_comp: 0
got mask_ecode: 4
constructing semiring scode
before: add_ecode: 11, id_ecode: 0, term_ecode: 31, mult_ecode: 14, flipxy: 0, zcode: 6, xcode: 6, ycode: 6, mask_ecode: 4, ccode: 6, acode: 6, bcode: 6, csparsity: 0, msparsity: 0, asparsity: 0, bsparsity: 0
serialized_scode: 397409434374399488
done enumify semiring
scode=397409434374399488
done stringify semiring
 returned from  stringify semiring
 rmm_wrap_alloc 256 bytes
 rmm_wrap_alloc 8192 bytes
1024 slots to fill
all pairs to bucket 8, no filling
done assigning buckets
bucket 8 has 1024 dots to do
LAUNCHING BUCKET CODE: 8
INside get cached file
looking for prog in file /home/cjnolet/.SuiteSparse/GraphBLAS/6.3.0/GB_semiring_397409434374399488.h
opening /home/cjnolet/.SuiteSparse/GraphBLAS/6.3.0/GB_semiring_397409434374399488.h for write
about to close
 read cache file /home/cjnolet/.SuiteSparse/GraphBLAS/6.3.0/GB_semiring_397409434374399488.h
successful_read: 1
Just closed
 jit_cache get program GB_jit_AxB_dot3_phase3_vsvs
found memory-cached prog GB_jit_AxB_dot3_phase3_vsvs
 got kernel instance AxB_dot3_phase3_vsvs_int32_t_int32_t_int32_t
found memory-cached prog AxB_dot3_phase3_vsvs_int32_t_int32_t_int32_t
Launching _Z20AxB_dot3_phase3_vsvsIiiiEvxxPxP16GB_Matrix_opaqueS2_S2_S2_i<<<2,512,0,0>>>(long,long,long*,GB_Matrix_opaque*,GB_Matrix_opaque*,GB_Matrix_opaque*,GB_Matrix_opaque*,int)
Printing bucketp
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
Done.
returned from kernel 0.801792ms

  1024x1024 GraphBLAS int32_t matrix, sparse (jumbled) by row
  sparsity control: sparse only
  C GPU, 1024 entries, memory: 28.2 KB
  pending tuples: 0 max pending: 0 zombies: 1010

    (0,478) zombie
    (0,574) zombie
    (2,376) zombie
    (5,560) zombie
    (6,996) zombie
    (7,183) zombie
    (7,666) zombie
    (8,896) zombie
    (9,187) zombie
    (10,446) zombie
    (11,46) zombie
    (11,955) zombie
    (12,397) zombie
    (12,953) zombie
    (13,192) zombie
    (14,421) zombie
    (15,568) zombie
    (16,788) zombie
    (16,904) zombie
    (17,928) zombie
    (18,103) zombie
    (19,821) zombie
    (19,886) zombie
    (20,474) zombie
    (21,479) zombie
    (21,975) zombie
    (22,569) zombie
    (23,310) zombie
    (24,905) zombie
    ...
 rmm_wrap_alloc 256 bytes
Not using cuda path. M_is_hypersparse: 0, A->iso: 0, B->iso: 0, A_BITMAP: 0, B_BITMAP: 0, GB_IS_FULL(A): 0, GB_IS_FULL(B): 0, semiring header size: 32
 rmm_wrap_alloc 16384 bytes
 rmm_wrap_alloc 16384 bytes

  1024x1024 GraphBLAS bool matrix, sparse by row
  sparsity control: sparse only
  M actual, 1024 entries, memory: 25.2 KB

    (0,478)   1
    (0,574)   1
    (2,376)   1
    (5,560)   1
    (6,996)   1
    (7,183)   1
    (7,666)   1
    (8,896)   1
    (9,187)   1
    (10,446)   1
    (11,46)   1
    (11,955)   1
    (12,397)   1
    (12,953)   1
    (13,192)   1
    (14,421)   1
    (15,568)   1
    (16,788)   1
    (16,904)   1
    (17,928)   1
    (18,103)   1
    (19,821)   1
    (19,886)   1
    (20,474)   1
    (21,479)   1
    (21,975)   1
    (22,569)   1
    (23,310)   1
    (24,905)   1
    ...
 rmm_wrap_alloc 16384 bytes

  1024x1024 GraphBLAS int32_t matrix, sparse by row
  sparsity control: sparse only
  C GPU, 14 entries, memory: 16.4 KB

    (99,326)   0
    (115,240)   0
    (176,614)   0
    (180,830)   1
    (343,678)   0
    (398,246)   0
    (411,643)   0
    (557,910)   0
    (590,95)   0
    (601,478)   0
    (623,44)   0
    (729,884)   0
    (825,406)   1
    (891,679)   0


  1024x1024 GraphBLAS int32_t matrix, hypersparse by row
  C_actual, 14 entries, memory: 704 bytes

    (99,326)   0
    (115,240)   0
    (176,614)   0
    (180,830)   1
    (343,678)   0
    (398,246)   0
    (411,643)   0
    (557,910)   0
    (590,95)   0
    (601,478)   0
    (623,44)   0
    (729,884)   0
    (825,406)   1
    (891,679)   0

 rmm_wrap_alloc 256 bytes
 rmm_wrap_alloc 256 bytes
 rmm_wrap_alloc 256 bytes
 rmm_wrap_alloc 256 bytes
 rmm_wrap_alloc 256 bytes

  1024x1024 GraphBLAS double matrix, hypersparse by row
  Diff actual, 14 entries, memory: 768 bytes

    (99,326)    0
    (115,240)    0
    (176,614)    0
    (180,830)    0
    (343,678)    0
    (398,246)    0
    (411,643)    0
    (557,910)    0
    (590,95)    0
    (601,478)    0
    (623,44)    0
    (729,884)    0
    (825,406)    0
    (891,679)    0


  1024x1024 GraphBLAS bool matrix, hypersparse by row
  T actual, 14 entries, memory: 656 bytes

    (99,326)   1
    (115,240)   1
    (176,614)   1
    (180,830)   1
    (343,678)   1
    (398,246)   1
    (411,643)   1
    (557,910)   1
    (590,95)   1
    (601,478)   1
    (623,44)   1
    (729,884)   1
    (825,406)   1
    (891,679)   1
 work:14 gpus:0 Getting test data
Creating problem gen
filling matrices
inside fill, using seed 4567
fill_random nrows=1024ncols=1024 need 1024 values, invsparse = 1024
fill_random after alloc values
vdim ready 
vlen ready 
ready to fill p
filling sparse
1024 nonzeroes left to fill..
35 nonzeroes left to fill..
inside fill, using seed 4567
fill_random nrows=1024ncols=1024 need 1024 values, invsparse = 1024
fill_random after alloc values
vdim ready 
vlen ready 
ready to fill p
filling sparse
1024 nonzeroes left to fill..
35 nonzeroes left to fill..
inside fill, using seed 543210
fill_random nrows=1024ncols=1024 need 2048 values, invsparse = 512
fill_random after alloc values
vdim ready 
vlen ready 
ready to fill p
filling sparse
2048 nonzeroes left to fill..
504 nonzeroes left to fill..
 rmm_wrap_alloc 256 bytes
 rmm_wrap_alloc 256 bytes
inside fill, using seed 32
fill_random nrows=1024ncols=1024 need 4096 values, invsparse = 256
fill_random after alloc values
vdim ready 
vlen ready 
ready to fill p
filling sparse
4096 nonzeroes left to fill..
1491 nonzeroes left to fill..
 rmm_wrap_alloc 16384 bytes
 rmm_wrap_alloc 256 bytes
1024 slots to fill
all pairs to bucket 9, no filling
done assigning buckets
Building semiring factgory
 calling stringify semiring: 0x7f1ff5383200
inside enumify: 0x7f1ff5383200

    GraphBLAS Semiring: semiring (user-defined)
    GraphBLAS Monoid: semiring->add (built-in)
    GraphBLAS BinaryOp: monoid->op (built-in) z=plus(x,y)
    GraphBLAS type: ztype int32_t size: 4
    GraphBLAS type: xtype int32_t size: 4
    GraphBLAS type: ytype int32_t size: 4
    identity: [   0 ] 

    GraphBLAS BinaryOp: semiring->multiply (built-in) z=times(x,y)
    GraphBLAS type: ztype int32_t size: 4
    GraphBLAS type: xtype int32_t size: 4
    GraphBLAS type: ytype int32_t size: 4
Getting semiring add
Getting semiring mult
Getting semiring add op
Getting types
Getting opcodes
Getting typecodes
Performing asserts
Invoking boolean rename
Invoking boolean rename
Invoking enumify binop
e 14
Invoking enumify monoid
Calling enumify binop
Inside plus binop code
e 11
Calling enumify identity
Calling enumify terminal
Done enumify monoid
Done invoking enumify monoid
atype
btype
ctype
Invoking enumify_mask, mtype 0x7f2028b57180
GB_enumify_mask gets mcode: 1 Mask_struct: 0 Mask_comp: 0
got mask_ecode: 4
constructing semiring scode
before: add_ecode: 11, id_ecode: 0, term_ecode: 31, mult_ecode: 14, flipxy: 0, zcode: 6, xcode: 6, ycode: 6, mask_ecode: 4, ccode: 6, acode: 6, bcode: 6, csparsity: 0, msparsity: 0, asparsity: 0, bsparsity: 0
serialized_scode: 397409434374399488
done enumify semiring
scode=397409434374399488
done stringify semiring
 returned from  stringify semiring
 rmm_wrap_alloc 256 bytes
 rmm_wrap_alloc 8192 bytes
1024 slots to fill
all pairs to bucket 9, no filling
done assigning buckets
bucket 9 has 1024 dots to do
LAUNCHING BUCKET CODE: 9
INside get cached file
looking for prog in file /home/cjnolet/.SuiteSparse/GraphBLAS/6.3.0/GB_semiring_397409434374399488.h
opening /home/cjnolet/.SuiteSparse/GraphBLAS/6.3.0/GB_semiring_397409434374399488.h for write
about to close
 read cache file /home/cjnolet/.SuiteSparse/GraphBLAS/6.3.0/GB_semiring_397409434374399488.h
successful_read: 1
Just closed
 jit_cache get program GB_jit_AxB_dot3_phase3_vsvs
found memory-cached prog GB_jit_AxB_dot3_phase3_vsvs
 got kernel instance AxB_dot3_phase3_vsvs_int32_t_int32_t_int32_t
found memory-cached prog AxB_dot3_phase3_vsvs_int32_t_int32_t_int32_t
Launching _Z20AxB_dot3_phase3_vsvsIiiiEvxxPxP16GB_Matrix_opaqueS2_S2_S2_i<<<2,512,0,0>>>(long,long,long*,GB_Matrix_opaque*,GB_Matrix_opaque*,GB_Matrix_opaque*,GB_Matrix_opaque*,int)
Printing bucketp
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
Done.
returned from kernel 0.820224ms

  1024x1024 GraphBLAS int32_t matrix, sparse (jumbled) by row
  sparsity control: sparse only
  C GPU, 1024 entries, memory: 28.2 KB
  pending tuples: 0 max pending: 0 zombies: 1010

    (0,478) zombie
    (0,574) zombie
    (2,376) zombie
    (5,560) zombie
    (6,996) zombie
    (7,183) zombie
    (7,666) zombie
    (8,896) zombie
    (9,187) zombie
    (10,446) zombie
    (11,46) zombie
    (11,955) zombie
    (12,397) zombie
    (12,953) zombie
    (13,192) zombie
    (14,421) zombie
    (15,568) zombie
    (16,788) zombie
    (16,904) zombie
    (17,928) zombie
    (18,103) zombie
    (19,821) zombie
    (19,886) zombie
    (20,474) zombie
    (21,479) zombie
    (21,975) zombie
    (22,569) zombie
    (23,310) zombie
    (24,905) zombie
    ...
 rmm_wrap_alloc 256 bytes
Not using cuda path. M_is_hypersparse: 0, A->iso: 0, B->iso: 0, A_BITMAP: 0, B_BITMAP: 0, GB_IS_FULL(A): 0, GB_IS_FULL(B): 0, semiring header size: 32
 rmm_wrap_alloc 16384 bytes
 rmm_wrap_alloc 16384 bytes

  1024x1024 GraphBLAS bool matrix, sparse by row
  sparsity control: sparse only
  M actual, 1024 entries, memory: 25.2 KB

    (0,478)   1
    (0,574)   1
    (2,376)   1
    (5,560)   1
    (6,996)   1
    (7,183)   1
    (7,666)   1
    (8,896)   1
    (9,187)   1
    (10,446)   1
    (11,46)   1
    (11,955)   1
    (12,397)   1
    (12,953)   1
    (13,192)   1
    (14,421)   1
    (15,568)   1
    (16,788)   1
    (16,904)   1
    (17,928)   1
    (18,103)   1
    (19,821)   1
    (19,886)   1
    (20,474)   1
    (21,479)   1
    (21,975)   1
    (22,569)   1
    (23,310)   1
    (24,905)   1
    ...
 rmm_wrap_alloc 16384 bytes

  1024x1024 GraphBLAS int32_t matrix, sparse by row
  sparsity control: sparse only
  C GPU, 14 entries, memory: 16.4 KB

    (99,326)   0
    (115,240)   0
    (176,614)   0
    (180,830)   1
    (343,678)   0
    (398,246)   0
    (411,643)   0
    (557,910)   0
    (590,95)   0
    (601,478)   0
    (623,44)   0
    (729,884)   0
    (825,406)   1
    (891,679)   0


  1024x1024 GraphBLAS int32_t matrix, hypersparse by row
  C_actual, 14 entries, memory: 704 bytes

    (99,326)   0
    (115,240)   0
    (176,614)   0
    (180,830)   1
    (343,678)   0
    (398,246)   0
    (411,643)   0
    (557,910)   0
    (590,95)   0
    (601,478)   0
    (623,44)   0
    (729,884)   0
    (825,406)   1
    (891,679)   0

 rmm_wrap_alloc 256 bytes
 rmm_wrap_alloc 256 bytes
 rmm_wrap_alloc 256 bytes
 rmm_wrap_alloc 256 bytes
 rmm_wrap_alloc 256 bytes

  1024x1024 GraphBLAS double matrix, hypersparse by row
  Diff actual, 14 entries, memory: 768 bytes

    (99,326)    0
    (115,240)    0
    (176,614)    0
    (180,830)    0
    (343,678)    0
    (398,246)    0
    (411,643)    0
    (557,910)    0
    (590,95)    0
    (601,478)    0
    (623,44)    0
    (729,884)    0
    (825,406)    0
    (891,679)    0


  1024x1024 GraphBLAS bool matrix, hypersparse by row
  T actual, 14 entries, memory: 656 bytes

    (99,326)   1
    (115,240)   1
    (176,614)   1
    (180,830)   1
    (343,678)   1
    (398,246)   1
    (411,643)   1
    (557,910)   1
    (590,95)   1
    (601,478)   1
    (623,44)   1
    (729,884)   1
    (825,406)   1
    (891,679)   1
 work:14 gpus:0 Getting test data
Creating problem gen
filling matrices
inside fill, using seed 4567
fill_random nrows=1024ncols=1024 need 1024 values, invsparse = 1024
fill_random after alloc values
vdim ready 
vlen ready 
ready to fill p
filling sparse
1024 nonzeroes left to fill..
35 nonzeroes left to fill..
inside fill, using seed 4567
fill_random nrows=1024ncols=1024 need 1024 values, invsparse = 1024
fill_random after alloc values
vdim ready 
vlen ready 
ready to fill p
filling sparse
1024 nonzeroes left to fill..
35 nonzeroes left to fill..
inside fill, using seed 543210
fill_random nrows=1024ncols=1024 need 2048 values, invsparse = 512
fill_random after alloc values
vdim ready 
vlen ready 
ready to fill p
filling sparse
2048 nonzeroes left to fill..
504 nonzeroes left to fill..
 rmm_wrap_alloc 256 bytes
 rmm_wrap_alloc 256 bytes
inside fill, using seed 32
fill_random nrows=1024ncols=1024 need 4096 values, invsparse = 256
fill_random after alloc values
vdim ready 
vlen ready 
ready to fill p
filling sparse
4096 nonzeroes left to fill..
1491 nonzeroes left to fill..
 rmm_wrap_alloc 16384 bytes
 rmm_wrap_alloc 256 bytes
1024 slots to fill
all pairs to bucket 10, no filling
done assigning buckets
Building semiring factgory
 calling stringify semiring: 0x7f1ff5383b00
inside enumify: 0x7f1ff5383b00

    GraphBLAS Semiring: semiring (user-defined)
    GraphBLAS Monoid: semiring->add (built-in)
    GraphBLAS BinaryOp: monoid->op (built-in) z=plus(x,y)
    GraphBLAS type: ztype int32_t size: 4
    GraphBLAS type: xtype int32_t size: 4
    GraphBLAS type: ytype int32_t size: 4
    identity: [   0 ] 

    GraphBLAS BinaryOp: semiring->multiply (built-in) z=times(x,y)
    GraphBLAS type: ztype int32_t size: 4
    GraphBLAS type: xtype int32_t size: 4
    GraphBLAS type: ytype int32_t size: 4
Getting semiring add
Getting semiring mult
Getting semiring add op
Getting types
Getting opcodes
Getting typecodes
Performing asserts
Invoking boolean rename
Invoking boolean rename
Invoking enumify binop
e 14
Invoking enumify monoid
Calling enumify binop
Inside plus binop code
e 11
Calling enumify identity
Calling enumify terminal
Done enumify monoid
Done invoking enumify monoid
atype
btype
ctype
Invoking enumify_mask, mtype 0x7f2028b57180
GB_enumify_mask gets mcode: 1 Mask_struct: 0 Mask_comp: 0
got mask_ecode: 4
constructing semiring scode
before: add_ecode: 11, id_ecode: 0, term_ecode: 31, mult_ecode: 14, flipxy: 0, zcode: 6, xcode: 6, ycode: 6, mask_ecode: 4, ccode: 6, acode: 6, bcode: 6, csparsity: 0, msparsity: 0, asparsity: 0, bsparsity: 0
serialized_scode: 397409434374399488
done enumify semiring
scode=397409434374399488
done stringify semiring
 returned from  stringify semiring
 rmm_wrap_alloc 256 bytes
 rmm_wrap_alloc 8192 bytes
1024 slots to fill
all pairs to bucket 10, no filling
done assigning buckets
bucket 10 has 1024 dots to do
LAUNCHING BUCKET CODE: 10
INside get cached file
looking for prog in file /home/cjnolet/.SuiteSparse/GraphBLAS/6.3.0/GB_semiring_397409434374399488.h
opening /home/cjnolet/.SuiteSparse/GraphBLAS/6.3.0/GB_semiring_397409434374399488.h for write
about to close
 read cache file /home/cjnolet/.SuiteSparse/GraphBLAS/6.3.0/GB_semiring_397409434374399488.h
successful_read: 1
Just closed
 jit_cache get program GB_jit_AxB_dot3_phase3_vsvs
found memory-cached prog GB_jit_AxB_dot3_phase3_vsvs
 got kernel instance AxB_dot3_phase3_vsvs_int32_t_int32_t_int32_t
found memory-cached prog AxB_dot3_phase3_vsvs_int32_t_int32_t_int32_t
Launching _Z20AxB_dot3_phase3_vsvsIiiiEvxxPxP16GB_Matrix_opaqueS2_S2_S2_i<<<2,512,0,0>>>(long,long,long*,GB_Matrix_opaque*,GB_Matrix_opaque*,GB_Matrix_opaque*,GB_Matrix_opaque*,int)
Printing bucketp
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
Done.
returned from kernel 1.00762ms

  1024x1024 GraphBLAS int32_t matrix, sparse (jumbled) by row
  sparsity control: sparse only
  C GPU, 1024 entries, memory: 28.2 KB
  pending tuples: 0 max pending: 0 zombies: 1010

    (0,478) zombie
    (0,574) zombie
    (2,376) zombie
    (5,560) zombie
    (6,996) zombie
    (7,183) zombie
    (7,666) zombie
    (8,896) zombie
    (9,187) zombie
    (10,446) zombie
    (11,46) zombie
    (11,955) zombie
    (12,397) zombie
    (12,953) zombie
    (13,192) zombie
    (14,421) zombie
    (15,568) zombie
    (16,788) zombie
    (16,904) zombie
    (17,928) zombie
    (18,103) zombie
    (19,821) zombie
    (19,886) zombie
    (20,474) zombie
    (21,479) zombie
    (21,975) zombie
    (22,569) zombie
    (23,310) zombie
    (24,905) zombie
    ...
 rmm_wrap_alloc 256 bytes
Not using cuda path. M_is_hypersparse: 0, A->iso: 0, B->iso: 0, A_BITMAP: 0, B_BITMAP: 0, GB_IS_FULL(A): 0, GB_IS_FULL(B): 0, semiring header size: 32
 rmm_wrap_alloc 16384 bytes
 rmm_wrap_alloc 16384 bytes

  1024x1024 GraphBLAS bool matrix, sparse by row
  sparsity control: sparse only
  M actual, 1024 entries, memory: 25.2 KB

    (0,478)   1
    (0,574)   1
    (2,376)   1
    (5,560)   1
    (6,996)   1
    (7,183)   1
    (7,666)   1
    (8,896)   1
    (9,187)   1
    (10,446)   1
    (11,46)   1
    (11,955)   1
    (12,397)   1
    (12,953)   1
    (13,192)   1
    (14,421)   1
    (15,568)   1
    (16,788)   1
    (16,904)   1
    (17,928)   1
    (18,103)   1
    (19,821)   1
    (19,886)   1
    (20,474)   1
    (21,479)   1
    (21,975)   1
    (22,569)   1
    (23,310)   1
    (24,905)   1
    ...
 rmm_wrap_alloc 16384 bytes

  1024x1024 GraphBLAS int32_t matrix, sparse by row
  sparsity control: sparse only
  C GPU, 14 entries, memory: 16.4 KB

    (99,326)   0
    (115,240)   0
    (176,614)   0
    (180,830)   1
    (343,678)   0
    (398,246)   0
    (411,643)   0
    (557,910)   0
    (590,95)   0
    (601,478)   0
    (623,44)   0
    (729,884)   0
    (825,406)   1
    (891,679)   0


  1024x1024 GraphBLAS int32_t matrix, hypersparse by row
  C_actual, 14 entries, memory: 704 bytes

    (99,326)   0
    (115,240)   0
    (176,614)   0
    (180,830)   1
    (343,678)   0
    (398,246)   0
    (411,643)   0
    (557,910)   0
    (590,95)   0
    (601,478)   0
    (623,44)   0
    (729,884)   0
    (825,406)   1
    (891,679)   0

 rmm_wrap_alloc 256 bytes
 rmm_wrap_alloc 256 bytes
 rmm_wrap_alloc 256 bytes
 rmm_wrap_alloc 256 bytes
 rmm_wrap_alloc 256 bytes

  1024x1024 GraphBLAS double matrix, hypersparse by row
  Diff actual, 14 entries, memory: 768 bytes

    (99,326)    0
    (115,240)    0
    (176,614)    0
    (180,830)    0
    (343,678)    0
    (398,246)    0
    (411,643)    0
    (557,910)    0
    (590,95)    0
    (601,478)    0
    (623,44)    0
    (729,884)    0
    (825,406)    0
    (891,679)    0


  1024x1024 GraphBLAS bool matrix, hypersparse by row
  T actual, 14 entries, memory: 656 bytes

    (99,326)   1
    (115,240)   1
    (176,614)   1
    (180,830)   1
    (343,678)   1
    (398,246)   1
    (411,643)   1
    (557,910)   1
    (590,95)   1
    (601,478)   1
    (623,44)   1
    (729,884)   1
    (825,406)   1
    (891,679)   1
 work:14 gpus:0 Getting test data
Creating problem gen
filling matrices
inside fill, using seed 4567
fill_random nrows=1024ncols=1024 need 1024 values, invsparse = 1024
fill_random after alloc values
vdim ready 
vlen ready 
ready to fill p
filling sparse
1024 nonzeroes left to fill..
35 nonzeroes left to fill..
inside fill, using seed 4567
fill_random nrows=1024ncols=1024 need 1024 values, invsparse = 1024
fill_random after alloc values
vdim ready 
vlen ready 
ready to fill p
filling sparse
1024 nonzeroes left to fill..
35 nonzeroes left to fill..
inside fill, using seed 543210
fill_random nrows=1024ncols=1024 need 5120 values, invsparse = 205
fill_random after alloc values
vdim ready 
vlen ready 
ready to fill p
filling sparse
5120 nonzeroes left to fill..
2091 nonzeroes left to fill..
 rmm_wrap_alloc 256 bytes
 rmm_wrap_alloc 256 bytes
 rmm_wrap_alloc 256 bytes
inside fill, using seed 32
fill_random nrows=1024ncols=1024 need 2048 values, invsparse = 512
fill_random after alloc values
vdim ready 
vlen ready 
ready to fill p
filling sparse
2048 nonzeroes left to fill..
569 nonzeroes left to fill..
 rmm_wrap_alloc 16384 bytes
 rmm_wrap_alloc 256 bytes
1024 slots to fill
all pairs to bucket 11, no filling
done assigning buckets
Building semiring factgory
 calling stringify semiring: 0x7f1ff539d500
inside enumify: 0x7f1ff539d500

    GraphBLAS Semiring: semiring (user-defined)
    GraphBLAS Monoid: semiring->add (built-in)
    GraphBLAS BinaryOp: monoid->op (built-in) z=plus(x,y)
    GraphBLAS type: ztype int32_t size: 4
    GraphBLAS type: xtype int32_t size: 4
    GraphBLAS type: ytype int32_t size: 4
    identity: [   0 ] 

    GraphBLAS BinaryOp: semiring->multiply (built-in) z=times(x,y)
    GraphBLAS type: ztype int32_t size: 4
    GraphBLAS type: xtype int32_t size: 4
    GraphBLAS type: ytype int32_t size: 4
Getting semiring add
Getting semiring mult
Getting semiring add op
Getting types
Getting opcodes
Getting typecodes
Performing asserts
Invoking boolean rename
Invoking boolean rename
Invoking enumify binop
e 14
Invoking enumify monoid
Calling enumify binop
Inside plus binop code
e 11
Calling enumify identity
Calling enumify terminal
Done enumify monoid
Done invoking enumify monoid
atype
btype
ctype
Invoking enumify_mask, mtype 0x7f2028b57180
GB_enumify_mask gets mcode: 1 Mask_struct: 0 Mask_comp: 0
got mask_ecode: 4
constructing semiring scode
before: add_ecode: 11, id_ecode: 0, term_ecode: 31, mult_ecode: 14, flipxy: 0, zcode: 6, xcode: 6, ycode: 6, mask_ecode: 4, ccode: 6, acode: 6, bcode: 6, csparsity: 0, msparsity: 0, asparsity: 0, bsparsity: 0
serialized_scode: 397409434374399488
done enumify semiring
scode=397409434374399488
done stringify semiring
 returned from  stringify semiring
 rmm_wrap_alloc 256 bytes
 rmm_wrap_alloc 8192 bytes
1024 slots to fill
all pairs to bucket 11, no filling
done assigning buckets
bucket 11 has 1024 dots to do
LAUNCHING BUCKET CODE: 11
INside get cached file
looking for prog in file /home/cjnolet/.SuiteSparse/GraphBLAS/6.3.0/GB_semiring_397409434374399488.h
opening /home/cjnolet/.SuiteSparse/GraphBLAS/6.3.0/GB_semiring_397409434374399488.h for write
about to close
 read cache file /home/cjnolet/.SuiteSparse/GraphBLAS/6.3.0/GB_semiring_397409434374399488.h
successful_read: 1
Just closed
 jit_cache get program GB_jit_AxB_dot3_phase3_mp
found memory-cached prog GB_jit_AxB_dot3_phase3_mp
 got kernel instance AxB_dot3_phase3_mp_int32_t_int32_t_int32_t
found memory-cached prog AxB_dot3_phase3_mp_int32_t_int32_t_int32_t
Launching _Z18AxB_dot3_phase3_mpIiiiEvxxPxP16GB_Matrix_opaqueS2_S2_S2_i<<<32,32,0,0>>>(long,long,long*,GB_Matrix_opaque*,GB_Matrix_opaque*,GB_Matrix_opaque*,GB_Matrix_opaque*,int)
warp 27 zombie count = 32, nzombies = 0
warp 11 zombie count = 32, nzombies = 0
warp 21 zombie count = 32, nzombies = 0
warp 3 zombie count = 32, nzombies = 0
warp 6 zombie count = 32, nzombies = 0
warp 2 zombie count = 32, nzombies = 0
warp 14 zombie count = 32, nzombies = 0
warp 7 zombie count = 31, nzombies = 0
warp 18 zombie count = 32, nzombies = 0
warp 5 zombie count = 32, nzombies = 0
warp 10 zombie count = 32, nzombies = 0
warp 1 zombie count = 32, nzombies = 0
warp 24 zombie count = 32, nzombies = 0
warp 15 zombie count = 32, nzombies = 0
warp 20 zombie count = 32, nzombies = 0
warp 28 zombie count = 31, nzombies = 0
warp 4 zombie count = 31, nzombies = 0
warp 25 zombie count = 32, nzombies = 0
warp 17 zombie count = 32, nzombies = 0
warp 12 zombie count = 32, nzombies = 0
warp 31 zombie count = 32, nzombies = 0
warp 16 zombie count = 32, nzombies = 0
warp 30 zombie count = 32, nzombies = 0
warp 22 zombie count = 31, nzombies = 0
warp 0 zombie count = 32, nzombies = 0
warp 23 zombie count = 32, nzombies = 0
warp 26 zombie count = 31, nzombies = 0
warp 9 zombie count = 31, nzombies = 0
 Czombie = 32
 Czombie = 96
 Czombie = 96
 Czombie = 128
 Czombie = 160
 Czombie = 192
warp 29 zombie count = 32, nzombies = 128
 Czombie = 224
warp 13 zombie count = 31, nzombies = 160
 Czombie = 255
 Czombie = 287
 Czombie = 383
 Czombie = 383
 Czombie = 383
warp 19 zombie count = 32, nzombies = 319
 Czombie = 479
 Czombie = 479
 Czombie = 479
 Czombie = 510
 Czombie = 573
 Czombie = 573
 Czombie = 669
 Czombie = 669
 Czombie = 669
 Czombie = 701
 Czombie = 764
 Czombie = 764
 Czombie = 796
 Czombie = 859
 Czombie = 859
 Czombie = 890
 Czombie = 953
 Czombie = 953
 Czombie = 985
warp 8 zombie count = 31, nzombies = 985
 Czombie = 1016
Printing bucketp
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
Done.
returned from kernel 1.59027ms

  1024x1024 GraphBLAS int32_t matrix, sparse (jumbled) by row
  sparsity control: sparse only
  C GPU, 1024 entries, memory: 28.2 KB
  pending tuples: 0 max pending: 0 zombies: 1016

    (0,478) zombie
    (0,574) zombie
    (2,376) zombie
    (5,560) zombie
    (6,996) zombie
    (7,183) zombie
    (7,666) zombie
    (8,896) zombie
    (9,187) zombie
    (10,446) zombie
    (11,46) zombie
    (11,955) zombie
    (12,397) zombie
    (12,953) zombie
    (13,192) zombie
    (14,421) zombie
    (15,568) zombie
    (16,788) zombie
    (16,904) zombie
    (17,928) zombie
    (18,103) zombie
    (19,821) zombie
    (19,886) zombie
    (20,474) zombie
    (21,479) zombie
    (21,975) zombie
    (22,569) zombie
    (23,310) zombie
    (24,905) zombie
    ...
 rmm_wrap_alloc 256 bytes
Not using cuda path. M_is_hypersparse: 0, A->iso: 0, B->iso: 0, A_BITMAP: 0, B_BITMAP: 0, GB_IS_FULL(A): 0, GB_IS_FULL(B): 0, semiring header size: 32
 rmm_wrap_alloc 16384 bytes

  1024x1024 GraphBLAS bool matrix, sparse by row
  sparsity control: sparse only
  M actual, 1024 entries, memory: 25.2 KB

    (0,478)   1
    (0,574)   1
    (2,376)   1
    (5,560)   1
    (6,996)   1
    (7,183)   1
    (7,666)   1
    (8,896)   1
    (9,187)   1
    (10,446)   1
    (11,46)   1
    (11,955)   1
    (12,397)   1
    (12,953)   1
    (13,192)   1
    (14,421)   1
    (15,568)   1
    (16,788)   1
    (16,904)   1
    (17,928)   1
    (18,103)   1
    (19,821)   1
    (19,886)   1
    (20,474)   1
    (21,479)   1
    (21,975)   1
    (22,569)   1
    (23,310)   1
    (24,905)   1
    ...
 rmm_wrap_alloc 16384 bytes
 rmm_wrap_alloc 256 bytes
 rmm_wrap_alloc 256 bytes

  1024x1024 GraphBLAS int32_t matrix, sparse by row
  sparsity control: sparse only
  C GPU, 8 entries, memory: 16.3 KB

    (235,522)   1
    (309,328)   1
    (417,366)   0
    (565,490)   0
    (611,759)   0
    (714,475)   1
    (766,915)   0
    (877,722)   0


  1024x1024 GraphBLAS int32_t matrix, hypersparse by row
  C_actual, 8 entries, memory: 544 bytes

    (235,522)   1
    (309,328)   1
    (417,366)   0
    (565,490)   0
    (611,759)   0
    (714,475)   1
    (766,915)   0
    (877,722)   0

 rmm_wrap_alloc 256 bytes
 rmm_wrap_alloc 256 bytes
 rmm_wrap_alloc 256 bytes
 rmm_wrap_alloc 256 bytes
 rmm_wrap_alloc 256 bytes
 rmm_wrap_alloc 256 bytes
 rmm_wrap_alloc 256 bytes

  1024x1024 GraphBLAS double matrix, hypersparse by row
  Diff actual, 8 entries, memory: 576 bytes

    (235,522)    0
    (309,328)    0
    (417,366)    0
    (565,490)    0
    (611,759)    0
    (714,475)    0
    (766,915)    0
    (877,722)    0


  1024x1024 GraphBLAS bool matrix, hypersparse by row
  T actual, 8 entries, memory: 520 bytes

    (235,522)   1
    (309,328)   1
    (417,366)   1
    (565,490)   1
    (611,759)   1
    (714,475)   1
    (766,915)   1
    (877,722)   1
 work:8 gpus:0 [       OK ] AxB_dot3_tests_PLUS_TIMES_3.smallxsmallPLUS_TIMES_Cint32_tMboolAint32_tBint32_tXint32_tYint32_tZint32_t (475 ms)
[ RUN      ] AxB_dot3_tests_PLUS_TIMES_3.tinyxtinyPLUS_TIMES_Cint32_tMint32_tAint32_tBint32_tXint32_tYint32_tZint32_t
Getting test data
Creating problem gen
filling matrices
inside fill, using seed 4567
fill_random nrows=32ncols=32 need 32 values, invsparse = 32
fill_random after alloc values
vdim ready 
vlen ready 
ready to fill p
filling sparse
32 nonzeroes left to fill..
2 nonzeroes left to fill..
 rmm_wrap_alloc 256 bytes
 rmm_wrap_alloc 256 bytes
 rmm_wrap_alloc 256 bytes
 rmm_wrap_alloc 256 bytes
 rmm_wrap_alloc 256 bytes
 rmm_wrap_alloc 256 bytes
 rmm_wrap_alloc 256 bytes
 rmm_wrap_alloc 256 bytes
 rmm_wrap_alloc 256 bytes
inside fill, using seed 4567
fill_random nrows=32ncols=32 need 32 values, invsparse = 32
fill_random after alloc values
vdim ready 
vlen ready 
ready to fill p
filling sparse
32 nonzeroes left to fill..
2 nonzeroes left to fill..
 rmm_wrap_alloc 256 bytes
 rmm_wrap_alloc 256 bytes
inside fill, using seed 543210
fill_random nrows=32ncols=32 need 1024 values, invsparse = 1
fill_random after alloc values
vdim ready 
vlen ready 
ready to fill p
filling dense
 rmm_wrap_alloc 512 bytes
inside fill, using seed 32
fill_random nrows=32ncols=32 need 1024 values, invsparse = 1
fill_random after alloc values
vdim ready 
vlen ready 
ready to fill p
filling dense
 rmm_wrap_alloc 512 bytes
32 slots to fill
all pairs to bucket 1, no filling
done assigning buckets
Building semiring factgory
 calling stringify semiring: 0x7f1ff5384400
inside enumify: 0x7f1ff5384400

    GraphBLAS Semiring: semiring (user-defined)
    GraphBLAS Monoid: semiring->add (built-in)
    GraphBLAS BinaryOp: monoid->op (built-in) z=plus(x,y)
    GraphBLAS type: ztype int32_t size: 4
    GraphBLAS type: xtype int32_t size: 4
    GraphBLAS type: ytype int32_t size: 4
    identity: [   0 ] 

    GraphBLAS BinaryOp: semiring->multiply (built-in) z=times(x,y)
    GraphBLAS type: ztype int32_t size: 4
    GraphBLAS type: xtype int32_t size: 4
    GraphBLAS type: ytype int32_t size: 4
Getting semiring add
Getting semiring mult
Getting semiring add op
Getting types
Getting opcodes
Getting typecodes
Performing asserts
Invoking boolean rename
Invoking boolean rename
Invoking enumify binop
e 14
Invoking enumify monoid
Calling enumify binop
Inside plus binop code
e 11
Calling enumify identity
Calling enumify terminal
Done enumify monoid
Done invoking enumify monoid
atype
btype
ctype
Invoking enumify_mask, mtype 0x7f2028b56f40
GB_enumify_mask gets mcode: 6 Mask_struct: 0 Mask_comp: 0
got mask_ecode: 8
constructing semiring scode
before: add_ecode: 11, id_ecode: 0, term_ecode: 31, mult_ecode: 14, flipxy: 0, zcode: 6, xcode: 6, ycode: 6, mask_ecode: 8, ccode: 6, acode: 6, bcode: 6, csparsity: 0, msparsity: 0, asparsity: 0, bsparsity: 0
serialized_scode: 397409434378593792
done enumify semiring
scode=397409434378593792
done stringify semiring
 returned from  stringify semiring
 rmm_wrap_alloc 256 bytes
 rmm_wrap_alloc 256 bytes
32 slots to fill
all pairs to bucket 1, no filling
done assigning buckets
bucket 1 has 32 dots to do
LAUNCHING BUCKET CODE: 1
INside get cached file
looking for prog in file /home/cjnolet/.SuiteSparse/GraphBLAS/6.3.0/GB_semiring_397409434378593792.h
opening /home/cjnolet/.SuiteSparse/GraphBLAS/6.3.0/GB_semiring_397409434378593792.h for write
about to close
 read cache file /home/cjnolet/.SuiteSparse/GraphBLAS/6.3.0/GB_semiring_397409434378593792.h
successful_read: 1
Just closed
 jit_cache get program GB_jit_AxB_dot3_phase3_dndn
found memory-cached prog GB_jit_AxB_dot3_phase3_dndn
 got kernel instance AxB_dot3_phase3_dndn_int32_t_int32_t_int32_t
found memory-cached prog AxB_dot3_phase3_dndn_int32_t_int32_t_int32_t
Launching _Z20AxB_dot3_phase3_dndnIiiiEvxxPxP16GB_Matrix_opaqueS2_S2_S2_i<<<1,32,0,0>>>(long,long,long*,GB_Matrix_opaque*,GB_Matrix_opaque*,GB_Matrix_opaque*,GB_Matrix_opaque*,int)
tid=0, i,j = 6,0  nnzA= 32, nnzB=32
tid=0, i,j = 1,1  nnzA= 32, nnzB=32
tid=0, i,j = 12,3  nnzA= 32, nnzB=32
tid=0, i,j = 17,3  nnzA= 32, nnzB=32
tid=0, i,j = 19,4  nnzA= 32, nnzB=32
tid=0, i,j = 19,5  nnzA= 32, nnzB=32
tid=0, i,j = 22,6  nnzA= 32, nnzB=32
tid=0, i,j = 24,6  nnzA= 32, nnzB=32
tid=0, i,j = 10,8  nnzA= 32, nnzB=32
tid=0, i,j = 19,9  nnzA= 32, nnzB=32
tid=0, i,j = 31,9  nnzA= 32, nnzB=32
tid=0, i,j = 13,11  nnzA= 32, nnzB=32
tid=0, i,j = 11,12  nnzA= 32, nnzB=32
tid=0, i,j = 24,14  nnzA= 32, nnzB=32
tid=0, i,j = 30,15  nnzA= 32, nnzB=32
tid=0, i,j = 20,16  nnzA= 32, nnzB=32
tid=0, i,j = 30,17  nnzA= 32, nnzB=32
tid=0, i,j = 18,18  nnzA= 32, nnzB=32
tid=0, i,j = 1,19  nnzA= 32, nnzB=32
tid=0, i,j = 25,20  nnzA= 32, nnzB=32
tid=0, i,j = 24,21  nnzA= 32, nnzB=32
tid=0, i,j = 27,21  nnzA= 32, nnzB=32
tid=0, i,j = 30,22  nnzA= 32, nnzB=32
tid=0, i,j = 30,23  nnzA= 32, nnzB=32
tid=0, i,j = 14,24  nnzA= 32, nnzB=32
tid=0, i,j = 4,25  nnzA= 32, nnzB=32
tid=0, i,j = 15,26  nnzA= 32, nnzB=32
tid=0, i,j = 28,27  nnzA= 32, nnzB=32
tid=0, i,j = 16,28  nnzA= 32, nnzB=32
tid=0, i,j = 9,29  nnzA= 32, nnzB=32
tid=0, i,j = 24,30  nnzA= 32, nnzB=32
tid=0, i,j = 31,31  nnzA= 32, nnzB=32
Printing bucketp
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
Done.
returned from kernel 3.29933ms

  32x32 GraphBLAS int32_t matrix, sparse (jumbled) by row
  sparsity control: sparse only
  C GPU, 32 entries, memory: 1.1 KB

    (0,6)   11
    (1,1)   10
    (3,12)   7
    (3,17)   6
    (4,19)   8
    (5,19)   10
    (6,22)   6
    (6,24)   9
    (8,10)   7
    (9,19)   8
    (9,31)   6
    (11,13)   8
    (12,11)   6
    (14,24)   10
    (15,30)   9
    (16,20)   5
    (17,30)   7
    (18,18)   12
    (19,1)   6
    (20,25)   7
    (21,24)   9
    (21,27)   6
    (22,30)   8
    (23,30)   11
    (24,14)   7
    (25,4)   9
    (26,15)   4
    (27,28)   5
    (28,16)   4
    ...
Not using cuda path. M_is_hypersparse: 0, A->iso: 0, B->iso: 0, A_BITMAP: 0, B_BITMAP: 0, GB_IS_FULL(A): 0, GB_IS_FULL(B): 0, semiring header size: 32
 rmm_wrap_alloc 512 bytes
 rmm_wrap_alloc 512 bytes

  32x32 GraphBLAS int32_t matrix, sparse by row
  sparsity control: sparse only
  M actual, 32 entries, memory: 1.1 KB

    (0,6)   1
    (1,1)   1
    (3,12)   1
    (3,17)   0
    (4,19)   1
    (5,19)   1
    (6,22)   0
    (6,24)   1
    (8,10)   0
    (9,19)   0
    (9,31)   0
    (11,13)   0
    (12,11)   1
    (14,24)   1
    (15,30)   1
    (16,20)   0
    (17,30)   0
    (18,18)   1
    (19,1)   0
    (20,25)   0
    (21,24)   0
    (21,27)   0
    (22,30)   0
    (23,30)   1
    (24,14)   1
    (25,4)   1
    (26,15)   1
    (27,28)   1
    (28,16)   1
    ...

  32x32 GraphBLAS int32_t matrix, sparse by row
  sparsity control: sparse only
  C GPU, 32 entries, memory: 1.1 KB

    (0,6)   11
    (1,1)   10
    (3,12)   7
    (3,17)   6
    (4,19)   8
    (5,19)   10
    (6,22)   6
    (6,24)   9
    (8,10)   7
    (9,19)   8
    (9,31)   6
    (11,13)   8
    (12,11)   6
    (14,24)   10
    (15,30)   9
    (16,20)   5
    (17,30)   7
    (18,18)   12
    (19,1)   6
    (20,25)   7
    (21,24)   9
    (21,27)   6
    (22,30)   8
    (23,30)   11
    (24,14)   7
    (25,4)   9
    (26,15)   4
    (27,28)   5
    (28,16)   4
    (29,9)   7
    (30,24)   10
    (31,31)   10


  32x32 GraphBLAS int32_t matrix, sparse by row
  C_actual, 32 entries, memory: 1.5 KB

    (0,6)   11
    (1,1)   10
    (3,12)   7
    (3,17)   6
    (4,19)   8
    (5,19)   10
    (6,22)   6
    (6,24)   9
    (8,10)   7
    (9,19)   8
    (9,31)   6
    (11,13)   8
    (12,11)   6
    (14,24)   10
    (15,30)   9
    (16,20)   5
    (17,30)   7
    (18,18)   12
    (19,1)   6
    (20,25)   7
    (21,24)   9
    (21,27)   6
    (22,30)   8
    (23,30)   11
    (24,14)   7
    (25,4)   9
    (26,15)   4
    (27,28)   5
    (28,16)   4
    (29,9)   7
    (30,24)   10
    (31,31)   10

 rmm_wrap_alloc 256 bytes
 rmm_wrap_alloc 512 bytes
 rmm_wrap_alloc 256 bytes
 rmm_wrap_alloc 256 bytes

  32x32 GraphBLAS double matrix, sparse by row
  Diff actual, 32 entries, memory: 1.2 KB

    (0,6)    0
    (1,1)    0
    (3,12)    0
    (3,17)    0
    (4,19)    0
    (5,19)    0
    (6,22)    0
    (6,24)    0
    (8,10)    0
    (9,19)    0
    (9,31)    0
    (11,13)    0
    (12,11)    0
    (14,24)    0
    (15,30)    0
    (16,20)    0
    (17,30)    0
    (18,18)    0
    (19,1)    0
    (20,25)    0
    (21,24)    0
    (21,27)    0
    (22,30)    0
    (23,30)    0
    (24,14)    0
    (25,4)    0
    (26,15)    0
    (27,28)    0
    (28,16)    0
    (29,9)    0
    (30,24)    0
    (31,31)    0


  32x32 GraphBLAS bool matrix, sparse by row
  T actual, 32 entries, memory: 1.0 KB

    (0,6)   1
    (1,1)   1
    (3,12)   1
    (3,17)   1
    (4,19)   1
    (5,19)   1
    (6,22)   1
    (6,24)   1
    (8,10)   1
    (9,19)   1
    (9,31)   1
    (11,13)   1
    (12,11)   1
    (14,24)   1
    (15,30)   1
    (16,20)   1
    (17,30)   1
    (18,18)   1
    (19,1)   1
    (20,25)   1
    (21,24)   1
    (21,27)   1
    (22,30)   1
    (23,30)   1
    (24,14)   1
    (25,4)   1
    (26,15)   1
    (27,28)   1
    (28,16)   1
    ...
 work:32 gpus:0 Getting test data
Creating problem gen
filling matrices
inside fill, using seed 4567
fill_random nrows=32ncols=32 need 32 values, invsparse = 32
fill_random after alloc values
vdim ready 
vlen ready 
ready to fill p
filling sparse
32 nonzeroes left to fill..
2 nonzeroes left to fill..
 rmm_wrap_alloc 256 bytes
 rmm_wrap_alloc 256 bytes
inside fill, using seed 4567
fill_random nrows=32ncols=32 need 32 values, invsparse = 32
fill_random after alloc values
vdim ready 
vlen ready 
ready to fill p
filling sparse
32 nonzeroes left to fill..
2 nonzeroes left to fill..
 rmm_wrap_alloc 256 bytes
 rmm_wrap_alloc 256 bytes
inside fill, using seed 543210
fill_random nrows=32ncols=32 need 1024 values, invsparse = 1
fill_random after alloc values
vdim ready 
vlen ready 
ready to fill p
filling dense
 rmm_wrap_alloc 512 bytes
 rmm_wrap_alloc 512 bytes
inside fill, using seed 32
fill_random nrows=32ncols=32 need 160 values, invsparse = 7
fill_random after alloc values
vdim ready 
vlen ready 
ready to fill p
filling sparse
160 nonzeroes left to fill..
62 nonzeroes left to fill..
 rmm_wrap_alloc 256 bytes
32 slots to fill
all pairs to bucket 5, no filling
done assigning buckets
Building semiring factgory
 calling stringify semiring: 0x7f1ff539d800
inside enumify: 0x7f1ff539d800

    GraphBLAS Semiring: semiring (user-defined)
    GraphBLAS Monoid: semiring->add (built-in)
    GraphBLAS BinaryOp: monoid->op (built-in) z=plus(x,y)
    GraphBLAS type: ztype int32_t size: 4
    GraphBLAS type: xtype int32_t size: 4
    GraphBLAS type: ytype int32_t size: 4
    identity: [   0 ] 

    GraphBLAS BinaryOp: semiring->multiply (built-in) z=times(x,y)
    GraphBLAS type: ztype int32_t size: 4
    GraphBLAS type: xtype int32_t size: 4
    GraphBLAS type: ytype int32_t size: 4
Getting semiring add
Getting semiring mult
Getting semiring add op
Getting types
Getting opcodes
Getting typecodes
Performing asserts
Invoking boolean rename
Invoking boolean rename
Invoking enumify binop
e 14
Invoking enumify monoid
Calling enumify binop
Inside plus binop code
e 11
Calling enumify identity
Calling enumify terminal
Done enumify monoid
Done invoking enumify monoid
atype
btype
ctype
Invoking enumify_mask, mtype 0x7f2028b56f40
GB_enumify_mask gets mcode: 6 Mask_struct: 0 Mask_comp: 0
got mask_ecode: 8
constructing semiring scode
before: add_ecode: 11, id_ecode: 0, term_ecode: 31, mult_ecode: 14, flipxy: 0, zcode: 6, xcode: 6, ycode: 6, mask_ecode: 8, ccode: 6, acode: 6, bcode: 6, csparsity: 0, msparsity: 0, asparsity: 0, bsparsity: 0
serialized_scode: 397409434378593792
done enumify semiring
scode=397409434378593792
done stringify semiring
 returned from  stringify semiring
 rmm_wrap_alloc 256 bytes
 rmm_wrap_alloc 256 bytes
32 slots to fill
all pairs to bucket 5, no filling
done assigning buckets
bucket 5 has 32 dots to do
LAUNCHING BUCKET CODE: 5
Confiring spdnINside get cached file
looking for prog in file /home/cjnolet/.SuiteSparse/GraphBLAS/6.3.0/GB_semiring_397409434378593792.h
opening /home/cjnolet/.SuiteSparse/GraphBLAS/6.3.0/GB_semiring_397409434378593792.h for write
about to close
 read cache file /home/cjnolet/.SuiteSparse/GraphBLAS/6.3.0/GB_semiring_397409434378593792.h
successful_read: 1
Just closed
 jit_cache get program GB_jit_AxB_dot3_phase3_spdn
found memory-cached prog GB_jit_AxB_dot3_phase3_spdn
 got kernel instance AxB_dot3_phase3_spdn_int32_t_int32_t_int32_t
found memory-cached prog AxB_dot3_phase3_spdn_int32_t_int32_t_int32_t
Launching _Z20AxB_dot3_phase3_spdnIiiiEvxxPxP16GB_Matrix_opaqueS2_S2_S2_i<<<1,32,0,0>>>(long,long,long*,GB_Matrix_opaque*,GB_Matrix_opaque*,GB_Matrix_opaque*,GB_Matrix_opaque*,int)
Printing bucketp
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
Done.
returned from kernel 0.500736ms

  32x32 GraphBLAS int32_t matrix, sparse (jumbled) by row
  sparsity control: sparse only
  C GPU, 32 entries, memory: 1.1 KB
  pending tuples: 0 max pending: 0 zombies: 6

    (0,6) zombie
    (1,1)   2
    (3,12)   2
    (3,17)   2
    (4,19) zombie
    (5,19) zombie
    (6,22)   2
    (6,24)   0
    (8,10)   0
    (9,19) zombie
    (9,31)   4
    (11,13)   3
    (12,11)   2
    (14,24)   1
    (15,30)   1
    (16,20)   0
    (17,30)   0
    (18,18) zombie
    (19,1)   3
    (20,25) zombie
    (21,24)   1
    (21,27)   0
    (22,30)   1
    (23,30)   0
    (24,14)   1
    (25,4)   0
    (26,15)   1
    (27,28)   2
    (28,16)   1
    ...
Not using cuda path. M_is_hypersparse: 0, A->iso: 0, B->iso: 0, A_BITMAP: 0, B_BITMAP: 0, GB_IS_FULL(A): 0, GB_IS_FULL(B): 0, semiring header size: 32
 rmm_wrap_alloc 512 bytes
 rmm_wrap_alloc 512 bytes
 rmm_wrap_alloc 512 bytes

  32x32 GraphBLAS int32_t matrix, sparse by row
  sparsity control: sparse only
  M actual, 32 entries, memory: 1.1 KB

    (0,6)   1
    (1,1)   1
    (3,12)   1
    (3,17)   0
    (4,19)   1
    (5,19)   1
    (6,22)   0
    (6,24)   1
    (8,10)   0
    (9,19)   0
    (9,31)   0
    (11,13)   0
    (12,11)   1
    (14,24)   1
    (15,30)   1
    (16,20)   0
    (17,30)   0
    (18,18)   1
    (19,1)   0
    (20,25)   0
    (21,24)   0
    (21,27)   0
    (22,30)   0
    (23,30)   1
    (24,14)   1
    (25,4)   1
    (26,15)   1
    (27,28)   1
    (28,16)   1
    ...

  32x32 GraphBLAS int32_t matrix, sparse by row
  sparsity control: sparse only
  C GPU, 26 entries, memory: 1.1 KB

    (1,1)   2
    (3,12)   2
    (3,17)   2
    (6,22)   2
    (6,24)   0
    (8,10)   0
    (9,31)   4
    (11,13)   3
    (12,11)   2
    (14,24)   1
    (15,30)   1
    (16,20)   0
    (17,30)   0
    (19,1)   3
    (21,24)   1
    (21,27)   0
    (22,30)   1
    (23,30)   0
    (24,14)   1
    (25,4)   0
    (26,15)   1
    (27,28)   2
    (28,16)   1
    (29,9)   0
    (30,24)   1
    (31,31)   2


  32x32 GraphBLAS int32_t matrix, sparse by row
  C_actual, 26 entries, memory: 1.1 KB

    (1,1)   2
    (3,12)   2
    (3,17)   2
    (6,22)   2
    (6,24)   0
    (8,10)   0
    (9,31)   4
    (11,13)   3
    (12,11)   2
    (14,24)   1
    (15,30)   1
    (16,20)   0
    (17,30)   0
    (19,1)   3
    (21,24)   1
    (21,27)   0
    (22,30)   1
    (23,30)   0
    (24,14)   1
    (25,4)   0
    (26,15)   1
    (27,28)   2
    (28,16)   1
    (29,9)   0
    (30,24)   1
    (31,31)   2

 rmm_wrap_alloc 256 bytes
 rmm_wrap_alloc 256 bytes

  32x32 GraphBLAS double matrix, sparse by row
  Diff actual, 26 entries, memory: 1.2 KB

    (1,1)    0
    (3,12)    0
    (3,17)    0
    (6,22)    0
    (6,24)    0
    (8,10)    0
    (9,31)    0
    (11,13)    0
    (12,11)    0
    (14,24)    0
    (15,30)    0
    (16,20)    0
    (17,30)    0
    (19,1)    0
    (21,24)    0
    (21,27)    0
    (22,30)    0
    (23,30)    0
    (24,14)    0
    (25,4)    0
    (26,15)    0
    (27,28)    0
    (28,16)    0
    (29,9)    0
    (30,24)    0
    (31,31)    0


  32x32 GraphBLAS bool matrix, sparse by row
  T actual, 26 entries, memory: 1.0 KB

    (1,1)   1
    (3,12)   1
    (3,17)   1
    (6,22)   1
    (6,24)   1
    (8,10)   1
    (9,31)   1
    (11,13)   1
    (12,11)   1
    (14,24)   1
    (15,30)   1
    (16,20)   1
    (17,30)   1
    (19,1)   1
    (21,24)   1
    (21,27)   1
    (22,30)   1
    (23,30)   1
    (24,14)   1
    (25,4)   1
    (26,15)   1
    (27,28)   1
    (28,16)   1
    (29,9)   1
    (30,24)   1
    (31,31)   1
 work:26 gpus:0 Getting test data
Creating problem gen
filling matrices
inside fill, using seed 4567
fill_random nrows=32ncols=32 need 32 values, invsparse = 32
fill_random after alloc values
vdim ready 
vlen ready 
ready to fill p
filling sparse
32 nonzeroes left to fill..
2 nonzeroes left to fill..
 rmm_wrap_alloc 256 bytes
 rmm_wrap_alloc 256 bytes
inside fill, using seed 4567
fill_random nrows=32ncols=32 need 32 values, invsparse = 32
fill_random after alloc values
vdim ready 
vlen ready 
ready to fill p
filling sparse
32 nonzeroes left to fill..
2 nonzeroes left to fill..
 rmm_wrap_alloc 256 bytes
 rmm_wrap_alloc 256 bytes
inside fill, using seed 543210
fill_random nrows=32ncols=32 need 64 values, invsparse = 16
fill_random after alloc values
vdim ready 
vlen ready 
ready to fill p
filling sparse
64 nonzeroes left to fill..
21 nonzeroes left to fill..
 rmm_wrap_alloc 512 bytes
 rmm_wrap_alloc 512 bytes
 rmm_wrap_alloc 512 bytes
 rmm_wrap_alloc 512 bytes
inside fill, using seed 32
fill_random nrows=32ncols=32 need 320 values, invsparse = 4
fill_random after alloc values
vdim ready 
vlen ready 
ready to fill p
filling sparse
320 nonzeroes left to fill..
140 nonzeroes left to fill..
 rmm_wrap_alloc 256 bytes
 rmm_wrap_alloc 256 bytes
32 slots to fill
all pairs to bucket 6, no filling
done assigning buckets
Building semiring factgory
 calling stringify semiring: 0x7f1ff539f100
inside enumify: 0x7f1ff539f100

    GraphBLAS Semiring: semiring (user-defined)
    GraphBLAS Monoid: semiring->add (built-in)
    GraphBLAS BinaryOp: monoid->op (built-in) z=plus(x,y)
    GraphBLAS type: ztype int32_t size: 4
    GraphBLAS type: xtype int32_t size: 4
    GraphBLAS type: ytype int32_t size: 4
    identity: [   0 ] 

    GraphBLAS BinaryOp: semiring->multiply (built-in) z=times(x,y)
    GraphBLAS type: ztype int32_t size: 4
    GraphBLAS type: xtype int32_t size: 4
    GraphBLAS type: ytype int32_t size: 4
Getting semiring add
Getting semiring mult
Getting semiring add op
Getting types
Getting opcodes
Getting typecodes
Performing asserts
Invoking boolean rename
Invoking boolean rename
Invoking enumify binop
e 14
Invoking enumify monoid
Calling enumify binop
Inside plus binop code
e 11
Calling enumify identity
Calling enumify terminal
Done enumify monoid
Done invoking enumify monoid
atype
btype
ctype
Invoking enumify_mask, mtype 0x7f2028b56f40
GB_enumify_mask gets mcode: 6 Mask_struct: 0 Mask_comp: 0
got mask_ecode: 8
constructing semiring scode
before: add_ecode: 11, id_ecode: 0, term_ecode: 31, mult_ecode: 14, flipxy: 0, zcode: 6, xcode: 6, ycode: 6, mask_ecode: 8, ccode: 6, acode: 6, bcode: 6, csparsity: 0, msparsity: 0, asparsity: 0, bsparsity: 0
serialized_scode: 397409434378593792
done enumify semiring
scode=397409434378593792
done stringify semiring
 returned from  stringify semiring
 rmm_wrap_alloc 256 bytes
 rmm_wrap_alloc 256 bytes
32 slots to fill
all pairs to bucket 6, no filling
done assigning buckets
bucket 6 has 32 dots to do
LAUNCHING BUCKET CODE: 6
INside get cached file
looking for prog in file /home/cjnolet/.SuiteSparse/GraphBLAS/6.3.0/GB_semiring_397409434378593792.h
opening /home/cjnolet/.SuiteSparse/GraphBLAS/6.3.0/GB_semiring_397409434378593792.h for write
about to close
 read cache file /home/cjnolet/.SuiteSparse/GraphBLAS/6.3.0/GB_semiring_397409434378593792.h
successful_read: 1
Just closed
 jit_cache get program GB_jit_AxB_dot3_phase3_vssp
found memory-cached prog GB_jit_AxB_dot3_phase3_vssp
 got kernel instance AxB_dot3_phase3_vssp_int32_t_int32_t_int32_t
found memory-cached prog AxB_dot3_phase3_vssp_int32_t_int32_t_int32_t
Launching _Z20AxB_dot3_phase3_vsspIiiiEvxxPxP16GB_Matrix_opaqueS2_S2_S2_i<<<1,32,0,0>>>(long,long,long*,GB_Matrix_opaque*,GB_Matrix_opaque*,GB_Matrix_opaque*,GB_Matrix_opaque*,int)
Printing bucketp
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
Done.
returned from kernel 0.628736ms

  32x32 GraphBLAS int32_t matrix, sparse by row
  sparsity control: sparse only
  C GPU, 32 entries, memory: 1.1 KB
  pending tuples: 0 max pending: 0 zombies: 15

    (0,6) zombie
    (1,1)   1
    (3,12) zombie
    (3,17)   0
    (4,19) zombie
    (5,19) zombie
    (6,22)   0
    (6,24)   0
    (8,10)   0
    (9,19) zombie
    (9,31)   1
    (11,13) zombie
    (12,11)   0
    (14,24)   1
    (15,30)   1
    (16,20) zombie
    (17,30) zombie
    (18,18) zombie
    (19,1)   1
    (20,25) zombie
    (21,24) zombie
    (21,27)   1
    (22,30)   0
    (23,30)   0
    (24,14) zombie
    (25,4) zombie
    (26,15)   0
    (27,28) zombie
    (28,16)   0
    ...
Not using cuda path. M_is_hypersparse: 0, A->iso: 0, B->iso: 0, A_BITMAP: 0, B_BITMAP: 0, GB_IS_FULL(A): 0, GB_IS_FULL(B): 0, semiring header size: 32
 rmm_wrap_alloc 512 bytes
 rmm_wrap_alloc 512 bytes

  32x32 GraphBLAS int32_t matrix, sparse by row
  sparsity control: sparse only
  M actual, 32 entries, memory: 1.1 KB

    (0,6)   1
    (1,1)   1
    (3,12)   1
    (3,17)   0
    (4,19)   1
    (5,19)   1
    (6,22)   0
    (6,24)   1
    (8,10)   0
    (9,19)   0
    (9,31)   0
    (11,13)   0
    (12,11)   1
    (14,24)   1
    (15,30)   1
    (16,20)   0
    (17,30)   0
    (18,18)   1
    (19,1)   0
    (20,25)   0
    (21,24)   0
    (21,27)   0
    (22,30)   0
    (23,30)   1
    (24,14)   1
    (25,4)   1
    (26,15)   1
    (27,28)   1
    (28,16)   1
    ...

  32x32 GraphBLAS int32_t matrix, sparse by row
  sparsity control: sparse only
  C GPU, 17 entries, memory: 1.1 KB

    (1,1)   1
    (3,17)   0
    (6,22)   0
    (6,24)   0
    (8,10)   0
    (9,31)   1
    (12,11)   0
    (14,24)   1
    (15,30)   1
    (19,1)   1
    (21,27)   1
    (22,30)   0
    (23,30)   0
    (26,15)   0
    (28,16)   0
    (30,24)   0
    (31,31)   0


  32x32 GraphBLAS int32_t matrix, sparse by row
  C_actual, 17 entries, memory: 1.1 KB

    (1,1)   1
    (3,17)   0
    (6,22)   0
    (6,24)   0
    (8,10)   0
    (9,31)   1
    (12,11)   0
    (14,24)   1
    (15,30)   1
    (19,1)   1
    (21,27)   1
    (22,30)   0
    (23,30)   0
    (26,15)   0
    (28,16)   0
    (30,24)   0
    (31,31)   0

 rmm_wrap_alloc 256 bytes
 rmm_wrap_alloc 256 bytes

  32x32 GraphBLAS double matrix, sparse by row
  Diff actual, 17 entries, memory: 1.2 KB

    (1,1)    0
    (3,17)    0
    (6,22)    0
    (6,24)    0
    (8,10)    0
    (9,31)    0
    (12,11)    0
    (14,24)    0
    (15,30)    0
    (19,1)    0
    (21,27)    0
    (22,30)    0
    (23,30)    0
    (26,15)    0
    (28,16)    0
    (30,24)    0
    (31,31)    0


  32x32 GraphBLAS bool matrix, sparse by row
  T actual, 17 entries, memory: 1.0 KB

    (1,1)   1
    (3,17)   1
    (6,22)   1
    (6,24)   1
    (8,10)   1
    (9,31)   1
    (12,11)   1
    (14,24)   1
    (15,30)   1
    (19,1)   1
    (21,27)   1
    (22,30)   1
    (23,30)   1
    (26,15)   1
    (28,16)   1
    (30,24)   1
    (31,31)   1
 work:17 gpus:0 Getting test data
Creating problem gen
filling matrices
inside fill, using seed 4567
fill_random nrows=32ncols=32 need 32 values, invsparse = 32
fill_random after alloc values
vdim ready 
vlen ready 
ready to fill p
filling sparse
32 nonzeroes left to fill..
2 nonzeroes left to fill..
 rmm_wrap_alloc 256 bytes
inside fill, using seed 4567
fill_random nrows=32ncols=32 need 32 values, invsparse = 32
fill_random after alloc values
vdim ready 
vlen ready 
ready to fill p
filling sparse
32 nonzeroes left to fill..
2 nonzeroes left to fill..
 rmm_wrap_alloc 256 bytes
 rmm_wrap_alloc 256 bytes
inside fill, using seed 543210
fill_random nrows=32ncols=32 need 64 values, invsparse = 16
fill_random after alloc values
vdim ready 
vlen ready 
ready to fill p
filling sparse
64 nonzeroes left to fill..
21 nonzeroes left to fill..
 rmm_wrap_alloc 512 bytes
 rmm_wrap_alloc 512 bytes
 rmm_wrap_alloc 512 bytes
inside fill, using seed 32
fill_random nrows=32ncols=32 need 128 values, invsparse = 8
fill_random after alloc values
vdim ready 
vlen ready 
ready to fill p
filling sparse
128 nonzeroes left to fill..
43 nonzeroes left to fill..
 rmm_wrap_alloc 256 bytes
 rmm_wrap_alloc 256 bytes
32 slots to fill
all pairs to bucket 7, no filling
done assigning buckets
Building semiring factgory
 calling stringify semiring: 0x7f1ff539e300
inside enumify: 0x7f1ff539e300

    GraphBLAS Semiring: semiring (user-defined)
    GraphBLAS Monoid: semiring->add (built-in)
    GraphBLAS BinaryOp: monoid->op (built-in) z=plus(x,y)
    GraphBLAS type: ztype int32_t size: 4
    GraphBLAS type: xtype int32_t size: 4
    GraphBLAS type: ytype int32_t size: 4
    identity: [   0 ] 

    GraphBLAS BinaryOp: semiring->multiply (built-in) z=times(x,y)
    GraphBLAS type: ztype int32_t size: 4
    GraphBLAS type: xtype int32_t size: 4
    GraphBLAS type: ytype int32_t size: 4
Getting semiring add
Getting semiring mult
Getting semiring add op
Getting types
Getting opcodes
Getting typecodes
Performing asserts
Invoking boolean rename
Invoking boolean rename
Invoking enumify binop
e 14
Invoking enumify monoid
Calling enumify binop
Inside plus binop code
e 11
Calling enumify identity
Calling enumify terminal
Done enumify monoid
Done invoking enumify monoid
atype
btype
ctype
Invoking enumify_mask, mtype 0x7f2028b56f40
GB_enumify_mask gets mcode: 6 Mask_struct: 0 Mask_comp: 0
got mask_ecode: 8
constructing semiring scode
before: add_ecode: 11, id_ecode: 0, term_ecode: 31, mult_ecode: 14, flipxy: 0, zcode: 6, xcode: 6, ycode: 6, mask_ecode: 8, ccode: 6, acode: 6, bcode: 6, csparsity: 0, msparsity: 0, asparsity: 0, bsparsity: 0
serialized_scode: 397409434378593792
done enumify semiring
scode=397409434378593792
done stringify semiring
 returned from  stringify semiring
 rmm_wrap_alloc 256 bytes
 rmm_wrap_alloc 256 bytes
32 slots to fill
all pairs to bucket 7, no filling
done assigning buckets
bucket 7 has 32 dots to do
LAUNCHING BUCKET CODE: 7
INside get cached file
looking for prog in file /home/cjnolet/.SuiteSparse/GraphBLAS/6.3.0/GB_semiring_397409434378593792.h
opening /home/cjnolet/.SuiteSparse/GraphBLAS/6.3.0/GB_semiring_397409434378593792.h for write
about to close
 read cache file /home/cjnolet/.SuiteSparse/GraphBLAS/6.3.0/GB_semiring_397409434378593792.h
successful_read: 1
Just closed
 jit_cache get program GB_jit_AxB_dot3_phase3_vsvs
found memory-cached prog GB_jit_AxB_dot3_phase3_vsvs
 got kernel instance AxB_dot3_phase3_vsvs_int32_t_int32_t_int32_t
found memory-cached prog AxB_dot3_phase3_vsvs_int32_t_int32_t_int32_t
Launching _Z20AxB_dot3_phase3_vsvsIiiiEvxxPxP16GB_Matrix_opaqueS2_S2_S2_i<<<1,512,0,0>>>(long,long,long*,GB_Matrix_opaque*,GB_Matrix_opaque*,GB_Matrix_opaque*,GB_Matrix_opaque*,int)
Printing bucketp
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
Done.
returned from kernel 0.480256ms

  32x32 GraphBLAS int32_t matrix, sparse (jumbled) by row
  sparsity control: sparse only
  C GPU, 32 entries, memory: 1.1 KB
  pending tuples: 0 max pending: 0 zombies: 24

    (0,6) zombie
    (1,1)   0
    (3,12) zombie
    (3,17)   0
    (4,19) zombie
    (5,19) zombie
    (6,22) zombie
    (6,24) zombie
    (8,10) zombie
    (9,19) zombie
    (9,31)   0
    (11,13) zombie
    (12,11) zombie
    (14,24) zombie
    (15,30)   1
    (16,20) zombie
    (17,30) zombie
    (18,18) zombie
    (19,1)   0
    (20,25) zombie
    (21,24) zombie
    (21,27) zombie
    (22,30) zombie
    (23,30) zombie
    (24,14) zombie
    (25,4)   1
    (26,15) zombie
    (27,28) zombie
    (28,16) zombie
    ...
Not using cuda path. M_is_hypersparse: 0, A->iso: 0, B->iso: 0, A_BITMAP: 0, B_BITMAP: 0, GB_IS_FULL(A): 0, GB_IS_FULL(B): 0, semiring header size: 32
 rmm_wrap_alloc 512 bytes
 rmm_wrap_alloc 512 bytes
 rmm_wrap_alloc 512 bytes

  32x32 GraphBLAS int32_t matrix, sparse by row
  sparsity control: sparse only
  M actual, 32 entries, memory: 1.1 KB

    (0,6)   1
    (1,1)   1
    (3,12)   1
    (3,17)   0
    (4,19)   1
    (5,19)   1
    (6,22)   0
    (6,24)   1
    (8,10)   0
    (9,19)   0
    (9,31)   0
    (11,13)   0
    (12,11)   1
    (14,24)   1
    (15,30)   1
    (16,20)   0
    (17,30)   0
    (18,18)   1
    (19,1)   0
    (20,25)   0
    (21,24)   0
    (21,27)   0
    (22,30)   0
    (23,30)   1
    (24,14)   1
    (25,4)   1
    (26,15)   1
    (27,28)   1
    (28,16)   1
    ...

  32x32 GraphBLAS int32_t matrix, sparse by row
  sparsity control: sparse only
  C GPU, 8 entries, memory: 864 bytes

    (1,1)   0
    (3,17)   0
    (9,31)   0
    (15,30)   1
    (19,1)   0
    (25,4)   1
    (30,24)   0
    (31,31)   0


  32x32 GraphBLAS int32_t matrix, sparse by row
  C_actual, 8 entries, memory: 864 bytes

    (1,1)   0
    (3,17)   0
    (9,31)   0
    (15,30)   1
    (19,1)   0
    (25,4)   1
    (30,24)   0
    (31,31)   0


  32x32 GraphBLAS double matrix, sparse by row
  Diff actual, 8 entries, memory: 896 bytes

    (1,1)    0
    (3,17)    0
    (9,31)    0
    (15,30)    0
    (19,1)    0
    (25,4)    0
    (30,24)    0
    (31,31)    0


  32x32 GraphBLAS bool matrix, sparse by row
  T actual, 8 entries, memory: 840 bytes

    (1,1)   1
    (3,17)   1
    (9,31)   1
    (15,30)   1
    (19,1)   1
    (25,4)   1
    (30,24)   1
    (31,31)   1
 work:8 gpus:0 Getting test data
Creating problem gen
filling matrices
inside fill, using seed 4567
fill_random nrows=32ncols=32 need 32 values, invsparse = 32
fill_random after alloc values
vdim ready 
vlen ready 
ready to fill p
filling sparse
32 nonzeroes left to fill..
2 nonzeroes left to fill..
 rmm_wrap_alloc 256 bytes
 rmm_wrap_alloc 256 bytes
 rmm_wrap_alloc 256 bytes
inside fill, using seed 4567
fill_random nrows=32ncols=32 need 32 values, invsparse = 32
fill_random after alloc values
vdim ready 
vlen ready 
ready to fill p
filling sparse
32 nonzeroes left to fill..
2 nonzeroes left to fill..
 rmm_wrap_alloc 256 bytes
 rmm_wrap_alloc 256 bytes
inside fill, using seed 543210
fill_random nrows=32ncols=32 need 64 values, invsparse = 16
fill_random after alloc values
vdim ready 
vlen ready 
ready to fill p
filling sparse
64 nonzeroes left to fill..
21 nonzeroes left to fill..
 rmm_wrap_alloc 512 bytes
 rmm_wrap_alloc 512 bytes
inside fill, using seed 32
fill_random nrows=32ncols=32 need 128 values, invsparse = 8
fill_random after alloc values
vdim ready 
vlen ready 
ready to fill p
filling sparse
128 nonzeroes left to fill..
43 nonzeroes left to fill..
 rmm_wrap_alloc 256 bytes
 rmm_wrap_alloc 256 bytes
32 slots to fill
all pairs to bucket 8, no filling
done assigning buckets
Building semiring factgory
 calling stringify semiring: 0x7f1ff53e0600
inside enumify: 0x7f1ff53e0600

    GraphBLAS Semiring: semiring (user-defined)
    GraphBLAS Monoid: semiring->add (built-in)
    GraphBLAS BinaryOp: monoid->op (built-in) z=plus(x,y)
    GraphBLAS type: ztype int32_t size: 4
    GraphBLAS type: xtype int32_t size: 4
    GraphBLAS type: ytype int32_t size: 4
    identity: [   0 ] 

    GraphBLAS BinaryOp: semiring->multiply (built-in) z=times(x,y)
    GraphBLAS type: ztype int32_t size: 4
    GraphBLAS type: xtype int32_t size: 4
    GraphBLAS type: ytype int32_t size: 4
Getting semiring add
Getting semiring mult
Getting semiring add op
Getting types
Getting opcodes
Getting typecodes
Performing asserts
Invoking boolean rename
Invoking boolean rename
Invoking enumify binop
e 14
Invoking enumify monoid
Calling enumify binop
Inside plus binop code
e 11
Calling enumify identity
Calling enumify terminal
Done enumify monoid
Done invoking enumify monoid
atype
btype
ctype
Invoking enumify_mask, mtype 0x7f2028b56f40
GB_enumify_mask gets mcode: 6 Mask_struct: 0 Mask_comp: 0
got mask_ecode: 8
constructing semiring scode
before: add_ecode: 11, id_ecode: 0, term_ecode: 31, mult_ecode: 14, flipxy: 0, zcode: 6, xcode: 6, ycode: 6, mask_ecode: 8, ccode: 6, acode: 6, bcode: 6, csparsity: 0, msparsity: 0, asparsity: 0, bsparsity: 0
serialized_scode: 397409434378593792
done enumify semiring
scode=397409434378593792
done stringify semiring
 returned from  stringify semiring
 rmm_wrap_alloc 256 bytes
 rmm_wrap_alloc 256 bytes
32 slots to fill
all pairs to bucket 8, no filling
done assigning buckets
bucket 8 has 32 dots to do
LAUNCHING BUCKET CODE: 8
INside get cached file
looking for prog in file /home/cjnolet/.SuiteSparse/GraphBLAS/6.3.0/GB_semiring_397409434378593792.h
opening /home/cjnolet/.SuiteSparse/GraphBLAS/6.3.0/GB_semiring_397409434378593792.h for write
about to close
 read cache file /home/cjnolet/.SuiteSparse/GraphBLAS/6.3.0/GB_semiring_397409434378593792.h
successful_read: 1
Just closed
 jit_cache get program GB_jit_AxB_dot3_phase3_vsvs
found memory-cached prog GB_jit_AxB_dot3_phase3_vsvs
 got kernel instance AxB_dot3_phase3_vsvs_int32_t_int32_t_int32_t
found memory-cached prog AxB_dot3_phase3_vsvs_int32_t_int32_t_int32_t
Launching _Z20AxB_dot3_phase3_vsvsIiiiEvxxPxP16GB_Matrix_opaqueS2_S2_S2_i<<<1,512,0,0>>>(long,long,long*,GB_Matrix_opaque*,GB_Matrix_opaque*,GB_Matrix_opaque*,GB_Matrix_opaque*,int)
Printing bucketp
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
Done.
returned from kernel 0.421888ms

  32x32 GraphBLAS int32_t matrix, sparse (jumbled) by row
  sparsity control: sparse only
  C GPU, 32 entries, memory: 1.1 KB
  pending tuples: 0 max pending: 0 zombies: 24

    (0,6) zombie
    (1,1)   0
    (3,12) zombie
    (3,17)   0
    (4,19) zombie
    (5,19) zombie
    (6,22) zombie
    (6,24) zombie
    (8,10) zombie
    (9,19) zombie
    (9,31)   0
    (11,13) zombie
    (12,11) zombie
    (14,24) zombie
    (15,30)   1
    (16,20) zombie
    (17,30) zombie
    (18,18) zombie
    (19,1)   0
    (20,25) zombie
    (21,24) zombie
    (21,27) zombie
    (22,30) zombie
    (23,30) zombie
    (24,14) zombie
    (25,4)   1
    (26,15) zombie
    (27,28) zombie
    (28,16) zombie
    ...
Not using cuda path. M_is_hypersparse: 0, A->iso: 0, B->iso: 0, A_BITMAP: 0, B_BITMAP: 0, GB_IS_FULL(A): 0, GB_IS_FULL(B): 0, semiring header size: 32
 rmm_wrap_alloc 512 bytes
 rmm_wrap_alloc 512 bytes
 rmm_wrap_alloc 512 bytes

  32x32 GraphBLAS int32_t matrix, sparse by row
  sparsity control: sparse only
  M actual, 32 entries, memory: 1.1 KB

    (0,6)   1
    (1,1)   1
    (3,12)   1
    (3,17)   0
    (4,19)   1
    (5,19)   1
    (6,22)   0
    (6,24)   1
    (8,10)   0
    (9,19)   0
    (9,31)   0
    (11,13)   0
    (12,11)   1
    (14,24)   1
    (15,30)   1
    (16,20)   0
    (17,30)   0
    (18,18)   1
    (19,1)   0
    (20,25)   0
    (21,24)   0
    (21,27)   0
    (22,30)   0
    (23,30)   1
    (24,14)   1
    (25,4)   1
    (26,15)   1
    (27,28)   1
    (28,16)   1
    ...

  32x32 GraphBLAS int32_t matrix, sparse by row
  sparsity control: sparse only
  C GPU, 8 entries, memory: 864 bytes

    (1,1)   0
    (3,17)   0
    (9,31)   0
    (15,30)   1
    (19,1)   0
    (25,4)   1
    (30,24)   0
    (31,31)   0


  32x32 GraphBLAS int32_t matrix, sparse by row
  C_actual, 8 entries, memory: 864 bytes

    (1,1)   0
    (3,17)   0
    (9,31)   0
    (15,30)   1
    (19,1)   0
    (25,4)   1
    (30,24)   0
    (31,31)   0

 rmm_wrap_alloc 256 bytes

  32x32 GraphBLAS double matrix, sparse by row
  Diff actual, 8 entries, memory: 896 bytes

    (1,1)    0
    (3,17)    0
    (9,31)    0
    (15,30)    0
    (19,1)    0
    (25,4)    0
    (30,24)    0
    (31,31)    0


  32x32 GraphBLAS bool matrix, sparse by row
  T actual, 8 entries, memory: 840 bytes

    (1,1)   1
    (3,17)   1
    (9,31)   1
    (15,30)   1
    (19,1)   1
    (25,4)   1
    (30,24)   1
    (31,31)   1
 work:8 gpus:0 Getting test data
Creating problem gen
filling matrices
inside fill, using seed 4567
fill_random nrows=32ncols=32 need 32 values, invsparse = 32
fill_random after alloc values
vdim ready 
vlen ready 
ready to fill p
filling sparse
32 nonzeroes left to fill..
2 nonzeroes left to fill..
 rmm_wrap_alloc 256 bytes
 rmm_wrap_alloc 256 bytes
 rmm_wrap_alloc 256 bytes
inside fill, using seed 4567
fill_random nrows=32ncols=32 need 32 values, invsparse = 32
fill_random after alloc values
vdim ready 
vlen ready 
ready to fill p
filling sparse
32 nonzeroes left to fill..
2 nonzeroes left to fill..
 rmm_wrap_alloc 256 bytes
 rmm_wrap_alloc 256 bytes
inside fill, using seed 543210
fill_random nrows=32ncols=32 need 64 values, invsparse = 16
fill_random after alloc values
vdim ready 
vlen ready 
ready to fill p
filling sparse
64 nonzeroes left to fill..
21 nonzeroes left to fill..
 rmm_wrap_alloc 512 bytes
 rmm_wrap_alloc 512 bytes
inside fill, using seed 32
fill_random nrows=32ncols=32 need 128 values, invsparse = 8
fill_random after alloc values
vdim ready 
vlen ready 
ready to fill p
filling sparse
128 nonzeroes left to fill..
43 nonzeroes left to fill..
 rmm_wrap_alloc 256 bytes
 rmm_wrap_alloc 256 bytes
32 slots to fill
all pairs to bucket 9, no filling
done assigning buckets
Building semiring factgory
 calling stringify semiring: 0x7f1ff53ead00
inside enumify: 0x7f1ff53ead00

    GraphBLAS Semiring: semiring (user-defined)
    GraphBLAS Monoid: semiring->add (built-in)
    GraphBLAS BinaryOp: monoid->op (built-in) z=plus(x,y)
    GraphBLAS type: ztype int32_t size: 4
    GraphBLAS type: xtype int32_t size: 4
    GraphBLAS type: ytype int32_t size: 4
    identity: [   0 ] 

    GraphBLAS BinaryOp: semiring->multiply (built-in) z=times(x,y)
    GraphBLAS type: ztype int32_t size: 4
    GraphBLAS type: xtype int32_t size: 4
    GraphBLAS type: ytype int32_t size: 4
Getting semiring add
Getting semiring mult
Getting semiring add op
Getting types
Getting opcodes
Getting typecodes
Performing asserts
Invoking boolean rename
Invoking boolean rename
Invoking enumify binop
e 14
Invoking enumify monoid
Calling enumify binop
Inside plus binop code
e 11
Calling enumify identity
Calling enumify terminal
Done enumify monoid
Done invoking enumify monoid
atype
btype
ctype
Invoking enumify_mask, mtype 0x7f2028b56f40
GB_enumify_mask gets mcode: 6 Mask_struct: 0 Mask_comp: 0
got mask_ecode: 8
constructing semiring scode
before: add_ecode: 11, id_ecode: 0, term_ecode: 31, mult_ecode: 14, flipxy: 0, zcode: 6, xcode: 6, ycode: 6, mask_ecode: 8, ccode: 6, acode: 6, bcode: 6, csparsity: 0, msparsity: 0, asparsity: 0, bsparsity: 0
serialized_scode: 397409434378593792
done enumify semiring
scode=397409434378593792
done stringify semiring
 returned from  stringify semiring
 rmm_wrap_alloc 256 bytes
 rmm_wrap_alloc 256 bytes
32 slots to fill
all pairs to bucket 9, no filling
done assigning buckets
bucket 9 has 32 dots to do
LAUNCHING BUCKET CODE: 9
INside get cached file
looking for prog in file /home/cjnolet/.SuiteSparse/GraphBLAS/6.3.0/GB_semiring_397409434378593792.h
opening /home/cjnolet/.SuiteSparse/GraphBLAS/6.3.0/GB_semiring_397409434378593792.h for write
about to close
 read cache file /home/cjnolet/.SuiteSparse/GraphBLAS/6.3.0/GB_semiring_397409434378593792.h
successful_read: 1
Just closed
 jit_cache get program GB_jit_AxB_dot3_phase3_vsvs
found memory-cached prog GB_jit_AxB_dot3_phase3_vsvs
 got kernel instance AxB_dot3_phase3_vsvs_int32_t_int32_t_int32_t
found memory-cached prog AxB_dot3_phase3_vsvs_int32_t_int32_t_int32_t
Launching _Z20AxB_dot3_phase3_vsvsIiiiEvxxPxP16GB_Matrix_opaqueS2_S2_S2_i<<<1,512,0,0>>>(long,long,long*,GB_Matrix_opaque*,GB_Matrix_opaque*,GB_Matrix_opaque*,GB_Matrix_opaque*,int)
Printing bucketp
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
Done.
returned from kernel 0.551936ms

  32x32 GraphBLAS int32_t matrix, sparse (jumbled) by row
  sparsity control: sparse only
  C GPU, 32 entries, memory: 1.1 KB
  pending tuples: 0 max pending: 0 zombies: 24

    (0,6) zombie
    (1,1)   0
    (3,12) zombie
    (3,17)   0
    (4,19) zombie
    (5,19) zombie
    (6,22) zombie
    (6,24) zombie
    (8,10) zombie
    (9,19) zombie
    (9,31)   0
    (11,13) zombie
    (12,11) zombie
    (14,24) zombie
    (15,30)   1
    (16,20) zombie
    (17,30) zombie
    (18,18) zombie
    (19,1)   0
    (20,25) zombie
    (21,24) zombie
    (21,27) zombie
    (22,30) zombie
    (23,30) zombie
    (24,14) zombie
    (25,4)   1
    (26,15) zombie
    (27,28) zombie
    (28,16) zombie
    ...
Not using cuda path. M_is_hypersparse: 0, A->iso: 0, B->iso: 0, A_BITMAP: 0, B_BITMAP: 0, GB_IS_FULL(A): 0, GB_IS_FULL(B): 0, semiring header size: 32
 rmm_wrap_alloc 512 bytes
 rmm_wrap_alloc 512 bytes
 rmm_wrap_alloc 512 bytes

  32x32 GraphBLAS int32_t matrix, sparse by row
  sparsity control: sparse only
  M actual, 32 entries, memory: 1.1 KB

    (0,6)   1
    (1,1)   1
    (3,12)   1
    (3,17)   0
    (4,19)   1
    (5,19)   1
    (6,22)   0
    (6,24)   1
    (8,10)   0
    (9,19)   0
    (9,31)   0
    (11,13)   0
    (12,11)   1
    (14,24)   1
    (15,30)   1
    (16,20)   0
    (17,30)   0
    (18,18)   1
    (19,1)   0
    (20,25)   0
    (21,24)   0
    (21,27)   0
    (22,30)   0
    (23,30)   1
    (24,14)   1
    (25,4)   1
    (26,15)   1
    (27,28)   1
    (28,16)   1
    ...

  32x32 GraphBLAS int32_t matrix, sparse by row
  sparsity control: sparse only
  C GPU, 8 entries, memory: 864 bytes

    (1,1)   0
    (3,17)   0
    (9,31)   0
    (15,30)   1
    (19,1)   0
    (25,4)   1
    (30,24)   0
    (31,31)   0


  32x32 GraphBLAS int32_t matrix, sparse by row
  C_actual, 8 entries, memory: 864 bytes

    (1,1)   0
    (3,17)   0
    (9,31)   0
    (15,30)   1
    (19,1)   0
    (25,4)   1
    (30,24)   0
    (31,31)   0

 rmm_wrap_alloc 256 bytes

  32x32 GraphBLAS double matrix, sparse by row
  Diff actual, 8 entries, memory: 896 bytes

    (1,1)    0
    (3,17)    0
    (9,31)    0
    (15,30)    0
    (19,1)    0
    (25,4)    0
    (30,24)    0
    (31,31)    0


  32x32 GraphBLAS bool matrix, sparse by row
  T actual, 8 entries, memory: 840 bytes

    (1,1)   1
    (3,17)   1
    (9,31)   1
    (15,30)   1
    (19,1)   1
    (25,4)   1
    (30,24)   1
    (31,31)   1
 work:8 gpus:0 Getting test data
Creating problem gen
filling matrices
inside fill, using seed 4567
fill_random nrows=32ncols=32 need 32 values, invsparse = 32
fill_random after alloc values
vdim ready 
vlen ready 
ready to fill p
filling sparse
32 nonzeroes left to fill..
2 nonzeroes left to fill..
 rmm_wrap_alloc 256 bytes
 rmm_wrap_alloc 256 bytes
 rmm_wrap_alloc 256 bytes
inside fill, using seed 4567
fill_random nrows=32ncols=32 need 32 values, invsparse = 32
fill_random after alloc values
vdim ready 
vlen ready 
ready to fill p
filling sparse
32 nonzeroes left to fill..
2 nonzeroes left to fill..
 rmm_wrap_alloc 256 bytes
 rmm_wrap_alloc 256 bytes
inside fill, using seed 543210
fill_random nrows=32ncols=32 need 64 values, invsparse = 16
fill_random after alloc values
vdim ready 
vlen ready 
ready to fill p
filling sparse
64 nonzeroes left to fill..
21 nonzeroes left to fill..
 rmm_wrap_alloc 512 bytes
 rmm_wrap_alloc 512 bytes
inside fill, using seed 32
fill_random nrows=32ncols=32 need 128 values, invsparse = 8
fill_random after alloc values
vdim ready 
vlen ready 
ready to fill p
filling sparse
128 nonzeroes left to fill..
43 nonzeroes left to fill..
 rmm_wrap_alloc 256 bytes
 rmm_wrap_alloc 256 bytes
32 slots to fill
all pairs to bucket 10, no filling
done assigning buckets
Building semiring factgory
 calling stringify semiring: 0x7f1ff53ebe00
inside enumify: 0x7f1ff53ebe00

    GraphBLAS Semiring: semiring (user-defined)
    GraphBLAS Monoid: semiring->add (built-in)
    GraphBLAS BinaryOp: monoid->op (built-in) z=plus(x,y)
    GraphBLAS type: ztype int32_t size: 4
    GraphBLAS type: xtype int32_t size: 4
    GraphBLAS type: ytype int32_t size: 4
    identity: [   0 ] 

    GraphBLAS BinaryOp: semiring->multiply (built-in) z=times(x,y)
    GraphBLAS type: ztype int32_t size: 4
    GraphBLAS type: xtype int32_t size: 4
    GraphBLAS type: ytype int32_t size: 4
Getting semiring add
Getting semiring mult
Getting semiring add op
Getting types
Getting opcodes
Getting typecodes
Performing asserts
Invoking boolean rename
Invoking boolean rename
Invoking enumify binop
e 14
Invoking enumify monoid
Calling enumify binop
Inside plus binop code
e 11
Calling enumify identity
Calling enumify terminal
Done enumify monoid
Done invoking enumify monoid
atype
btype
ctype
Invoking enumify_mask, mtype 0x7f2028b56f40
GB_enumify_mask gets mcode: 6 Mask_struct: 0 Mask_comp: 0
got mask_ecode: 8
constructing semiring scode
before: add_ecode: 11, id_ecode: 0, term_ecode: 31, mult_ecode: 14, flipxy: 0, zcode: 6, xcode: 6, ycode: 6, mask_ecode: 8, ccode: 6, acode: 6, bcode: 6, csparsity: 0, msparsity: 0, asparsity: 0, bsparsity: 0
serialized_scode: 397409434378593792
done enumify semiring
scode=397409434378593792
done stringify semiring
 returned from  stringify semiring
 rmm_wrap_alloc 256 bytes
 rmm_wrap_alloc 256 bytes
32 slots to fill
all pairs to bucket 10, no filling
done assigning buckets
bucket 10 has 32 dots to do
LAUNCHING BUCKET CODE: 10
INside get cached file
looking for prog in file /home/cjnolet/.SuiteSparse/GraphBLAS/6.3.0/GB_semiring_397409434378593792.h
opening /home/cjnolet/.SuiteSparse/GraphBLAS/6.3.0/GB_semiring_397409434378593792.h for write
about to close
 read cache file /home/cjnolet/.SuiteSparse/GraphBLAS/6.3.0/GB_semiring_397409434378593792.h
successful_read: 1
Just closed
 jit_cache get program GB_jit_AxB_dot3_phase3_vsvs
found memory-cached prog GB_jit_AxB_dot3_phase3_vsvs
 got kernel instance AxB_dot3_phase3_vsvs_int32_t_int32_t_int32_t
found memory-cached prog AxB_dot3_phase3_vsvs_int32_t_int32_t_int32_t
Launching _Z20AxB_dot3_phase3_vsvsIiiiEvxxPxP16GB_Matrix_opaqueS2_S2_S2_i<<<1,512,0,0>>>(long,long,long*,GB_Matrix_opaque*,GB_Matrix_opaque*,GB_Matrix_opaque*,GB_Matrix_opaque*,int)
Printing bucketp
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
Done.
returned from kernel 0.4096ms

  32x32 GraphBLAS int32_t matrix, sparse (jumbled) by row
  sparsity control: sparse only
  C GPU, 32 entries, memory: 1.1 KB
  pending tuples: 0 max pending: 0 zombies: 24

    (0,6) zombie
    (1,1)   0
    (3,12) zombie
    (3,17)   0
    (4,19) zombie
    (5,19) zombie
    (6,22) zombie
    (6,24) zombie
    (8,10) zombie
    (9,19) zombie
    (9,31)   0
    (11,13) zombie
    (12,11) zombie
    (14,24) zombie
    (15,30)   1
    (16,20) zombie
    (17,30) zombie
    (18,18) zombie
    (19,1)   0
    (20,25) zombie
    (21,24) zombie
    (21,27) zombie
    (22,30) zombie
    (23,30) zombie
    (24,14) zombie
    (25,4)   1
    (26,15) zombie
    (27,28) zombie
    (28,16) zombie
    ...
Not using cuda path. M_is_hypersparse: 0, A->iso: 0, B->iso: 0, A_BITMAP: 0, B_BITMAP: 0, GB_IS_FULL(A): 0, GB_IS_FULL(B): 0, semiring header size: 32
 rmm_wrap_alloc 512 bytes
 rmm_wrap_alloc 512 bytes
 rmm_wrap_alloc 512 bytes

  32x32 GraphBLAS int32_t matrix, sparse by row
  sparsity control: sparse only
  M actual, 32 entries, memory: 1.1 KB

    (0,6)   1
    (1,1)   1
    (3,12)   1
    (3,17)   0
    (4,19)   1
    (5,19)   1
    (6,22)   0
    (6,24)   1
    (8,10)   0
    (9,19)   0
    (9,31)   0
    (11,13)   0
    (12,11)   1
    (14,24)   1
    (15,30)   1
    (16,20)   0
    (17,30)   0
    (18,18)   1
    (19,1)   0
    (20,25)   0
    (21,24)   0
    (21,27)   0
    (22,30)   0
    (23,30)   1
    (24,14)   1
    (25,4)   1
    (26,15)   1
    (27,28)   1
    (28,16)   1
    ...

  32x32 GraphBLAS int32_t matrix, sparse by row
  sparsity control: sparse only
  C GPU, 8 entries, memory: 864 bytes

    (1,1)   0
    (3,17)   0
    (9,31)   0
    (15,30)   1
    (19,1)   0
    (25,4)   1
    (30,24)   0
    (31,31)   0


  32x32 GraphBLAS int32_t matrix, sparse by row
  C_actual, 8 entries, memory: 864 bytes

    (1,1)   0
    (3,17)   0
    (9,31)   0
    (15,30)   1
    (19,1)   0
    (25,4)   1
    (30,24)   0
    (31,31)   0

 rmm_wrap_alloc 256 bytes

  32x32 GraphBLAS double matrix, sparse by row
  Diff actual, 8 entries, memory: 896 bytes

    (1,1)    0
    (3,17)    0
    (9,31)    0
    (15,30)    0
    (19,1)    0
    (25,4)    0
    (30,24)    0
    (31,31)    0


  32x32 GraphBLAS bool matrix, sparse by row
  T actual, 8 entries, memory: 840 bytes

    (1,1)   1
    (3,17)   1
    (9,31)   1
    (15,30)   1
    (19,1)   1
    (25,4)   1
    (30,24)   1
    (31,31)   1
 work:8 gpus:0 Getting test data
Creating problem gen
filling matrices
inside fill, using seed 4567
fill_random nrows=32ncols=32 need 32 values, invsparse = 32
fill_random after alloc values
vdim ready 
vlen ready 
ready to fill p
filling sparse
32 nonzeroes left to fill..
2 nonzeroes left to fill..
 rmm_wrap_alloc 256 bytes
 rmm_wrap_alloc 256 bytes
 rmm_wrap_alloc 256 bytes
inside fill, using seed 4567
fill_random nrows=32ncols=32 need 32 values, invsparse = 32
fill_random after alloc values
vdim ready 
vlen ready 
ready to fill p
filling sparse
32 nonzeroes left to fill..
2 nonzeroes left to fill..
 rmm_wrap_alloc 256 bytes
 rmm_wrap_alloc 256 bytes
inside fill, using seed 543210
fill_random nrows=32ncols=32 need 160 values, invsparse = 7
fill_random after alloc values
vdim ready 
vlen ready 
ready to fill p
filling sparse
160 nonzeroes left to fill..
51 nonzeroes left to fill..
inside fill, using seed 32
fill_random nrows=32ncols=32 need 64 values, invsparse = 16
fill_random after alloc values
vdim ready 
vlen ready 
ready to fill p
filling sparse
64 nonzeroes left to fill..
20 nonzeroes left to fill..
 rmm_wrap_alloc 512 bytes
 rmm_wrap_alloc 256 bytes
 rmm_wrap_alloc 256 bytes
 rmm_wrap_alloc 256 bytes
32 slots to fill
all pairs to bucket 11, no filling
done assigning buckets
Building semiring factgory
 calling stringify semiring: 0x7f1ff53ee300
inside enumify: 0x7f1ff53ee300

    GraphBLAS Semiring: semiring (user-defined)
    GraphBLAS Monoid: semiring->add (built-in)
    GraphBLAS BinaryOp: monoid->op (built-in) z=plus(x,y)
    GraphBLAS type: ztype int32_t size: 4
    GraphBLAS type: xtype int32_t size: 4
    GraphBLAS type: ytype int32_t size: 4
    identity: [   0 ] 

    GraphBLAS BinaryOp: semiring->multiply (built-in) z=times(x,y)
    GraphBLAS type: ztype int32_t size: 4
    GraphBLAS type: xtype int32_t size: 4
    GraphBLAS type: ytype int32_t size: 4
Getting semiring add
Getting semiring mult
Getting semiring add op
Getting types
Getting opcodes
Getting typecodes
Performing asserts
Invoking boolean rename
Invoking boolean rename
Invoking enumify binop
e 14
Invoking enumify monoid
Calling enumify binop
Inside plus binop code
e 11
Calling enumify identity
Calling enumify terminal
Done enumify monoid
Done invoking enumify monoid
atype
btype
ctype
Invoking enumify_mask, mtype 0x7f2028b56f40
GB_enumify_mask gets mcode: 6 Mask_struct: 0 Mask_comp: 0
got mask_ecode: 8
constructing semiring scode
before: add_ecode: 11, id_ecode: 0, term_ecode: 31, mult_ecode: 14, flipxy: 0, zcode: 6, xcode: 6, ycode: 6, mask_ecode: 8, ccode: 6, acode: 6, bcode: 6, csparsity: 0, msparsity: 0, asparsity: 0, bsparsity: 0
serialized_scode: 397409434378593792
done enumify semiring
scode=397409434378593792
done stringify semiring
 returned from  stringify semiring
 rmm_wrap_alloc 256 bytes
 rmm_wrap_alloc 256 bytes
32 slots to fill
all pairs to bucket 11, no filling
done assigning buckets
bucket 11 has 32 dots to do
LAUNCHING BUCKET CODE: 11
INside get cached file
looking for prog in file /home/cjnolet/.SuiteSparse/GraphBLAS/6.3.0/GB_semiring_397409434378593792.h
opening /home/cjnolet/.SuiteSparse/GraphBLAS/6.3.0/GB_semiring_397409434378593792.h for write
about to close
 read cache file /home/cjnolet/.SuiteSparse/GraphBLAS/6.3.0/GB_semiring_397409434378593792.h
successful_read: 1
Just closed
 jit_cache get program GB_jit_AxB_dot3_phase3_mp
found memory-cached prog GB_jit_AxB_dot3_phase3_mp
 got kernel instance AxB_dot3_phase3_mp_int32_t_int32_t_int32_t
found memory-cached prog AxB_dot3_phase3_mp_int32_t_int32_t_int32_t
Launching _Z18AxB_dot3_phase3_mpIiiiEvxxPxP16GB_Matrix_opaqueS2_S2_S2_i<<<1,32,0,0>>>(long,long,long*,GB_Matrix_opaque*,GB_Matrix_opaque*,GB_Matrix_opaque*,GB_Matrix_opaque*,int)
warp 0 zombie count = 27, nzombies = 0
 Czombie = 27
Printing bucketp
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
Done.
returned from kernel 1.20934ms

  32x32 GraphBLAS int32_t matrix, sparse (jumbled) by row
  sparsity control: sparse only
  C GPU, 32 entries, memory: 1.1 KB
  pending tuples: 0 max pending: 0 zombies: 27

    (0,6) zombie
    (1,1)   1
    (3,12) zombie
    (3,17) zombie
    (4,19) zombie
    (5,19) zombie
    (6,22) zombie
    (6,24)   0
    (8,10) zombie
    (9,19) zombie
    (9,31)   0
    (11,13) zombie
    (12,11) zombie
    (14,24) zombie
    (15,30) zombie
    (16,20)   0
    (17,30) zombie
    (18,18) zombie
    (19,1) zombie
    (20,25) zombie
    (21,24) zombie
    (21,27) zombie
    (22,30) zombie
    (23,30) zombie
    (24,14) zombie
    (25,4)   1
    (26,15) zombie
    (27,28) zombie
    (28,16) zombie
    ...
Not using cuda path. M_is_hypersparse: 0, A->iso: 0, B->iso: 0, A_BITMAP: 0, B_BITMAP: 0, GB_IS_FULL(A): 0, GB_IS_FULL(B): 0, semiring header size: 32
 rmm_wrap_alloc 512 bytes
 rmm_wrap_alloc 512 bytes
 rmm_wrap_alloc 512 bytes

  32x32 GraphBLAS int32_t matrix, sparse by row
  sparsity control: sparse only
  M actual, 32 entries, memory: 1.1 KB

    (0,6)   1
    (1,1)   1
    (3,12)   1
    (3,17)   0
    (4,19)   1
    (5,19)   1
    (6,22)   0
    (6,24)   1
    (8,10)   0
    (9,19)   0
    (9,31)   0
    (11,13)   0
    (12,11)   1
    (14,24)   1
    (15,30)   1
    (16,20)   0
    (17,30)   0
    (18,18)   1
    (19,1)   0
    (20,25)   0
    (21,24)   0
    (21,27)   0
    (22,30)   0
    (23,30)   1
    (24,14)   1
    (25,4)   1
    (26,15)   1
    (27,28)   1
    (28,16)   1
    ...

  32x32 GraphBLAS int32_t matrix, sparse by row
  sparsity control: sparse only
  C GPU, 5 entries, memory: 864 bytes

    (1,1)   1
    (6,24)   0
    (9,31)   0
    (16,20)   0
    (25,4)   1


  32x32 GraphBLAS int32_t matrix, sparse by row
  C_actual, 5 entries, memory: 864 bytes

    (1,1)   1
    (6,24)   0
    (9,31)   0
    (16,20)   0
    (25,4)   1

 rmm_wrap_alloc 256 bytes

  32x32 GraphBLAS double matrix, sparse by row
  Diff actual, 5 entries, memory: 896 bytes

    (1,1)    0
    (6,24)    0
    (9,31)    0
    (16,20)    0
    (25,4)    0


  32x32 GraphBLAS bool matrix, sparse by row
  T actual, 5 entries, memory: 840 bytes

    (1,1)   1
    (6,24)   1
    (9,31)   1
    (16,20)   1
    (25,4)   1
 work:5 gpus:0 [       OK ] AxB_dot3_tests_PLUS_TIMES_3.tinyxtinyPLUS_TIMES_Cint32_tMint32_tAint32_tBint32_tXint32_tYint32_tZint32_t (20 ms)
[ RUN      ] AxB_dot3_tests_PLUS_TIMES_3.smallxsmallPLUS_TIMES_Cint32_tMint32_tAint32_tBint32_tXint32_tYint32_tZint32_t
Getting test data
Creating problem gen
filling matrices
inside fill, using seed 4567
fill_random nrows=1024ncols=1024 need 1024 values, invsparse = 1024
fill_random after alloc values
vdim ready 
vlen ready 
ready to fill p
filling sparse
1024 nonzeroes left to fill..
35 nonzeroes left to fill..
inside fill, using seed 4567
fill_random nrows=1024ncols=1024 need 1024 values, invsparse = 1024
fill_random after alloc values
vdim ready 
vlen ready 
ready to fill p
filling sparse
1024 nonzeroes left to fill..
35 nonzeroes left to fill..
inside fill, using seed 543210
fill_random nrows=1024ncols=1024 need 1048576 values, invsparse = 1
fill_random after alloc values
vdim ready 
vlen ready 
ready to fill p
filling dense
 rmm_wrap_alloc 4096 bytes
 rmm_wrap_alloc 524288 bytes
 rmm_wrap_alloc 524288 bytes
 rmm_wrap_alloc 1048576 bytes
 rmm_wrap_alloc 1048576 bytes
 rmm_wrap_alloc 524288 bytes
 rmm_wrap_alloc 2097152 bytes
 rmm_wrap_alloc 2097152 bytes
 rmm_wrap_alloc 1048576 bytes
 rmm_wrap_alloc 4194304 bytes
 rmm_wrap_alloc 4194304 bytes
 rmm_wrap_alloc 2097152 bytes
 rmm_wrap_alloc 8388608 bytes
 rmm_wrap_alloc 8388608 bytes
 rmm_wrap_alloc 4194304 bytes
 rmm_wrap_alloc 8388608 bytes
 rmm_wrap_alloc 4194304 bytes
 rmm_wrap_alloc 8388608 bytes
inside fill, using seed 32
fill_random nrows=1024ncols=1024 need 1048576 values, invsparse = 1
fill_random after alloc values
vdim ready 
vlen ready 
ready to fill p
filling dense
 rmm_wrap_alloc 16384 bytes
 rmm_wrap_alloc 524288 bytes
 rmm_wrap_alloc 524288 bytes
 rmm_wrap_alloc 1048576 bytes
 rmm_wrap_alloc 1048576 bytes
 rmm_wrap_alloc 524288 bytes
 rmm_wrap_alloc 2097152 bytes
 rmm_wrap_alloc 2097152 bytes
 rmm_wrap_alloc 1048576 bytes
 rmm_wrap_alloc 4194304 bytes
 rmm_wrap_alloc 4194304 bytes
 rmm_wrap_alloc 2097152 bytes
 rmm_wrap_alloc 8388608 bytes
 rmm_wrap_alloc 8388608 bytes
 rmm_wrap_alloc 4194304 bytes
 rmm_wrap_alloc 8388608 bytes
 rmm_wrap_alloc 4194304 bytes
 rmm_wrap_alloc 8388608 bytes
1024 slots to fill
all pairs to bucket 1, no filling
done assigning buckets
Building semiring factgory
 calling stringify semiring: 0x7f1ff53ee200
inside enumify: 0x7f1ff53ee200

    GraphBLAS Semiring: semiring (user-defined)
    GraphBLAS Monoid: semiring->add (built-in)
    GraphBLAS BinaryOp: monoid->op (built-in) z=plus(x,y)
    GraphBLAS type: ztype int32_t size: 4
    GraphBLAS type: xtype int32_t size: 4
    GraphBLAS type: ytype int32_t size: 4
    identity: [   0 ] 

    GraphBLAS BinaryOp: semiring->multiply (built-in) z=times(x,y)
    GraphBLAS type: ztype int32_t size: 4
    GraphBLAS type: xtype int32_t size: 4
    GraphBLAS type: ytype int32_t size: 4
Getting semiring add
Getting semiring mult
Getting semiring add op
Getting types
Getting opcodes
Getting typecodes
Performing asserts
Invoking boolean rename
Invoking boolean rename
Invoking enumify binop
e 14
Invoking enumify monoid
Calling enumify binop
Inside plus binop code
e 11
Calling enumify identity
Calling enumify terminal
Done enumify monoid
Done invoking enumify monoid
atype
btype
ctype
Invoking enumify_mask, mtype 0x7f2028b56f40
GB_enumify_mask gets mcode: 6 Mask_struct: 0 Mask_comp: 0
got mask_ecode: 8
constructing semiring scode
before: add_ecode: 11, id_ecode: 0, term_ecode: 31, mult_ecode: 14, flipxy: 0, zcode: 6, xcode: 6, ycode: 6, mask_ecode: 8, ccode: 6, acode: 6, bcode: 6, csparsity: 0, msparsity: 0, asparsity: 0, bsparsity: 0
serialized_scode: 397409434378593792
done enumify semiring
scode=397409434378593792
done stringify semiring
 returned from  stringify semiring
 rmm_wrap_alloc 256 bytes
 rmm_wrap_alloc 8192 bytes
1024 slots to fill
all pairs to bucket 1, no filling
done assigning buckets
bucket 1 has 1024 dots to do
LAUNCHING BUCKET CODE: 1
INside get cached file
looking for prog in file /home/cjnolet/.SuiteSparse/GraphBLAS/6.3.0/GB_semiring_397409434378593792.h
opening /home/cjnolet/.SuiteSparse/GraphBLAS/6.3.0/GB_semiring_397409434378593792.h for write
about to close
 read cache file /home/cjnolet/.SuiteSparse/GraphBLAS/6.3.0/GB_semiring_397409434378593792.h
successful_read: 1
Just closed
 jit_cache get program GB_jit_AxB_dot3_phase3_dndn
found memory-cached prog GB_jit_AxB_dot3_phase3_dndn
 got kernel instance AxB_dot3_phase3_dndn_int32_t_int32_t_int32_t
found memory-cached prog AxB_dot3_phase3_dndn_int32_t_int32_t_int32_t
Launching _Z20AxB_dot3_phase3_dndnIiiiEvxxPxP16GB_Matrix_opaqueS2_S2_S2_i<<<32,32,0,0>>>(long,long,long*,GB_Matrix_opaque*,GB_Matrix_opaque*,GB_Matrix_opaque*,GB_Matrix_opaque*,int)
tid=0, i,j = 569,22  nnzA= 1024, nnzB=1024
tid=0, i,j = 192,13  nnzA= 1024, nnzB=1024
tid=0, i,j = 103,18  nnzA= 1024, nnzB=1024
tid=0, i,j = 886,19  nnzA= 1024, nnzB=1024
tid=0, i,j = 905,24  nnzA= 1024, nnzB=1024
tid=0, i,j = 975,21  nnzA= 1024, nnzB=1024
tid=0, i,j = 996,6  nnzA= 1024, nnzB=1024
tid=0, i,j = 107,28  nnzA= 1024, nnzB=1024
tid=0, i,j = 568,15  nnzA= 1024, nnzB=1024
tid=0, i,j = 187,9  nnzA= 1024, nnzB=1024
tid=0, i,j = 574,0  nnzA= 1024, nnzB=1024
tid=0, i,j = 928,17  nnzA= 1024, nnzB=1024
tid=0, i,j = 428,26  nnzA= 1024, nnzB=1024
tid=0, i,j = 310,23  nnzA= 1024, nnzB=1024
tid=0, i,j = 376,2  nnzA= 1024, nnzB=1024
tid=0, i,j = 560,5  nnzA= 1024, nnzB=1024
tid=0, i,j = 896,8  nnzA= 1024, nnzB=1024
tid=0, i,j = 446,10  nnzA= 1024, nnzB=1024
tid=0, i,j = 953,12  nnzA= 1024, nnzB=1024
tid=0, i,j = 821,19  nnzA= 1024, nnzB=1024
tid=0, i,j = 46,11  nnzA= 1024, nnzB=1024
tid=0, i,j = 421,14  nnzA= 1024, nnzB=1024
tid=0, i,j = 479,21  nnzA= 1024, nnzB=1024
tid=0, i,j = 397,12  nnzA= 1024, nnzB=1024
tid=0, i,j = 904,16  nnzA= 1024, nnzB=1024
tid=0, i,j = 241,25  nnzA= 1024, nnzB=1024
tid=0, i,j = 474,20  nnzA= 1024, nnzB=1024
tid=0, i,j = 788,16  nnzA= 1024, nnzB=1024
tid=0, i,j = 478,0  nnzA= 1024, nnzB=1024
tid=0, i,j = 666,7  nnzA= 1024, nnzB=1024
tid=0, i,j = 955,11  nnzA= 1024, nnzB=1024
tid=0, i,j = 183,7  nnzA= 1024, nnzB=1024
tid=0, i,j = 960,54  nnzA= 1024, nnzB=1024
tid=0, i,j = 476,49  nnzA= 1024, nnzB=1024
tid=0, i,j = 893,57  nnzA= 1024, nnzB=1024
tid=0, i,j = 108,59  nnzA= 1024, nnzB=1024
tid=0, i,j = 940,53  nnzA= 1024, nnzB=1024
tid=0, i,j = 804,34  nnzA= 1024, nnzB=1024
tid=0, i,j = 70,47  nnzA= 1024, nnzB=1024
tid=0, i,j = 846,57  nnzA= 1024, nnzB=1024
tid=0, i,j = 771,62  nnzA= 1024, nnzB=1024
tid=0, i,j = 35,58  nnzA= 1024, nnzB=1024
tid=0, i,j = 694,30  nnzA= 1024, nnzB=1024
tid=0, i,j = 999,52  nnzA= 1024, nnzB=1024
tid=0, i,j = 590,61  nnzA= 1024, nnzB=1024
tid=0, i,j = 558,54  nnzA= 1024, nnzB=1024
tid=0, i,j = 121,32  nnzA= 1024, nnzB=1024
tid=0, i,j = 138,38  nnzA= 1024, nnzB=1024
tid=0, i,j = 568,41  nnzA= 1024, nnzB=1024
tid=0, i,j = 81,33  nnzA= 1024, nnzB=1024
tid=0, i,j = 698,39  nnzA= 1024, nnzB=1024
tid=0, i,j = 950,40  nnzA= 1024, nnzB=1024
tid=0, i,j = 208,46  nnzA= 1024, nnzB=1024
tid=0, i,j = 336,48  nnzA= 1024, nnzB=1024
tid=0, i,j = 90,56  nnzA= 1024, nnzB=1024
tid=0, i,j = 798,43  nnzA= 1024, nnzB=1024
tid=0, i,j = 556,51  nnzA= 1024, nnzB=1024
tid=0, i,j = 609,37  nnzA= 1024, nnzB=1024
tid=0, i,j = 441,28  nnzA= 1024, nnzB=1024
tid=0, i,j = 479,60  nnzA= 1024, nnzB=1024
tid=0, i,j = 979,55  nnzA= 1024, nnzB=1024
tid=0, i,j = 35,50  nnzA= 1024, nnzB=1024
tid=0, i,j = 324,42  nnzA= 1024, nnzB=1024
tid=0, i,j = 451,36  nnzA= 1024, nnzB=1024
tid=0, i,j = 665,73  nnzA= 1024, nnzB=1024
tid=0, i,j = 694,65  nnzA= 1024, nnzB=1024
tid=0, i,j = 297,72  nnzA= 1024, nnzB=1024
tid=0, i,j = 50,63  nnzA= 1024, nnzB=1024
tid=0, i,j = 324,68  nnzA= 1024, nnzB=1024
tid=0, i,j = 234,91  nnzA= 1024, nnzB=1024
tid=0, i,j = 637,94  nnzA= 1024, nnzB=1024
tid=0, i,j = 690,92  nnzA= 1024, nnzB=1024
tid=0, i,j = 243,82  nnzA= 1024, nnzB=1024
tid=0, i,j = 90,78  nnzA= 1024, nnzB=1024
tid=0, i,j = 411,67  nnzA= 1024, nnzB=1024
tid=0, i,j = 825,89  nnzA= 1024, nnzB=1024
tid=0, i,j = 218,92  nnzA= 1024, nnzB=1024
tid=0, i,j = 748,97  nnzA= 1024, nnzB=1024
tid=0, i,j = 486,93  nnzA= 1024, nnzB=1024
tid=0, i,j = 268,64  nnzA= 1024, nnzB=1024
tid=0, i,j = 657,87  nnzA= 1024, nnzB=1024
tid=0, i,j = 37,90  nnzA= 1024, nnzB=1024
tid=0, i,j = 719,66  nnzA= 1024, nnzB=1024
tid=0, i,j = 564,96  nnzA= 1024, nnzB=1024
tid=0, i,j = 539,70  nnzA= 1024, nnzB=1024
tid=0, i,j = 754,81  nnzA= 1024, nnzB=1024
tid=0, i,j = 228,71  nnzA= 1024, nnzB=1024
tid=0, i,j = 74,92  nnzA= 1024, nnzB=1024
tid=0, i,j = 433,77  nnzA= 1024, nnzB=1024
tid=0, i,j = 248,76  nnzA= 1024, nnzB=1024
tid=0, i,j = 104,86  nnzA= 1024, nnzB=1024
tid=0, i,j = 722,94  nnzA= 1024, nnzB=1024
tid=0, i,j = 519,91  nnzA= 1024, nnzB=1024
tid=0, i,j = 402,110  nnzA= 1024, nnzB=1024
tid=0, i,j = 609,102  nnzA= 1024, nnzB=1024
tid=0, i,j = 253,84  nnzA= 1024, nnzB=1024
tid=0, i,j = 884,109  nnzA= 1024, nnzB=1024
tid=0, i,j = 477,69  nnzA= 1024, nnzB=1024
tid=0, i,j = 326,99  nnzA= 1024, nnzB=1024
tid=0, i,j = 855,75  nnzA= 1024, nnzB=1024
tid=0, i,j = 652,106  nnzA= 1024, nnzB=1024
tid=0, i,j = 820,128  nnzA= 1024, nnzB=1024
tid=0, i,j = 240,115  nnzA= 1024, nnzB=1024
tid=0, i,j = 177,125  nnzA= 1024, nnzB=1024
tid=0, i,j = 554,121  nnzA= 1024, nnzB=1024
tid=0, i,j = 278,113  nnzA= 1024, nnzB=1024
tid=0, i,j = 99,118  nnzA= 1024, nnzB=1024
tid=0, i,j = 621,123  nnzA= 1024, nnzB=1024
tid=0, i,j = 623,130  nnzA= 1024, nnzB=1024
tid=0, i,j = 644,104  nnzA= 1024, nnzB=1024
tid=0, i,j = 131,108  nnzA= 1024, nnzB=1024
tid=0, i,j = 338,117  nnzA= 1024, nnzB=1024
tid=0, i,j = 281,100  nnzA= 1024, nnzB=1024
tid=0, i,j = 36,126  nnzA= 1024, nnzB=1024
tid=0, i,j = 660,129  nnzA= 1024, nnzB=1024
tid=0, i,j = 522,107  nnzA= 1024, nnzB=1024
tid=0, i,j = 779,112  nnzA= 1024, nnzB=1024
tid=0, i,j = 151,122  nnzA= 1024, nnzB=1024
tid=0, i,j = 477,120  nnzA= 1024, nnzB=1024
tid=0, i,j = 127,112  nnzA= 1024, nnzB=1024
tid=0, i,j = 621,103  nnzA= 1024, nnzB=1024
tid=0, i,j = 519,114  nnzA= 1024, nnzB=1024
tid=0, i,j = 219,117  nnzA= 1024, nnzB=1024
tid=0, i,j = 288,138  nnzA= 1024, nnzB=1024
tid=0, i,j = 284,139  nnzA= 1024, nnzB=1024
tid=0, i,j = 355,131  nnzA= 1024, nnzB=1024
tid=0, i,j = 835,128  nnzA= 1024, nnzB=1024
tid=0, i,j = 715,121  nnzA= 1024, nnzB=1024
tid=0, i,j = 198,116  nnzA= 1024, nnzB=1024
tid=0, i,j = 821,134  nnzA= 1024, nnzB=1024
tid=0, i,j = 905,111  nnzA= 1024, nnzB=1024
tid=0, i,j = 239,107  nnzA= 1024, nnzB=1024
tid=0, i,j = 807,130  nnzA= 1024, nnzB=1024
tid=0, i,j = 959,158  nnzA= 1024, nnzB=1024
tid=0, i,j = 714,157  nnzA= 1024, nnzB=1024
tid=0, i,j = 123,143  nnzA= 1024, nnzB=1024
tid=0, i,j = 87,142  nnzA= 1024, nnzB=1024
tid=0, i,j = 290,156  nnzA= 1024, nnzB=1024
tid=0, i,j = 995,146  nnzA= 1024, nnzB=1024
tid=0, i,j = 816,163  nnzA= 1024, nnzB=1024
tid=0, i,j = 949,149  nnzA= 1024, nnzB=1024
tid=0, i,j = 492,133  nnzA= 1024, nnzB=1024
tid=0, i,j = 974,157  nnzA= 1024, nnzB=1024
tid=0, i,j = 834,137  nnzA= 1024, nnzB=1024
tid=0, i,j = 253,131  nnzA= 1024, nnzB=1024
tid=0, i,j = 194,146  nnzA= 1024, nnzB=1024
tid=0, i,j = 601,162  nnzA= 1024, nnzB=1024
tid=0, i,j = 108,136  nnzA= 1024, nnzB=1024
tid=0, i,j = 199,141  nnzA= 1024, nnzB=1024
tid=0, i,j = 357,148  nnzA= 1024, nnzB=1024
tid=0, i,j = 484,151  nnzA= 1024, nnzB=1024
tid=0, i,j = 570,132  nnzA= 1024, nnzB=1024
tid=0, i,j = 225,142  nnzA= 1024, nnzB=1024
tid=0, i,j = 552,145  nnzA= 1024, nnzB=1024
tid=0, i,j = 0,174  nnzA= 1024, nnzB=1024
tid=0, i,j = 887,140  nnzA= 1024, nnzB=1024
tid=0, i,j = 595,174  nnzA= 1024, nnzB=1024
tid=0, i,j = 801,166  nnzA= 1024, nnzB=1024
tid=0, i,j = 297,160  nnzA= 1024, nnzB=1024
tid=0, i,j = 717,150  nnzA= 1024, nnzB=1024
tid=0, i,j = 574,144  nnzA= 1024, nnzB=1024
tid=0, i,j = 295,135  nnzA= 1024, nnzB=1024
tid=0, i,j = 945,139  nnzA= 1024, nnzB=1024
tid=0, i,j = 901,169  nnzA= 1024, nnzB=1024
tid=0, i,j = 221,164  nnzA= 1024, nnzB=1024
tid=0, i,j = 111,189  nnzA= 1024, nnzB=1024
tid=0, i,j = 997,187  nnzA= 1024, nnzB=1024
tid=0, i,j = 17,177  nnzA= 1024, nnzB=1024
tid=0, i,j = 614,176  nnzA= 1024, nnzB=1024
tid=0, i,j = 779,186  nnzA= 1024, nnzB=1024
tid=0, i,j = 357,188  nnzA= 1024, nnzB=1024
tid=0, i,j = 675,182  nnzA= 1024, nnzB=1024
tid=0, i,j = 692,183  nnzA= 1024, nnzB=1024
tid=0, i,j = 321,168  nnzA= 1024, nnzB=1024
tid=0, i,j = 953,192  nnzA= 1024, nnzB=1024
tid=0, i,j = 951,172  nnzA= 1024, nnzB=1024
tid=0, i,j = 396,165  nnzA= 1024, nnzB=1024
tid=0, i,j = 644,192  nnzA= 1024, nnzB=1024
tid=0, i,j = 830,180  nnzA= 1024, nnzB=1024
tid=0, i,j = 15,171  nnzA= 1024, nnzB=1024
tid=0, i,j = 1001,182  nnzA= 1024, nnzB=1024
tid=0, i,j = 188,176  nnzA= 1024, nnzB=1024
tid=0, i,j = 450,185  nnzA= 1024, nnzB=1024
tid=0, i,j = 781,176  nnzA= 1024, nnzB=1024
tid=0, i,j = 879,167  nnzA= 1024, nnzB=1024
tid=0, i,j = 922,195  nnzA= 1024, nnzB=1024
tid=0, i,j = 932,179  nnzA= 1024, nnzB=1024
tid=0, i,j = 826,207  nnzA= 1024, nnzB=1024
tid=0, i,j = 108,176  nnzA= 1024, nnzB=1024
tid=0, i,j = 990,190  nnzA= 1024, nnzB=1024
tid=0, i,j = 143,184  nnzA= 1024, nnzB=1024
tid=0, i,j = 612,170  nnzA= 1024, nnzB=1024
tid=0, i,j = 631,178  nnzA= 1024, nnzB=1024
tid=0, i,j = 669,175  nnzA= 1024, nnzB=1024
tid=0, i,j = 531,199  nnzA= 1024, nnzB=1024
tid=0, i,j = 135,193  nnzA= 1024, nnzB=1024
tid=0, i,j = 545,222  nnzA= 1024, nnzB=1024
tid=0, i,j = 56,221  nnzA= 1024, nnzB=1024
tid=0, i,j = 71,211  nnzA= 1024, nnzB=1024
tid=0, i,j = 704,220  nnzA= 1024, nnzB=1024
tid=0, i,j = 551,221  nnzA= 1024, nnzB=1024
tid=0, i,j = 704,218  nnzA= 1024, nnzB=1024
tid=0, i,j = 550,216  nnzA= 1024, nnzB=1024
tid=0, i,j = 910,198  nnzA= 1024, nnzB=1024
tid=0, i,j = 935,225  nnzA= 1024, nnzB=1024
tid=0, i,j = 865,203  nnzA= 1024, nnzB=1024
tid=0, i,j = 137,194  nnzA= 1024, nnzB=1024
tid=0, i,j = 721,224  nnzA= 1024, nnzB=1024
tid=0, i,j = 921,217  nnzA= 1024, nnzB=1024
tid=0, i,j = 268,215  nnzA= 1024, nnzB=1024
tid=0, i,j = 659,210  nnzA= 1024, nnzB=1024
tid=0, i,j = 66,219  nnzA= 1024, nnzB=1024
tid=0, i,j = 931,211  nnzA= 1024, nnzB=1024
tid=0, i,j = 859,197  nnzA= 1024, nnzB=1024
tid=0, i,j = 535,229  nnzA= 1024, nnzB=1024
tid=0, i,j = 808,209  nnzA= 1024, nnzB=1024
tid=0, i,j = 755,237  nnzA= 1024, nnzB=1024
tid=0, i,j = 928,214  nnzA= 1024, nnzB=1024
tid=0, i,j = 1016,223  nnzA= 1024, nnzB=1024
tid=0, i,j = 922,218  nnzA= 1024, nnzB=1024
tid=0, i,j = 152,213  nnzA= 1024, nnzB=1024
tid=0, i,j = 907,201  nnzA= 1024, nnzB=1024
tid=0, i,j = 985,208  nnzA= 1024, nnzB=1024
tid=0, i,j = 897,232  nnzA= 1024, nnzB=1024
tid=0, i,j = 727,226  nnzA= 1024, nnzB=1024
tid=0, i,j = 197,252  nnzA= 1024, nnzB=1024
tid=0, i,j = 426,212  nnzA= 1024, nnzB=1024
tid=0, i,j = 614,204  nnzA= 1024, nnzB=1024
tid=0, i,j = 485,250  nnzA= 1024, nnzB=1024
tid=0, i,j = 863,202  nnzA= 1024, nnzB=1024
tid=0, i,j = 500,241  nnzA= 1024, nnzB=1024
tid=0, i,j = 233,248  nnzA= 1024, nnzB=1024
tid=0, i,j = 708,251  nnzA= 1024, nnzB=1024
tid=0, i,j = 551,231  nnzA= 1024, nnzB=1024
tid=0, i,j = 326,246  nnzA= 1024, nnzB=1024
tid=0, i,j = 1004,244  nnzA= 1024, nnzB=1024
tid=0, i,j = 743,228  nnzA= 1024, nnzB=1024
tid=0, i,j = 40,254  nnzA= 1024, nnzB=1024
tid=0, i,j = 494,245  nnzA= 1024, nnzB=1024
tid=0, i,j = 588,244  nnzA= 1024, nnzB=1024
tid=0, i,j = 522,235  nnzA= 1024, nnzB=1024
tid=0, i,j = 238,254  nnzA= 1024, nnzB=1024
tid=0, i,j = 388,240  nnzA= 1024, nnzB=1024
tid=0, i,j = 382,230  nnzA= 1024, nnzB=1024
tid=0, i,j = 147,247  nnzA= 1024, nnzB=1024
tid=0, i,j = 82,239  nnzA= 1024, nnzB=1024
tid=0, i,j = 485,253  nnzA= 1024, nnzB=1024
tid=0, i,j = 300,243  nnzA= 1024, nnzB=1024
tid=0, i,j = 124,242  nnzA= 1024, nnzB=1024
tid=0, i,j = 115,247  nnzA= 1024, nnzB=1024
tid=0, i,j = 621,242  nnzA= 1024, nnzB=1024
tid=0, i,j = 570,233  nnzA= 1024, nnzB=1024
tid=0, i,j = 964,238  nnzA= 1024, nnzB=1024
tid=0, i,j = 352,266  nnzA= 1024, nnzB=1024
tid=0, i,j = 461,257  nnzA= 1024, nnzB=1024
tid=0, i,j = 895,255  nnzA= 1024, nnzB=1024
tid=0, i,j = 884,260  nnzA= 1024, nnzB=1024
tid=0, i,j = 32,285  nnzA= 1024, nnzB=1024
tid=0, i,j = 193,242  nnzA= 1024, nnzB=1024
tid=0, i,j = 221,236  nnzA= 1024, nnzB=1024
tid=0, i,j = 1007,283  nnzA= 1024, nnzB=1024
tid=0, i,j = 520,234  nnzA= 1024, nnzB=1024
tid=0, i,j = 877,270  nnzA= 1024, nnzB=1024
tid=0, i,j = 179,282  nnzA= 1024, nnzB=1024
tid=0, i,j = 595,284  nnzA= 1024, nnzB=1024
tid=0, i,j = 877,279  nnzA= 1024, nnzB=1024
tid=0, i,j = 233,258  nnzA= 1024, nnzB=1024
tid=0, i,j = 333,276  nnzA= 1024, nnzB=1024
tid=0, i,j = 114,256  nnzA= 1024, nnzB=1024
tid=0, i,j = 377,277  nnzA= 1024, nnzB=1024
tid=0, i,j = 126,287  nnzA= 1024, nnzB=1024
tid=0, i,j = 979,274  nnzA= 1024, nnzB=1024
tid=0, i,j = 755,264  nnzA= 1024, nnzB=1024
tid=0, i,j = 394,287  nnzA= 1024, nnzB=1024
tid=0, i,j = 449,281  nnzA= 1024, nnzB=1024
tid=0, i,j = 37,286  nnzA= 1024, nnzB=1024
tid=0, i,j = 234,268  nnzA= 1024, nnzB=1024
tid=0, i,j = 400,269  nnzA= 1024, nnzB=1024
tid=0, i,j = 796,257  nnzA= 1024, nnzB=1024
tid=0, i,j = 924,270  nnzA= 1024, nnzB=1024
tid=0, i,j = 100,273  nnzA= 1024, nnzB=1024
tid=0, i,j = 67,272  nnzA= 1024, nnzB=1024
tid=0, i,j = 945,261  nnzA= 1024, nnzB=1024
tid=0, i,j = 18,280  nnzA= 1024, nnzB=1024
tid=0, i,j = 10,267  nnzA= 1024, nnzB=1024
tid=0, i,j = 245,296  nnzA= 1024, nnzB=1024
tid=0, i,j = 594,291  nnzA= 1024, nnzB=1024
tid=0, i,j = 848,288  nnzA= 1024, nnzB=1024
tid=0, i,j = 960,294  nnzA= 1024, nnzB=1024
tid=0, i,j = 571,314  nnzA= 1024, nnzB=1024
tid=0, i,j = 124,265  nnzA= 1024, nnzB=1024
tid=0, i,j = 944,271  nnzA= 1024, nnzB=1024
tid=0, i,j = 61,312  nnzA= 1024, nnzB=1024
tid=0, i,j = 368,262  nnzA= 1024, nnzB=1024
tid=0, i,j = 758,313  nnzA= 1024, nnzB=1024
tid=0, i,j = 554,300  nnzA= 1024, nnzB=1024
tid=0, i,j = 328,309  nnzA= 1024, nnzB=1024
tid=0, i,j = 466,294  nnzA= 1024, nnzB=1024
tid=0, i,j = 264,307  nnzA= 1024, nnzB=1024
tid=0, i,j = 355,311  nnzA= 1024, nnzB=1024
tid=0, i,j = 298,315  nnzA= 1024, nnzB=1024
tid=0, i,j = 28,308  nnzA= 1024, nnzB=1024
tid=0, i,j = 622,305  nnzA= 1024, nnzB=1024
tid=0, i,j = 317,290  nnzA= 1024, nnzB=1024
tid=0, i,j = 109,296  nnzA= 1024, nnzB=1024
tid=0, i,j = 562,292  nnzA= 1024, nnzB=1024
tid=0, i,j = 1006,297  nnzA= 1024, nnzB=1024
tid=0, i,j = 177,315  nnzA= 1024, nnzB=1024
tid=0, i,j = 741,315  nnzA= 1024, nnzB=1024
tid=0, i,j = 159,299  nnzA= 1024, nnzB=1024
tid=0, i,j = 357,310  nnzA= 1024, nnzB=1024
tid=0, i,j = 229,304  nnzA= 1024, nnzB=1024
tid=0, i,j = 645,303  nnzA= 1024, nnzB=1024
tid=0, i,j = 774,301  nnzA= 1024, nnzB=1024
tid=0, i,j = 1,295  nnzA= 1024, nnzB=1024
tid=0, i,j = 627,309  nnzA= 1024, nnzB=1024
tid=0, i,j = 912,297  nnzA= 1024, nnzB=1024
tid=0, i,j = 30,302  nnzA= 1024, nnzB=1024
tid=0, i,j = 183,296  nnzA= 1024, nnzB=1024
tid=0, i,j = 106,295  nnzA= 1024, nnzB=1024
tid=0, i,j = 126,319  nnzA= 1024, nnzB=1024
tid=0, i,j = 549,324  nnzA= 1024, nnzB=1024
tid=0, i,j = 595,318  nnzA= 1024, nnzB=1024
tid=0, i,j = 235,322  nnzA= 1024, nnzB=1024
tid=0, i,j = 375,323  nnzA= 1024, nnzB=1024
tid=0, i,j = 308,316  nnzA= 1024, nnzB=1024
tid=0, i,j = 651,323  nnzA= 1024, nnzB=1024
tid=0, i,j = 487,325  nnzA= 1024, nnzB=1024
tid=0, i,j = 323,317  nnzA= 1024, nnzB=1024
tid=0, i,j = 73,321  nnzA= 1024, nnzB=1024
tid=0, i,j = 177,316  nnzA= 1024, nnzB=1024
tid=0, i,j = 468,320  nnzA= 1024, nnzB=1024
tid=0, i,j = 306,325  nnzA= 1024, nnzB=1024
tid=0, i,j = 993,338  nnzA= 1024, nnzB=1024
tid=0, i,j = 384,344  nnzA= 1024, nnzB=1024
tid=0, i,j = 849,340  nnzA= 1024, nnzB=1024
tid=0, i,j = 680,339  nnzA= 1024, nnzB=1024
tid=0, i,j = 704,327  nnzA= 1024, nnzB=1024
tid=0, i,j = 176,329  nnzA= 1024, nnzB=1024
tid=0, i,j = 608,337  nnzA= 1024, nnzB=1024
tid=0, i,j = 795,332  nnzA= 1024, nnzB=1024
tid=0, i,j = 695,334  nnzA= 1024, nnzB=1024
tid=0, i,j = 649,326  nnzA= 1024, nnzB=1024
tid=0, i,j = 694,335  nnzA= 1024, nnzB=1024
tid=0, i,j = 142,328  nnzA= 1024, nnzB=1024
tid=0, i,j = 723,342  nnzA= 1024, nnzB=1024
tid=0, i,j = 848,330  nnzA= 1024, nnzB=1024
tid=0, i,j = 808,336  nnzA= 1024, nnzB=1024
tid=0, i,j = 965,330  nnzA= 1024, nnzB=1024
tid=0, i,j = 775,336  nnzA= 1024, nnzB=1024
tid=0, i,j = 36,341  nnzA= 1024, nnzB=1024
tid=0, i,j = 678,343  nnzA= 1024, nnzB=1024
tid=0, i,j = 821,348  nnzA= 1024, nnzB=1024
tid=0, i,j = 60,348  nnzA= 1024, nnzB=1024
tid=0, i,j = 536,353  nnzA= 1024, nnzB=1024
tid=0, i,j = 937,351  nnzA= 1024, nnzB=1024
tid=0, i,j = 160,352  nnzA= 1024, nnzB=1024
tid=0, i,j = 340,356  nnzA= 1024, nnzB=1024
tid=0, i,j = 142,351  nnzA= 1024, nnzB=1024
tid=0, i,j = 996,347  nnzA= 1024, nnzB=1024
tid=0, i,j = 282,350  nnzA= 1024, nnzB=1024
tid=0, i,j = 804,349  nnzA= 1024, nnzB=1024
tid=0, i,j = 680,344  nnzA= 1024, nnzB=1024
tid=0, i,j = 75,345  nnzA= 1024, nnzB=1024
tid=0, i,j = 352,355  nnzA= 1024, nnzB=1024
tid=0, i,j = 679,360  nnzA= 1024, nnzB=1024
tid=0, i,j = 989,361  nnzA= 1024, nnzB=1024
tid=0, i,j = 678,358  nnzA= 1024, nnzB=1024
tid=0, i,j = 794,361  nnzA= 1024, nnzB=1024
tid=0, i,j = 669,374  nnzA= 1024, nnzB=1024
tid=0, i,j = 270,370  nnzA= 1024, nnzB=1024
tid=0, i,j = 971,366  nnzA= 1024, nnzB=1024
tid=0, i,j = 327,371  nnzA= 1024, nnzB=1024
tid=0, i,j = 471,372  nnzA= 1024, nnzB=1024
tid=0, i,j = 990,365  nnzA= 1024, nnzB=1024
tid=0, i,j = 629,364  nnzA= 1024, nnzB=1024
tid=0, i,j = 841,366  nnzA= 1024, nnzB=1024
tid=0, i,j = 88,373  nnzA= 1024, nnzB=1024
tid=0, i,j = 587,368  nnzA= 1024, nnzB=1024
tid=0, i,j = 816,362  nnzA= 1024, nnzB=1024
tid=0, i,j = 888,367  nnzA= 1024, nnzB=1024
tid=0, i,j = 684,369  nnzA= 1024, nnzB=1024
tid=0, i,j = 992,375  nnzA= 1024, nnzB=1024
tid=0, i,j = 206,363  nnzA= 1024, nnzB=1024
tid=0, i,j = 77,380  nnzA= 1024, nnzB=1024
tid=0, i,j = 592,379  nnzA= 1024, nnzB=1024
tid=0, i,j = 537,386  nnzA= 1024, nnzB=1024
tid=0, i,j = 816,382  nnzA= 1024, nnzB=1024
tid=0, i,j = 494,388  nnzA= 1024, nnzB=1024
tid=0, i,j = 711,383  nnzA= 1024, nnzB=1024
tid=0, i,j = 670,385  nnzA= 1024, nnzB=1024
tid=0, i,j = 86,377  nnzA= 1024, nnzB=1024
tid=0, i,j = 882,378  nnzA= 1024, nnzB=1024
tid=0, i,j = 643,380  nnzA= 1024, nnzB=1024
tid=0, i,j = 336,376  nnzA= 1024, nnzB=1024
tid=0, i,j = 733,389  nnzA= 1024, nnzB=1024
tid=0, i,j = 347,387  nnzA= 1024, nnzB=1024
tid=0, i,j = 1012,381  nnzA= 1024, nnzB=1024
tid=0, i,j = 328,389  nnzA= 1024, nnzB=1024
tid=0, i,j = 551,390  nnzA= 1024, nnzB=1024
tid=0, i,j = 59,391  nnzA= 1024, nnzB=1024
tid=0, i,j = 246,398  nnzA= 1024, nnzB=1024
tid=0, i,j = 382,400  nnzA= 1024, nnzB=1024
tid=0, i,j = 790,401  nnzA= 1024, nnzB=1024
tid=0, i,j = 49,405  nnzA= 1024, nnzB=1024
tid=0, i,j = 748,420  nnzA= 1024, nnzB=1024
tid=0, i,j = 26,415  nnzA= 1024, nnzB=1024
tid=0, i,j = 177,422  nnzA= 1024, nnzB=1024
tid=0, i,j = 645,396  nnzA= 1024, nnzB=1024
tid=0, i,j = 692,394  nnzA= 1024, nnzB=1024
tid=0, i,j = 835,397  nnzA= 1024, nnzB=1024
tid=0, i,j = 643,411  nnzA= 1024, nnzB=1024
tid=0, i,j = 366,417  nnzA= 1024, nnzB=1024
tid=0, i,j = 285,419  nnzA= 1024, nnzB=1024
tid=0, i,j = 614,421  nnzA= 1024, nnzB=1024
tid=0, i,j = 209,419  nnzA= 1024, nnzB=1024
tid=0, i,j = 160,418  nnzA= 1024, nnzB=1024
tid=0, i,j = 172,400  nnzA= 1024, nnzB=1024
tid=0, i,j = 600,391  nnzA= 1024, nnzB=1024
tid=0, i,j = 575,416  nnzA= 1024, nnzB=1024
tid=0, i,j = 669,418  nnzA= 1024, nnzB=1024
tid=0, i,j = 641,404  nnzA= 1024, nnzB=1024
tid=0, i,j = 320,407  nnzA= 1024, nnzB=1024
tid=0, i,j = 94,413  nnzA= 1024, nnzB=1024
tid=0, i,j = 949,412  nnzA= 1024, nnzB=1024
tid=0, i,j = 475,405  nnzA= 1024, nnzB=1024
tid=0, i,j = 320,402  nnzA= 1024, nnzB=1024
tid=0, i,j = 40,403  nnzA= 1024, nnzB=1024
tid=0, i,j = 61,408  nnzA= 1024, nnzB=1024
tid=0, i,j = 107,398  nnzA= 1024, nnzB=1024
tid=0, i,j = 754,410  nnzA= 1024, nnzB=1024
tid=0, i,j = 436,399  nnzA= 1024, nnzB=1024
tid=0, i,j = 991,414  nnzA= 1024, nnzB=1024
tid=0, i,j = 51,431  nnzA= 1024, nnzB=1024
tid=0, i,j = 868,452  nnzA= 1024, nnzB=1024
tid=0, i,j = 377,426  nnzA= 1024, nnzB=1024
tid=0, i,j = 415,454  nnzA= 1024, nnzB=1024
tid=0, i,j = 263,425  nnzA= 1024, nnzB=1024
tid=0, i,j = 857,432  nnzA= 1024, nnzB=1024
tid=0, i,j = 753,443  nnzA= 1024, nnzB=1024
tid=0, i,j = 970,447  nnzA= 1024, nnzB=1024
tid=0, i,j = 542,424  nnzA= 1024, nnzB=1024
tid=0, i,j = 950,428  nnzA= 1024, nnzB=1024
tid=0, i,j = 105,437  nnzA= 1024, nnzB=1024
tid=0, i,j = 26,453  nnzA= 1024, nnzB=1024
tid=0, i,j = 669,444  nnzA= 1024, nnzB=1024
tid=0, i,j = 835,449  nnzA= 1024, nnzB=1024
tid=0, i,j = 356,436  nnzA= 1024, nnzB=1024
tid=0, i,j = 152,435  nnzA= 1024, nnzB=1024
tid=0, i,j = 147,451  nnzA= 1024, nnzB=1024
tid=0, i,j = 873,423  nnzA= 1024, nnzB=1024
tid=0, i,j = 604,434  nnzA= 1024, nnzB=1024
tid=0, i,j = 1017,451  nnzA= 1024, nnzB=1024
tid=0, i,j = 744,448  nnzA= 1024, nnzB=1024
tid=0, i,j = 338,440  nnzA= 1024, nnzB=1024
tid=0, i,j = 982,441  nnzA= 1024, nnzB=1024
tid=0, i,j = 579,450  nnzA= 1024, nnzB=1024
tid=0, i,j = 880,442  nnzA= 1024, nnzB=1024
tid=0, i,j = 718,430  nnzA= 1024, nnzB=1024
tid=0, i,j = 814,438  nnzA= 1024, nnzB=1024
tid=0, i,j = 646,448  nnzA= 1024, nnzB=1024
tid=0, i,j = 149,427  nnzA= 1024, nnzB=1024
tid=0, i,j = 952,445  nnzA= 1024, nnzB=1024
tid=0, i,j = 305,429  nnzA= 1024, nnzB=1024
tid=0, i,j = 741,446  nnzA= 1024, nnzB=1024
tid=0, i,j = 849,456  nnzA= 1024, nnzB=1024
tid=0, i,j = 43,455  nnzA= 1024, nnzB=1024
tid=0, i,j = 668,454  nnzA= 1024, nnzB=1024
tid=0, i,j = 917,461  nnzA= 1024, nnzB=1024
tid=0, i,j = 510,458  nnzA= 1024, nnzB=1024
tid=0, i,j = 316,463  nnzA= 1024, nnzB=1024
tid=0, i,j = 985,456  nnzA= 1024, nnzB=1024
tid=0, i,j = 650,471  nnzA= 1024, nnzB=1024
tid=0, i,j = 382,475  nnzA= 1024, nnzB=1024
tid=0, i,j = 900,462  nnzA= 1024, nnzB=1024
tid=0, i,j = 889,470  nnzA= 1024, nnzB=1024
tid=0, i,j = 218,457  nnzA= 1024, nnzB=1024
tid=0, i,j = 194,487  nnzA= 1024, nnzB=1024
tid=0, i,j = 44,476  nnzA= 1024, nnzB=1024
tid=0, i,j = 342,477  nnzA= 1024, nnzB=1024
tid=0, i,j = 517,483  nnzA= 1024, nnzB=1024
tid=0, i,j = 836,460  nnzA= 1024, nnzB=1024
tid=0, i,j = 667,480  nnzA= 1024, nnzB=1024
tid=0, i,j = 762,464  nnzA= 1024, nnzB=1024
tid=0, i,j = 127,473  nnzA= 1024, nnzB=1024
tid=0, i,j = 673,466  nnzA= 1024, nnzB=1024
tid=0, i,j = 355,465  nnzA= 1024, nnzB=1024
tid=0, i,j = 849,461  nnzA= 1024, nnzB=1024
tid=0, i,j = 112,467  nnzA= 1024, nnzB=1024
tid=0, i,j = 801,465  nnzA= 1024, nnzB=1024
tid=0, i,j = 680,482  nnzA= 1024, nnzB=1024
tid=0, i,j = 487,474  nnzA= 1024, nnzB=1024
tid=0, i,j = 558,481  nnzA= 1024, nnzB=1024
tid=0, i,j = 961,484  nnzA= 1024, nnzB=1024
tid=0, i,j = 288,468  nnzA= 1024, nnzB=1024
tid=0, i,j = 737,459  nnzA= 1024, nnzB=1024
tid=0, i,j = 121,473  nnzA= 1024, nnzB=1024
tid=0, i,j = 786,478  nnzA= 1024, nnzB=1024
tid=0, i,j = 1015,486  nnzA= 1024, nnzB=1024
tid=0, i,j = 274,485  nnzA= 1024, nnzB=1024
tid=0, i,j = 802,489  nnzA= 1024, nnzB=1024
tid=0, i,j = 267,496  nnzA= 1024, nnzB=1024
tid=0, i,j = 643,507  nnzA= 1024, nnzB=1024
tid=0, i,j = 404,514  nnzA= 1024, nnzB=1024
tid=0, i,j = 194,498  nnzA= 1024, nnzB=1024
tid=0, i,j = 811,490  nnzA= 1024, nnzB=1024
tid=0, i,j = 319,491  nnzA= 1024, nnzB=1024
tid=0, i,j = 362,525  nnzA= 1024, nnzB=1024
tid=0, i,j = 902,496  nnzA= 1024, nnzB=1024
tid=0, i,j = 369,517  nnzA= 1024, nnzB=1024
tid=0, i,j = 574,505  nnzA= 1024, nnzB=1024
tid=0, i,j = 758,515  nnzA= 1024, nnzB=1024
tid=0, i,j = 284,522  nnzA= 1024, nnzB=1024
tid=0, i,j = 1013,521  nnzA= 1024, nnzB=1024
tid=0, i,j = 786,519  nnzA= 1024, nnzB=1024
tid=0, i,j = 952,499  nnzA= 1024, nnzB=1024
tid=0, i,j = 809,495  nnzA= 1024, nnzB=1024
tid=0, i,j = 704,501  nnzA= 1024, nnzB=1024
tid=0, i,j = 84,500  nnzA= 1024, nnzB=1024
tid=0, i,j = 271,513  nnzA= 1024, nnzB=1024
tid=0, i,j = 432,494  nnzA= 1024, nnzB=1024
tid=0, i,j = 892,512  nnzA= 1024, nnzB=1024
tid=0, i,j = 519,503  nnzA= 1024, nnzB=1024
tid=0, i,j = 270,520  nnzA= 1024, nnzB=1024
tid=0, i,j = 887,504  nnzA= 1024, nnzB=1024
tid=0, i,j = 510,504  nnzA= 1024, nnzB=1024
tid=0, i,j = 377,492  nnzA= 1024, nnzB=1024
tid=0, i,j = 945,524  nnzA= 1024, nnzB=1024
tid=0, i,j = 632,523  nnzA= 1024, nnzB=1024
tid=0, i,j = 449,508  nnzA= 1024, nnzB=1024
tid=0, i,j = 94,525  nnzA= 1024, nnzB=1024
tid=0, i,j = 293,518  nnzA= 1024, nnzB=1024
tid=0, i,j = 52,526  nnzA= 1024, nnzB=1024
tid=0, i,j = 908,531  nnzA= 1024, nnzB=1024
tid=0, i,j = 137,542  nnzA= 1024, nnzB=1024
tid=0, i,j = 505,534  nnzA= 1024, nnzB=1024
tid=0, i,j = 61,527  nnzA= 1024, nnzB=1024
tid=0, i,j = 294,528  nnzA= 1024, nnzB=1024
tid=0, i,j = 912,547  nnzA= 1024, nnzB=1024
tid=0, i,j = 674,533  nnzA= 1024, nnzB=1024
tid=0, i,j = 245,540  nnzA= 1024, nnzB=1024
tid=0, i,j = 1018,547  nnzA= 1024, nnzB=1024
tid=0, i,j = 910,557  nnzA= 1024, nnzB=1024
tid=0, i,j = 46,548  nnzA= 1024, nnzB=1024
tid=0, i,j = 500,536  nnzA= 1024, nnzB=1024
tid=0, i,j = 112,530  nnzA= 1024, nnzB=1024
tid=0, i,j = 710,552  nnzA= 1024, nnzB=1024
tid=0, i,j = 602,549  nnzA= 1024, nnzB=1024
tid=0, i,j = 660,535  nnzA= 1024, nnzB=1024
tid=0, i,j = 391,553  nnzA= 1024, nnzB=1024
tid=0, i,j = 776,535  nnzA= 1024, nnzB=1024
tid=0, i,j = 767,547  nnzA= 1024, nnzB=1024
tid=0, i,j = 927,550  nnzA= 1024, nnzB=1024
tid=0, i,j = 861,538  nnzA= 1024, nnzB=1024
tid=0, i,j = 492,538  nnzA= 1024, nnzB=1024
tid=0, i,j = 799,537  nnzA= 1024, nnzB=1024
tid=0, i,j = 351,554  nnzA= 1024, nnzB=1024
tid=0, i,j = 145,529  nnzA= 1024, nnzB=1024
tid=0, i,j = 998,529  nnzA= 1024, nnzB=1024
tid=0, i,j = 213,546  nnzA= 1024, nnzB=1024
tid=0, i,j = 10,555  nnzA= 1024, nnzB=1024
tid=0, i,j = 26,556  nnzA= 1024, nnzB=1024
tid=0, i,j = 697,548  nnzA= 1024, nnzB=1024
tid=0, i,j = 658,545  nnzA= 1024, nnzB=1024
tid=0, i,j = 603,574  nnzA= 1024, nnzB=1024
tid=0, i,j = 552,558  nnzA= 1024, nnzB=1024
tid=0, i,j = 310,564  nnzA= 1024, nnzB=1024
tid=0, i,j = 792,560  nnzA= 1024, nnzB=1024
tid=0, i,j = 597,561  nnzA= 1024, nnzB=1024
tid=0, i,j = 445,581  nnzA= 1024, nnzB=1024
tid=0, i,j = 490,565  nnzA= 1024, nnzB=1024
tid=0, i,j = 630,572  nnzA= 1024, nnzB=1024
tid=0, i,j = 872,569  nnzA= 1024, nnzB=1024
tid=0, i,j = 177,582  nnzA= 1024, nnzB=1024
tid=0, i,j = 118,583  nnzA= 1024, nnzB=1024
tid=0, i,j = 877,563  nnzA= 1024, nnzB=1024
tid=0, i,j = 609,564  nnzA= 1024, nnzB=1024
tid=0, i,j = 914,588  nnzA= 1024, nnzB=1024
tid=0, i,j = 433,585  nnzA= 1024, nnzB=1024
tid=0, i,j = 564,566  nnzA= 1024, nnzB=1024
tid=0, i,j = 607,566  nnzA= 1024, nnzB=1024
tid=0, i,j = 182,580  nnzA= 1024, nnzB=1024
tid=0, i,j = 1016,589  nnzA= 1024, nnzB=1024
tid=0, i,j = 465,570  nnzA= 1024, nnzB=1024
tid=0, i,j = 271,571  nnzA= 1024, nnzB=1024
tid=0, i,j = 254,587  nnzA= 1024, nnzB=1024
tid=0, i,j = 919,571  nnzA= 1024, nnzB=1024
tid=0, i,j = 274,579  nnzA= 1024, nnzB=1024
tid=0, i,j = 862,562  nnzA= 1024, nnzB=1024
tid=0, i,j = 399,584  nnzA= 1024, nnzB=1024
tid=0, i,j = 256,576  nnzA= 1024, nnzB=1024
tid=0, i,j = 182,562  nnzA= 1024, nnzB=1024
tid=0, i,j = 478,601  nnzA= 1024, nnzB=1024
tid=0, i,j = 127,599  nnzA= 1024, nnzB=1024
tid=0, i,j = 95,590  nnzA= 1024, nnzB=1024
tid=0, i,j = 832,608  nnzA= 1024, nnzB=1024
tid=0, i,j = 794,610  nnzA= 1024, nnzB=1024
tid=0, i,j = 759,611  nnzA= 1024, nnzB=1024
tid=0, i,j = 5,620  nnzA= 1024, nnzB=1024
tid=0, i,j = 527,592  nnzA= 1024, nnzB=1024
tid=0, i,j = 41,621  nnzA= 1024, nnzB=1024
tid=0, i,j = 996,619  nnzA= 1024, nnzB=1024
tid=0, i,j = 928,616  nnzA= 1024, nnzB=1024
tid=0, i,j = 978,591  nnzA= 1024, nnzB=1024
tid=0, i,j = 802,590  nnzA= 1024, nnzB=1024
tid=0, i,j = 398,613  nnzA= 1024, nnzB=1024
tid=0, i,j = 759,603  nnzA= 1024, nnzB=1024
tid=0, i,j = 218,602  nnzA= 1024, nnzB=1024
tid=0, i,j = 76,605  nnzA= 1024, nnzB=1024
tid=0, i,j = 339,600  nnzA= 1024, nnzB=1024
tid=0, i,j = 270,604  nnzA= 1024, nnzB=1024
tid=0, i,j = 787,595  nnzA= 1024, nnzB=1024
tid=0, i,j = 337,620  nnzA= 1024, nnzB=1024
tid=0, i,j = 430,594  nnzA= 1024, nnzB=1024
tid=0, i,j = 143,593  nnzA= 1024, nnzB=1024
tid=0, i,j = 386,614  nnzA= 1024, nnzB=1024
tid=0, i,j = 115,615  nnzA= 1024, nnzB=1024
tid=0, i,j = 677,596  nnzA= 1024, nnzB=1024
tid=0, i,j = 287,609  nnzA= 1024, nnzB=1024
tid=0, i,j = 788,598  nnzA= 1024, nnzB=1024
tid=0, i,j = 30,617  nnzA= 1024, nnzB=1024
tid=0, i,j = 930,606  nnzA= 1024, nnzB=1024
tid=0, i,j = 361,618  nnzA= 1024, nnzB=1024
tid=0, i,j = 1006,612  nnzA= 1024, nnzB=1024
tid=0, i,j = 716,637  nnzA= 1024, nnzB=1024
tid=0, i,j = 341,630  nnzA= 1024, nnzB=1024
tid=0, i,j = 396,628  nnzA= 1024, nnzB=1024
tid=0, i,j = 957,650  nnzA= 1024, nnzB=1024
tid=0, i,j = 44,623  nnzA= 1024, nnzB=1024
tid=0, i,j = 19,624  nnzA= 1024, nnzB=1024
tid=0, i,j = 617,636  nnzA= 1024, nnzB=1024
tid=0, i,j = 113,638  nnzA= 1024, nnzB=1024
tid=0, i,j = 934,643  nnzA= 1024, nnzB=1024
tid=0, i,j = 973,652  nnzA= 1024, nnzB=1024
tid=0, i,j = 614,649  nnzA= 1024, nnzB=1024
tid=0, i,j = 49,631  nnzA= 1024, nnzB=1024
tid=0, i,j = 73,632  nnzA= 1024, nnzB=1024
tid=0, i,j = 242,624  nnzA= 1024, nnzB=1024
tid=0, i,j = 79,623  nnzA= 1024, nnzB=1024
tid=0, i,j = 585,631  nnzA= 1024, nnzB=1024
tid=0, i,j = 683,625  nnzA= 1024, nnzB=1024
tid=0, i,j = 912,634  nnzA= 1024, nnzB=1024
tid=0, i,j = 457,641  nnzA= 1024, nnzB=1024
tid=0, i,j = 882,629  nnzA= 1024, nnzB=1024
tid=0, i,j = 281,651  nnzA= 1024, nnzB=1024
tid=0, i,j = 966,623  nnzA= 1024, nnzB=1024
tid=0, i,j = 524,624  nnzA= 1024, nnzB=1024
tid=0, i,j = 783,647  nnzA= 1024, nnzB=1024
tid=0, i,j = 616,639  nnzA= 1024, nnzB=1024
tid=0, i,j = 837,640  nnzA= 1024, nnzB=1024
tid=0, i,j = 367,638  nnzA= 1024, nnzB=1024
tid=0, i,j = 285,637  nnzA= 1024, nnzB=1024
tid=0, i,j = 195,648  nnzA= 1024, nnzB=1024
tid=0, i,j = 51,626  nnzA= 1024, nnzB=1024
tid=0, i,j = 361,627  nnzA= 1024, nnzB=1024
tid=0, i,j = 882,635  nnzA= 1024, nnzB=1024
tid=0, i,j = 158,664  nnzA= 1024, nnzB=1024
tid=0, i,j = 503,666  nnzA= 1024, nnzB=1024
tid=0, i,j = 819,674  nnzA= 1024, nnzB=1024
tid=0, i,j = 819,672  nnzA= 1024, nnzB=1024
tid=0, i,j = 60,653  nnzA= 1024, nnzB=1024
tid=0, i,j = 117,682  nnzA= 1024, nnzB=1024
tid=0, i,j = 910,655  nnzA= 1024, nnzB=1024
tid=0, i,j = 454,675  nnzA= 1024, nnzB=1024
tid=0, i,j = 951,667  nnzA= 1024, nnzB=1024
tid=0, i,j = 699,681  nnzA= 1024, nnzB=1024
tid=0, i,j = 300,669  nnzA= 1024, nnzB=1024
tid=0, i,j = 899,679  nnzA= 1024, nnzB=1024
tid=0, i,j = 907,684  nnzA= 1024, nnzB=1024
tid=0, i,j = 77,665  nnzA= 1024, nnzB=1024
tid=0, i,j = 141,671  nnzA= 1024, nnzB=1024
tid=0, i,j = 110,683  nnzA= 1024, nnzB=1024
tid=0, i,j = 349,656  nnzA= 1024, nnzB=1024
tid=0, i,j = 591,660  nnzA= 1024, nnzB=1024
tid=0, i,j = 365,668  nnzA= 1024, nnzB=1024
tid=0, i,j = 333,653  nnzA= 1024, nnzB=1024
tid=0, i,j = 802,678  nnzA= 1024, nnzB=1024
tid=0, i,j = 36,674  nnzA= 1024, nnzB=1024
tid=0, i,j = 17,659  nnzA= 1024, nnzB=1024
tid=0, i,j = 605,654  nnzA= 1024, nnzB=1024
tid=0, i,j = 289,677  nnzA= 1024, nnzB=1024
tid=0, i,j = 767,663  nnzA= 1024, nnzB=1024
tid=0, i,j = 512,661  nnzA= 1024, nnzB=1024
tid=0, i,j = 398,680  nnzA= 1024, nnzB=1024
tid=0, i,j = 647,677  nnzA= 1024, nnzB=1024
tid=0, i,j = 565,671  nnzA= 1024, nnzB=1024
tid=0, i,j = 390,681  nnzA= 1024, nnzB=1024
tid=0, i,j = 242,676  nnzA= 1024, nnzB=1024
tid=0, i,j = 702,695  nnzA= 1024, nnzB=1024
tid=0, i,j = 17,685  nnzA= 1024, nnzB=1024
tid=0, i,j = 287,688  nnzA= 1024, nnzB=1024
tid=0, i,j = 152,699  nnzA= 1024, nnzB=1024
tid=0, i,j = 631,698  nnzA= 1024, nnzB=1024
tid=0, i,j = 374,704  nnzA= 1024, nnzB=1024
tid=0, i,j = 511,706  nnzA= 1024, nnzB=1024
tid=0, i,j = 475,714  nnzA= 1024, nnzB=1024
tid=0, i,j = 76,707  nnzA= 1024, nnzB=1024
tid=0, i,j = 323,701  nnzA= 1024, nnzB=1024
tid=0, i,j = 102,696  nnzA= 1024, nnzB=1024
tid=0, i,j = 392,691  nnzA= 1024, nnzB=1024
tid=0, i,j = 777,702  nnzA= 1024, nnzB=1024
tid=0, i,j = 751,715  nnzA= 1024, nnzB=1024
tid=0, i,j = 107,710  nnzA= 1024, nnzB=1024
tid=0, i,j = 172,715  nnzA= 1024, nnzB=1024
tid=0, i,j = 462,711  nnzA= 1024, nnzB=1024
tid=0, i,j = 502,689  nnzA= 1024, nnzB=1024
tid=0, i,j = 299,690  nnzA= 1024, nnzB=1024
tid=0, i,j = 202,686  nnzA= 1024, nnzB=1024
tid=0, i,j = 873,709  nnzA= 1024, nnzB=1024
tid=0, i,j = 579,705  nnzA= 1024, nnzB=1024
tid=0, i,j = 378,694  nnzA= 1024, nnzB=1024
tid=0, i,j = 600,692  nnzA= 1024, nnzB=1024
tid=0, i,j = 840,700  nnzA= 1024, nnzB=1024
tid=0, i,j = 293,710  nnzA= 1024, nnzB=1024
tid=0, i,j = 45,687  nnzA= 1024, nnzB=1024
tid=0, i,j = 925,708  nnzA= 1024, nnzB=1024
tid=0, i,j = 259,708  nnzA= 1024, nnzB=1024
tid=0, i,j = 872,709  nnzA= 1024, nnzB=1024
tid=0, i,j = 210,711  nnzA= 1024, nnzB=1024
tid=0, i,j = 132,703  nnzA= 1024, nnzB=1024
tid=0, i,j = 934,722  nnzA= 1024, nnzB=1024
tid=0, i,j = 697,716  nnzA= 1024, nnzB=1024
tid=0, i,j = 337,726  nnzA= 1024, nnzB=1024
tid=0, i,j = 848,718  nnzA= 1024, nnzB=1024
tid=0, i,j = 480,724  nnzA= 1024, nnzB=1024
tid=0, i,j = 574,734  nnzA= 1024, nnzB=1024
tid=0, i,j = 630,741  nnzA= 1024, nnzB=1024
tid=0, i,j = 797,728  nnzA= 1024, nnzB=1024
tid=0, i,j = 275,731  nnzA= 1024, nnzB=1024
tid=0, i,j = 763,733  nnzA= 1024, nnzB=1024
tid=0, i,j = 485,742  nnzA= 1024, nnzB=1024
tid=0, i,j = 675,723  nnzA= 1024, nnzB=1024
tid=0, i,j = 884,729  nnzA= 1024, nnzB=1024
tid=0, i,j = 725,720  nnzA= 1024, nnzB=1024
tid=0, i,j = 1023,738  nnzA= 1024, nnzB=1024
tid=0, i,j = 186,743  nnzA= 1024, nnzB=1024
tid=0, i,j = 912,737  nnzA= 1024, nnzB=1024
tid=0, i,j = 234,717  nnzA= 1024, nnzB=1024
tid=0, i,j = 910,732  nnzA= 1024, nnzB=1024
tid=0, i,j = 331,719  nnzA= 1024, nnzB=1024
tid=0, i,j = 365,741  nnzA= 1024, nnzB=1024
tid=0, i,j = 335,739  nnzA= 1024, nnzB=1024
tid=0, i,j = 201,720  nnzA= 1024, nnzB=1024
tid=0, i,j = 806,721  nnzA= 1024, nnzB=1024
tid=0, i,j = 415,722  nnzA= 1024, nnzB=1024
tid=0, i,j = 146,737  nnzA= 1024, nnzB=1024
tid=0, i,j = 177,727  nnzA= 1024, nnzB=1024
tid=0, i,j = 620,717  nnzA= 1024, nnzB=1024
tid=0, i,j = 115,736  nnzA= 1024, nnzB=1024
tid=0, i,j = 268,735  nnzA= 1024, nnzB=1024
tid=0, i,j = 596,740  nnzA= 1024, nnzB=1024
tid=0, i,j = 767,730  nnzA= 1024, nnzB=1024
tid=0, i,j = 742,752  nnzA= 1024, nnzB=1024
tid=0, i,j = 621,745  nnzA= 1024, nnzB=1024
tid=0, i,j = 592,753  nnzA= 1024, nnzB=1024
tid=0, i,j = 91,747  nnzA= 1024, nnzB=1024
tid=0, i,j = 954,763  nnzA= 1024, nnzB=1024
tid=0, i,j = 472,753  nnzA= 1024, nnzB=1024
tid=0, i,j = 962,762  nnzA= 1024, nnzB=1024
tid=0, i,j = 745,752  nnzA= 1024, nnzB=1024
tid=0, i,j = 340,760  nnzA= 1024, nnzB=1024
tid=0, i,j = 847,758  nnzA= 1024, nnzB=1024
tid=0, i,j = 633,756  nnzA= 1024, nnzB=1024
tid=0, i,j = 755,749  nnzA= 1024, nnzB=1024
tid=0, i,j = 936,766  nnzA= 1024, nnzB=1024
tid=0, i,j = 381,760  nnzA= 1024, nnzB=1024
tid=0, i,j = 645,745  nnzA= 1024, nnzB=1024
tid=0, i,j = 886,748  nnzA= 1024, nnzB=1024
tid=0, i,j = 313,752  nnzA= 1024, nnzB=1024
tid=0, i,j = 59,749  nnzA= 1024, nnzB=1024
tid=0, i,j = 1007,754  nnzA= 1024, nnzB=1024
tid=0, i,j = 915,766  nnzA= 1024, nnzB=1024
tid=0, i,j = 348,751  nnzA= 1024, nnzB=1024
tid=0, i,j = 913,764  nnzA= 1024, nnzB=1024
tid=0, i,j = 392,764  nnzA= 1024, nnzB=1024
tid=0, i,j = 273,746  nnzA= 1024, nnzB=1024
tid=0, i,j = 500,759  nnzA= 1024, nnzB=1024
tid=0, i,j = 56,773  nnzA= 1024, nnzB=1024
tid=0, i,j = 372,767  nnzA= 1024, nnzB=1024
tid=0, i,j = 773,774  nnzA= 1024, nnzB=1024
tid=0, i,j = 307,768  nnzA= 1024, nnzB=1024
tid=0, i,j = 487,771  nnzA= 1024, nnzB=1024
tid=0, i,j = 103,771  nnzA= 1024, nnzB=1024
tid=0, i,j = 458,770  nnzA= 1024, nnzB=1024
tid=0, i,j = 614,783  nnzA= 1024, nnzB=1024
tid=0, i,j = 115,775  nnzA= 1024, nnzB=1024
tid=0, i,j = 462,786  nnzA= 1024, nnzB=1024
tid=0, i,j = 893,778  nnzA= 1024, nnzB=1024
tid=0, i,j = 809,793  nnzA= 1024, nnzB=1024
tid=0, i,j = 793,791  nnzA= 1024, nnzB=1024
tid=0, i,j = 273,788  nnzA= 1024, nnzB=1024
tid=0, i,j = 816,785  nnzA= 1024, nnzB=1024
tid=0, i,j = 54,784  nnzA= 1024, nnzB=1024
tid=0, i,j = 696,789  nnzA= 1024, nnzB=1024
tid=0, i,j = 955,792  nnzA= 1024, nnzB=1024
tid=0, i,j = 899,781  nnzA= 1024, nnzB=1024
tid=0, i,j = 636,792  nnzA= 1024, nnzB=1024
tid=0, i,j = 880,797  nnzA= 1024, nnzB=1024
tid=0, i,j = 256,780  nnzA= 1024, nnzB=1024
tid=0, i,j = 537,776  nnzA= 1024, nnzB=1024
tid=0, i,j = 876,787  nnzA= 1024, nnzB=1024
tid=0, i,j = 644,779  nnzA= 1024, nnzB=1024
tid=0, i,j = 892,782  nnzA= 1024, nnzB=1024
tid=0, i,j = 399,782  nnzA= 1024, nnzB=1024
tid=0, i,j = 392,777  nnzA= 1024, nnzB=1024
tid=0, i,j = 347,796  nnzA= 1024, nnzB=1024
tid=0, i,j = 986,794  nnzA= 1024, nnzB=1024
tid=0, i,j = 471,790  nnzA= 1024, nnzB=1024
tid=0, i,j = 656,795  nnzA= 1024, nnzB=1024
tid=0, i,j = 1022,804  nnzA= 1024, nnzB=1024
tid=0, i,j = 896,803  nnzA= 1024, nnzB=1024
tid=0, i,j = 802,798  nnzA= 1024, nnzB=1024
tid=0, i,j = 32,805  nnzA= 1024, nnzB=1024
tid=0, i,j = 294,799  nnzA= 1024, nnzB=1024
tid=0, i,j = 130,801  nnzA= 1024, nnzB=1024
tid=0, i,j = 970,800  nnzA= 1024, nnzB=1024
tid=0, i,j = 408,815  nnzA= 1024, nnzB=1024
tid=0, i,j = 479,805  nnzA= 1024, nnzB=1024
tid=0, i,j = 985,818  nnzA= 1024, nnzB=1024
tid=0, i,j = 719,809  nnzA= 1024, nnzB=1024
tid=0, i,j = 430,817  nnzA= 1024, nnzB=1024
tid=0, i,j = 839,821  nnzA= 1024, nnzB=1024
tid=0, i,j = 747,822  nnzA= 1024, nnzB=1024
tid=0, i,j = 547,811  nnzA= 1024, nnzB=1024
tid=0, i,j = 902,816  nnzA= 1024, nnzB=1024
tid=0, i,j = 646,810  nnzA= 1024, nnzB=1024
tid=0, i,j = 737,809  nnzA= 1024, nnzB=1024
tid=0, i,j = 889,806  nnzA= 1024, nnzB=1024
tid=0, i,j = 200,813  nnzA= 1024, nnzB=1024
tid=0, i,j = 375,812  nnzA= 1024, nnzB=1024
tid=0, i,j = 688,819  nnzA= 1024, nnzB=1024
tid=0, i,j = 504,807  nnzA= 1024, nnzB=1024
tid=0, i,j = 625,827  nnzA= 1024, nnzB=1024
tid=0, i,j = 886,824  nnzA= 1024, nnzB=1024
tid=0, i,j = 814,826  nnzA= 1024, nnzB=1024
tid=0, i,j = 406,825  nnzA= 1024, nnzB=1024
tid=0, i,j = 982,831  nnzA= 1024, nnzB=1024
tid=0, i,j = 915,830  nnzA= 1024, nnzB=1024
tid=0, i,j = 511,829  nnzA= 1024, nnzB=1024
tid=0, i,j = 407,828  nnzA= 1024, nnzB=1024
tid=0, i,j = 39,823  nnzA= 1024, nnzB=1024
tid=0, i,j = 115,835  nnzA= 1024, nnzB=1024
tid=0, i,j = 1003,832  nnzA= 1024, nnzB=1024
tid=0, i,j = 218,836  nnzA= 1024, nnzB=1024
tid=0, i,j = 362,833  nnzA= 1024, nnzB=1024
tid=0, i,j = 295,834  nnzA= 1024, nnzB=1024
tid=0, i,j = 999,833  nnzA= 1024, nnzB=1024
tid=0, i,j = 136,834  nnzA= 1024, nnzB=1024
tid=0, i,j = 565,837  nnzA= 1024, nnzB=1024
tid=0, i,j = 159,840  nnzA= 1024, nnzB=1024
tid=0, i,j = 103,841  nnzA= 1024, nnzB=1024
tid=0, i,j = 541,839  nnzA= 1024, nnzB=1024
tid=0, i,j = 636,841  nnzA= 1024, nnzB=1024
tid=0, i,j = 533,846  nnzA= 1024, nnzB=1024
tid=0, i,j = 483,848  nnzA= 1024, nnzB=1024
tid=0, i,j = 741,847  nnzA= 1024, nnzB=1024
tid=0, i,j = 711,839  nnzA= 1024, nnzB=1024
tid=0, i,j = 529,852  nnzA= 1024, nnzB=1024
tid=0, i,j = 524,843  nnzA= 1024, nnzB=1024
tid=0, i,j = 464,849  nnzA= 1024, nnzB=1024
tid=0, i,j = 136,842  nnzA= 1024, nnzB=1024
tid=0, i,j = 694,845  nnzA= 1024, nnzB=1024
tid=0, i,j = 567,851  nnzA= 1024, nnzB=1024
tid=0, i,j = 302,850  nnzA= 1024, nnzB=1024
tid=0, i,j = 114,844  nnzA= 1024, nnzB=1024
tid=0, i,j = 623,853  nnzA= 1024, nnzB=1024
tid=0, i,j = 150,852  nnzA= 1024, nnzB=1024
tid=0, i,j = 972,865  nnzA= 1024, nnzB=1024
tid=0, i,j = 781,858  nnzA= 1024, nnzB=1024
tid=0, i,j = 106,855  nnzA= 1024, nnzB=1024
tid=0, i,j = 994,858  nnzA= 1024, nnzB=1024
tid=0, i,j = 97,866  nnzA= 1024, nnzB=1024
tid=0, i,j = 716,859  nnzA= 1024, nnzB=1024
tid=0, i,j = 650,857  nnzA= 1024, nnzB=1024
tid=0, i,j = 1022,864  nnzA= 1024, nnzB=1024
tid=0, i,j = 508,859  nnzA= 1024, nnzB=1024
tid=0, i,j = 21,863  nnzA= 1024, nnzB=1024
tid=0, i,j = 1014,856  nnzA= 1024, nnzB=1024
tid=0, i,j = 636,862  nnzA= 1024, nnzB=1024
tid=0, i,j = 151,857  nnzA= 1024, nnzB=1024
tid=0, i,j = 48,867  nnzA= 1024, nnzB=1024
tid=0, i,j = 506,870  nnzA= 1024, nnzB=1024
tid=0, i,j = 453,871  nnzA= 1024, nnzB=1024
tid=0, i,j = 303,868  nnzA= 1024, nnzB=1024
tid=0, i,j = 775,872  nnzA= 1024, nnzB=1024
tid=0, i,j = 364,869  nnzA= 1024, nnzB=1024
tid=0, i,j = 173,873  nnzA= 1024, nnzB=1024
tid=0, i,j = 990,877  nnzA= 1024, nnzB=1024
tid=0, i,j = 357,876  nnzA= 1024, nnzB=1024
tid=0, i,j = 110,888  nnzA= 1024, nnzB=1024
tid=0, i,j = 679,891  nnzA= 1024, nnzB=1024
tid=0, i,j = 390,896  nnzA= 1024, nnzB=1024
tid=0, i,j = 42,897  nnzA= 1024, nnzB=1024
tid=0, i,j = 485,874  nnzA= 1024, nnzB=1024
tid=0, i,j = 37,895  nnzA= 1024, nnzB=1024
tid=0, i,j = 168,875  nnzA= 1024, nnzB=1024
tid=0, i,j = 628,890  nnzA= 1024, nnzB=1024
tid=0, i,j = 695,895  nnzA= 1024, nnzB=1024
tid=0, i,j = 687,885  nnzA= 1024, nnzB=1024
tid=0, i,j = 892,889  nnzA= 1024, nnzB=1024
tid=0, i,j = 929,883  nnzA= 1024, nnzB=1024
tid=0, i,j = 722,877  nnzA= 1024, nnzB=1024
tid=0, i,j = 608,882  nnzA= 1024, nnzB=1024
tid=0, i,j = 33,894  nnzA= 1024, nnzB=1024
tid=0, i,j = 605,901  nnzA= 1024, nnzB=1024
tid=0, i,j = 943,888  nnzA= 1024, nnzB=1024
tid=0, i,j = 176,880  nnzA= 1024, nnzB=1024
tid=0, i,j = 146,901  nnzA= 1024, nnzB=1024
tid=0, i,j = 687,900  nnzA= 1024, nnzB=1024
tid=0, i,j = 653,892  nnzA= 1024, nnzB=1024
tid=0, i,j = 643,884  nnzA= 1024, nnzB=1024
tid=0, i,j = 487,887  nnzA= 1024, nnzB=1024
tid=0, i,j = 23,881  nnzA= 1024, nnzB=1024
tid=0, i,j = 808,904  nnzA= 1024, nnzB=1024
tid=0, i,j = 795,905  nnzA= 1024, nnzB=1024
tid=0, i,j = 57,902  nnzA= 1024, nnzB=1024
tid=0, i,j = 479,906  nnzA= 1024, nnzB=1024
tid=0, i,j = 1021,903  nnzA= 1024, nnzB=1024
tid=0, i,j = 674,907  nnzA= 1024, nnzB=1024
tid=0, i,j = 548,911  nnzA= 1024, nnzB=1024
tid=0, i,j = 823,916  nnzA= 1024, nnzB=1024
tid=0, i,j = 366,915  nnzA= 1024, nnzB=1024
tid=0, i,j = 502,915  nnzA= 1024, nnzB=1024
tid=0, i,j = 414,940  nnzA= 1024, nnzB=1024
tid=0, i,j = 109,944  nnzA= 1024, nnzB=1024
tid=0, i,j = 13,930  nnzA= 1024, nnzB=1024
tid=0, i,j = 165,934  nnzA= 1024, nnzB=1024
tid=0, i,j = 966,921  nnzA= 1024, nnzB=1024
tid=0, i,j = 31,943  nnzA= 1024, nnzB=1024
tid=0, i,j = 538,943  nnzA= 1024, nnzB=1024
tid=0, i,j = 216,923  nnzA= 1024, nnzB=1024
tid=0, i,j = 420,916  nnzA= 1024, nnzB=1024
tid=0, i,j = 456,909  nnzA= 1024, nnzB=1024
tid=0, i,j = 399,936  nnzA= 1024, nnzB=1024
tid=0, i,j = 748,939  nnzA= 1024, nnzB=1024
tid=0, i,j = 970,919  nnzA= 1024, nnzB=1024
tid=0, i,j = 755,926  nnzA= 1024, nnzB=1024
tid=0, i,j = 351,935  nnzA= 1024, nnzB=1024
tid=0, i,j = 480,918  nnzA= 1024, nnzB=1024
tid=0, i,j = 924,914  nnzA= 1024, nnzB=1024
tid=0, i,j = 685,925  nnzA= 1024, nnzB=1024
tid=0, i,j = 167,910  nnzA= 1024, nnzB=1024
tid=0, i,j = 496,939  nnzA= 1024, nnzB=1024
tid=0, i,j = 860,933  nnzA= 1024, nnzB=1024
tid=0, i,j = 356,942  nnzA= 1024, nnzB=1024
tid=0, i,j = 215,938  nnzA= 1024, nnzB=1024
tid=0, i,j = 608,920  nnzA= 1024, nnzB=1024
tid=0, i,j = 586,941  nnzA= 1024, nnzB=1024
tid=0, i,j = 479,931  nnzA= 1024, nnzB=1024
tid=0, i,j = 538,929  nnzA= 1024, nnzB=1024
tid=0, i,j = 671,945  nnzA= 1024, nnzB=1024
tid=0, i,j = 1017,950  nnzA= 1024, nnzB=1024
tid=0, i,j = 221,951  nnzA= 1024, nnzB=1024
tid=0, i,j = 628,948  nnzA= 1024, nnzB=1024
tid=0, i,j = 823,955  nnzA= 1024, nnzB=1024
tid=0, i,j = 370,964  nnzA= 1024, nnzB=1024
tid=0, i,j = 667,959  nnzA= 1024, nnzB=1024
tid=0, i,j = 1023,967  nnzA= 1024, nnzB=1024
tid=0, i,j = 78,960  nnzA= 1024, nnzB=1024
tid=0, i,j = 316,949  nnzA= 1024, nnzB=1024
tid=0, i,j = 653,956  nnzA= 1024, nnzB=1024
tid=0, i,j = 564,969  nnzA= 1024, nnzB=1024
tid=0, i,j = 656,957  nnzA= 1024, nnzB=1024
tid=0, i,j = 400,968  nnzA= 1024, nnzB=1024
tid=0, i,j = 877,962  nnzA= 1024, nnzB=1024
tid=0, i,j = 644,958  nnzA= 1024, nnzB=1024
tid=0, i,j = 246,946  nnzA= 1024, nnzB=1024
tid=0, i,j = 457,955  nnzA= 1024, nnzB=1024
tid=0, i,j = 504,965  nnzA= 1024, nnzB=1024
tid=0, i,j = 828,961  nnzA= 1024, nnzB=1024
tid=0, i,j = 182,947  nnzA= 1024, nnzB=1024
tid=0, i,j = 483,966  nnzA= 1024, nnzB=1024
tid=0, i,j = 397,963  nnzA= 1024, nnzB=1024
tid=0, i,j = 123,978  nnzA= 1024, nnzB=1024
tid=0, i,j = 549,972  nnzA= 1024, nnzB=1024
tid=0, i,j = 980,976  nnzA= 1024, nnzB=1024
tid=0, i,j = 743,985  nnzA= 1024, nnzB=1024
tid=0, i,j = 175,981  nnzA= 1024, nnzB=1024
tid=0, i,j = 371,980  nnzA= 1024, nnzB=1024
tid=0, i,j = 630,972  nnzA= 1024, nnzB=1024
tid=0, i,j = 875,971  nnzA= 1024, nnzB=1024
tid=0, i,j = 347,977  nnzA= 1024, nnzB=1024
tid=0, i,j = 934,974  nnzA= 1024, nnzB=1024
tid=0, i,j = 856,970  nnzA= 1024, nnzB=1024
tid=0, i,j = 323,986  nnzA= 1024, nnzB=1024
tid=0, i,j = 582,984  nnzA= 1024, nnzB=1024
tid=0, i,j = 340,987  nnzA= 1024, nnzB=1024
tid=0, i,j = 72,985  nnzA= 1024, nnzB=1024
tid=0, i,j = 172,988  nnzA= 1024, nnzB=1024
tid=0, i,j = 678,998  nnzA= 1024, nnzB=1024
tid=0, i,j = 660,991  nnzA= 1024, nnzB=1024
tid=0, i,j = 992,994  nnzA= 1024, nnzB=1024
tid=0, i,j = 15,992  nnzA= 1024, nnzB=1024
tid=0, i,j = 877,1001  nnzA= 1024, nnzB=1024
tid=0, i,j = 514,990  nnzA= 1024, nnzB=1024
tid=0, i,j = 585,989  nnzA= 1024, nnzB=1024
tid=0, i,j = 167,999  nnzA= 1024, nnzB=1024
tid=0, i,j = 58,983  nnzA= 1024, nnzB=1024
tid=0, i,j = 170,995  nnzA= 1024, nnzB=1024
tid=0, i,j = 946,997  nnzA= 1024, nnzB=1024
tid=0, i,j = 449,984  nnzA= 1024, nnzB=1024
tid=0, i,j = 87,993  nnzA= 1024, nnzB=1024
tid=0, i,j = 120,987  nnzA= 1024, nnzB=1024
tid=0, i,j = 531,992  nnzA= 1024, nnzB=1024
tid=0, i,j = 674,993  nnzA= 1024, nnzB=1024
tid=0, i,j = 667,1014  nnzA= 1024, nnzB=1024
tid=0, i,j = 159,1008  nnzA= 1024, nnzB=1024
tid=0, i,j = 1022,1006  nnzA= 1024, nnzB=1024
tid=0, i,j = 67,1020  nnzA= 1024, nnzB=1024
tid=0, i,j = 613,1015  nnzA= 1024, nnzB=1024
tid=0, i,j = 533,1012  nnzA= 1024, nnzB=1024
tid=0, i,j = 574,1013  nnzA= 1024, nnzB=1024
tid=0, i,j = 151,1020  nnzA= 1024, nnzB=1024
tid=0, i,j = 250,1004  nnzA= 1024, nnzB=1024
tid=0, i,j = 127,1015  nnzA= 1024, nnzB=1024
tid=0, i,j = 574,1009  nnzA= 1024, nnzB=1024
tid=0, i,j = 254,1018  nnzA= 1024, nnzB=1024
tid=0, i,j = 286,1002  nnzA= 1024, nnzB=1024
tid=0, i,j = 491,1022  nnzA= 1024, nnzB=1024
tid=0, i,j = 840,1023  nnzA= 1024, nnzB=1024
tid=0, i,j = 287,1019  nnzA= 1024, nnzB=1024
tid=0, i,j = 180,1017  nnzA= 1024, nnzB=1024
tid=0, i,j = 457,1016  nnzA= 1024, nnzB=1024
tid=0, i,j = 810,1021  nnzA= 1024, nnzB=1024
Printing bucketp
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
Done.
returned from kernel 13.5107ms

  1024x1024 GraphBLAS int32_t matrix, sparse (jumbled) by row
  sparsity control: sparse only
  C GPU, 1024 entries, memory: 28.2 KB

    (0,478)   268
    (0,574)   246
    (2,376)   235
    (5,560)   278
    (6,996)   255
    (7,183)   256
    (7,666)   248
    (8,896)   255
    (9,187)   274
    (10,446)   256
    (11,46)   270
    (11,955)   284
    (12,397)   250
    (12,953)   259
    (13,192)   278
    (14,421)   267
    (15,568)   251
    (16,788)   225
    (16,904)   246
    (17,928)   240
    (18,103)   262
    (19,821)   235
    (19,886)   236
    (20,474)   267
    (21,479)   248
    (21,975)   251
    (22,569)   255
    (23,310)   272
    (24,905)   262
    ...
Not using cuda path. M_is_hypersparse: 0, A->iso: 0, B->iso: 0, A_BITMAP: 0, B_BITMAP: 0, GB_IS_FULL(A): 0, GB_IS_FULL(B): 0, semiring header size: 32
 rmm_wrap_alloc 16384 bytes

  1024x1024 GraphBLAS int32_t matrix, sparse by row
  sparsity control: sparse only
  M actual, 1024 entries, memory: 28.2 KB

    (0,478)   0
    (0,574)   0
    (2,376)   1
    (5,560)   0
    (6,996)   0
    (7,183)   1
    (7,666)   1
    (8,896)   0
    (9,187)   0
    (10,446)   1
    (11,46)   1
    (11,955)   1
    (12,397)   0
    (12,953)   1
    (13,192)   1
    (14,421)   0
    (15,568)   1
    (16,788)   1
    (16,904)   1
    (17,928)   0
    (18,103)   1
    (19,821)   0
    (19,886)   0
    (20,474)   0
    (21,479)   1
    (21,975)   0
    (22,569)   1
    (23,310)   0
    (24,905)   1
    ...

  1024x1024 GraphBLAS int32_t matrix, sparse by row
  sparsity control: sparse only
  C GPU, 1024 entries, memory: 28.2 KB

    (0,478)   268
    (0,574)   246
    (2,376)   235
    (5,560)   278
    (6,996)   255
    (7,183)   256
    (7,666)   248
    (8,896)   255
    (9,187)   274
    (10,446)   256
    (11,46)   270
    (11,955)   284
    (12,397)   250
    (12,953)   259
    (13,192)   278
    (14,421)   267
    (15,568)   251
    (16,788)   225
    (16,904)   246
    (17,928)   240
    (18,103)   262
    (19,821)   235
    (19,886)   236
    (20,474)   267
    (21,479)   248
    (21,975)   251
    (22,569)   255
    (23,310)   272
    (24,905)   262
    (25,241)   225
    (26,428)   224
    (28,107)   228
    (28,441)   274
    (30,694)   269
    (32,121)   239
    (33,81)   249
    (34,804)   269
    (36,451)   264
    (37,609)   263
    (38,138)   258
    (39,698)   263
    (40,950)   236
    (41,568)   236
    (42,324)   238
    (43,798)   244
    (46,208)   240
    (47,70)   264
    (48,336)   277
    (49,476)   254
    (50,35)   242
    (51,556)   265
    (52,999)   247
    (53,940)   264
    (54,558)   257
    (54,960)   259
    (55,979)   251
    (56,90)   305
    (57,846)   275
    (57,893)   272
    (58,35)   260
    (59,108)   255
    (60,479)   255
    (61,590)   264
    (62,771)   259
    (63,50)   267
    (64,268)   276
    (65,694)   249
    (66,719)   261
    (67,411)   239
    (68,324)   246
    (69,477)   254
    (70,539)   241
    (71,228)   235
    (72,297)   242
    (73,665)   269
    (75,855)   227
    (76,248)   235
    (77,433)   251
    (78,90)   275
    (81,754)   270
    (82,243)   286
    (84,253)   267
    (86,104)   247
    (87,657)   255
    (89,825)   251
    (90,37)   248
    (91,234)   259
    (91,519)   276
    (92,74)   259
    (92,218)   266
    (92,690)   256
    (93,486)   268
    (94,637)   277
    (94,722)   261
    (96,564)   282
    (97,748)   245
    (99,326)   249
    (100,281)   248
    (102,609)   258
    (103,621)   277
    (104,644)   226
    (106,652)   244
    (107,239)   273
    (107,522)   234
    (108,131)   274
    (109,884)   253
    (110,402)   251
    (111,905)   256
    (112,127)   241
    (112,779)   239
    (113,278)   251
    (114,519)   264
    (115,240)   262
    (116,198)   258
    (117,219)   230
    (117,338)   251
    (118,99)   260
    (120,477)   266
    (121,554)   271
    (121,715)   291
    (122,151)   253
    (123,621)   252
    (125,177)   236
    (126,36)   275
    (128,820)   263
    (128,835)   248
    (129,660)   255
    (130,623)   246
    (130,807)   273
    (131,253)   271
    (131,355)   260
    (132,570)   264
    (133,492)   278
    (134,821)   268
    (135,295)   266
    (136,108)   263
    (137,834)   271
    (138,288)   253
    (139,284)   249
    (139,945)   286
    (140,887)   265
    (141,199)   274
    (142,87)   235
    (142,225)   261
    (143,123)   258
    (144,574)   262
    (145,552)   250
    (146,194)   244
    (146,995)   255
    (148,357)   253
    (149,949)   253
    (150,717)   255
    (151,484)   272
    (156,290)   250
    (157,714)   302
    (157,974)   274
    (158,959)   228
    (160,297)   252
    (162,601)   264
    (163,816)   271
    (164,221)   254
    (165,396)   243
    (166,801)   242
    (167,879)   234
    (168,321)   273
    (169,901)   286
    (170,612)   282
    (171,15)   253
    (172,951)   261
    (174,0)   258
    (174,595)   259
    (175,669)   254
    (176,108)   261
    (176,188)   279
    (176,614)   269
    (176,781)   255
    (177,17)   261
    (178,631)   265
    (179,932)   225
    (180,830)   258
    (182,675)   259
    (182,1001)   257
    (183,692)   240
    (184,143)   247
    (185,450)   240
    (186,779)   270
    (187,997)   256
    (188,357)   265
    (189,111)   250
    (190,990)   262
    (192,644)   269
    (192,953)   250
    (193,135)   246
    (194,137)   267
    (195,922)   276
    (197,859)   269
    (198,910)   239
    (199,531)   270
    (201,907)   253
    (202,863)   255
    (203,865)   232
    (204,614)   268
    (207,826)   239
    (208,985)   262
    (209,808)   256
    (210,659)   250
    (211,71)   236
    (211,931)   266
    (212,426)   291
    (213,152)   255
    (214,928)   264
    (215,268)   270
    (216,550)   268
    (217,921)   252
    (218,704)   246
    (218,922)   265
    (219,66)   232
    (220,704)   235
    (221,56)   280
    (221,551)   273
    (222,545)   243
    (223,1016)   249
    (224,721)   261
    (225,935)   270
    (226,727)   254
    (228,743)   240
    (229,535)   242
    (230,382)   245
    (231,551)   260
    (232,897)   273
    (233,570)   235
    (234,520)   246
    (235,522)   261
    (236,221)   244
    (237,755)   271
    (238,964)   243
    (239,82)   243
    (240,388)   238
    (241,500)   276
    (242,124)   240
    (242,193)   243
    (242,621)   243
    (243,300)   254
    (244,588)   256
    (244,1004)   265
    (245,494)   253
    (246,326)   262
    (247,115)   263
    (247,147)   263
    (248,233)   224
    (250,485)   259
    (251,708)   262
    (252,197)   237
    (253,485)   256
    (254,40)   243
    (254,238)   261
    (255,895)   243
    (256,114)   268
    (257,461)   250
    (257,796)   237
    (258,233)   236
    (260,884)   257
    (261,945)   279
    (262,368)   260
    (264,755)   251
    (265,124)   253
    (266,352)   255
    (267,10)   238
    (268,234)   248
    (269,400)   248
    (270,877)   259
    (270,924)   231
    (271,944)   245
    (272,67)   253
    (273,100)   273
    (274,979)   284
    (276,333)   258
    (277,377)   245
    (279,877)   252
    (280,18)   242
    (281,449)   240
    (282,179)   259
    (283,1007)   244
    (284,595)   271
    (285,32)   231
    (286,37)   245
    (287,126)   299
    (287,394)   257
    (288,848)   267
    (290,317)   257
    (291,594)   264
    (292,562)   257
    (294,466)   265
    (294,960)   262
    (295,1)   245
    (295,106)   252
    (296,109)   245
    (296,183)   243
    (296,245)   238
    (297,912)   281
    (297,1006)   269
    (299,159)   271
    (300,554)   260
    (301,774)   240
    (302,30)   273
    (303,645)   243
    (304,229)   263
    (305,622)   282
    (307,264)   267
    (308,28)   241
    (309,328)   249
    (309,627)   280
    (310,357)   234
    (311,355)   243
    (312,61)   239
    (313,758)   265
    (314,571)   268
    (315,177)   236
    (315,298)   244
    (315,741)   236
    (316,177)   226
    (316,308)   279
    (317,323)   245
    (318,595)   288
    (319,126)   281
    (320,468)   260
    (321,73)   267
    (322,235)   246
    (323,375)   233
    (323,651)   255
    (324,549)   239
    (325,306)   246
    (325,487)   279
    (326,649)   272
    (327,704)   246
    (328,142)   271
    (329,176)   257
    (330,848)   249
    (330,965)   244
    (332,795)   265
    (334,695)   275
    (335,694)   236
    (336,775)   251
    (336,808)   231
    (337,608)   236
    (338,993)   243
    (339,680)   277
    (340,849)   251
    (341,36)   273
    (342,723)   252
    (343,678)   235
    (344,384)   255
    (344,680)   248
    (345,75)   252
    (347,996)   264
    (348,60)   280
    (348,821)   297
    (349,804)   265
    (350,282)   254
    (351,142)   272
    (351,937)   275
    (352,160)   256
    (353,536)   260
    (355,352)   264
    (356,340)   243
    (358,678)   257
    (360,679)   276
    (361,794)   255
    (361,989)   264
    (362,816)   295
    (363,206)   250
    (364,629)   267
    (365,990)   269
    (366,841)   262
    (366,971)   261
    (367,888)   315
    (368,587)   245
    (369,684)   261
    (370,270)   253
    (371,327)   257
    (372,471)   258
    (373,88)   246
    (374,669)   242
    (375,992)   241
    (376,336)   259
    (377,86)   292
    (378,882)   270
    (379,592)   264
    (380,77)   258
    (380,643)   240
    (381,1012)   255
    (382,816)   253
    (383,711)   240
    (385,670)   249
    (386,537)   255
    (387,347)   240
    (388,494)   268
    (389,328)   235
    (389,733)   237
    (390,551)   269
    (391,59)   254
    (391,600)   270
    (394,692)   247
    (396,645)   233
    (397,835)   259
    (398,107)   261
    (398,246)   264
    (399,436)   267
    (400,172)   260
    (400,382)   240
    (401,790)   245
    (402,320)   258
    (403,40)   257
    (404,641)   250
    (405,49)   269
    (405,475)   257
    (407,320)   277
    (408,61)   253
    (410,754)   239
    (411,643)   269
    (412,949)   260
    (413,94)   254
    (414,991)   257
    (415,26)   244
    (416,575)   254
    (417,366)   232
    (418,160)   258
    (418,669)   266
    (419,209)   252
    (419,285)   266
    (420,748)   277
    (421,614)   258
    (422,177)   217
    (423,873)   251
    (424,542)   258
    (425,263)   247
    (426,377)   261
    (427,149)   236
    (428,950)   246
    (429,305)   277
    (430,718)   237
    (431,51)   246
    (432,857)   246
    (434,604)   248
    (435,152)   248
    (436,356)   286
    (437,105)   235
    (438,814)   254
    (440,338)   251
    (441,982)   259
    (442,880)   244
    (443,753)   273
    (444,669)   240
    (445,952)   236
    (446,741)   264
    (447,970)   247
    (448,646)   244
    (448,744)   237
    (449,835)   286
    (450,579)   241
    (451,147)   258
    (451,1017)   257
    (452,868)   247
    (453,26)   262
    (454,415)   236
    (454,668)   249
    (455,43)   247
    (456,849)   270
    (456,985)   251
    (457,218)   266
    (458,510)   282
    (459,737)   250
    (460,836)   269
    (461,849)   263
    (461,917)   270
    (462,900)   262
    (463,316)   256
    (464,762)   250
    (465,355)   262
    (465,801)   254
    (466,673)   247
    (467,112)   260
    (468,288)   261
    (470,889)   248
    (471,650)   269
    (473,121)   239
    (473,127)   251
    (474,487)   265
    (475,382)   218
    (476,44)   258
    (477,342)   257
    (478,786)   267
    (480,667)   244
    (481,558)   252
    (482,680)   224
    (483,517)   270
    (484,961)   276
    (485,274)   249
    (486,1015)   262
    (487,194)   241
    (489,802)   252
    (490,811)   260
    (491,319)   254
    (492,377)   242
    (494,432)   207
    (495,809)   292
    (496,267)   255
    (496,902)   247
    (498,194)   244
    (499,952)   273
    (500,84)   259
    (501,704)   233
    (503,519)   278
    (504,510)   264
    (504,887)   262
    (505,574)   285
    (507,643)   259
    (508,449)   241
    (512,892)   253
    (513,271)   242
    (514,404)   276
    (515,758)   263
    (517,369)   271
    (518,293)   245
    (519,786)   261
    (520,270)   256
    (521,1013)   259
    (522,284)   262
    (523,632)   265
    (524,945)   273
    (525,94)   249
    (525,362)   257
    (526,52)   282
    (527,61)   242
    (528,294)   274
    (529,145)   248
    (529,998)   261
    (530,112)   253
    (531,908)   249
    (533,674)   252
    (534,505)   227
    (535,660)   261
    (535,776)   265
    (536,500)   274
    (537,799)   258
    (538,492)   241
    (538,861)   258
    (540,245)   272
    (542,137)   268
    (545,658)   246
    (546,213)   272
    (547,767)   255
    (547,912)   279
    (547,1018)   252
    (548,46)   261
    (548,697)   265
    (549,602)   257
    (550,927)   277
    (552,710)   271
    (553,391)   244
    (554,351)   227
    (555,10)   235
    (556,26)   238
    (557,910)   255
    (558,552)   261
    (560,792)   265
    (561,597)   257
    (562,182)   264
    (562,862)   261
    (563,877)   276
    (564,310)   259
    (564,609)   251
    (565,490)   251
    (566,564)   263
    (566,607)   251
    (569,872)   279
    (570,465)   263
    (571,271)   271
    (571,919)   243
    (572,630)   237
    (574,603)   272
    (576,256)   284
    (579,274)   236
    (580,182)   252
    (581,445)   251
    (582,177)   196
    (583,118)   280
    (584,399)   250
    (585,433)   244
    (587,254)   237
    (588,914)   254
    (589,1016)   269
    (590,95)   277
    (590,802)   279
    (591,978)   265
    (592,527)   245
    (593,143)   276
    (594,430)   232
    (595,787)   261
    (596,677)   247
    (598,788)   250
    (599,127)   228
    (600,339)   249
    (601,478)   271
    (602,218)   271
    (603,759)   242
    (604,270)   247
    (605,76)   243
    (606,930)   257
    (608,832)   267
    (609,287)   265
    (610,794)   256
    (611,759)   247
    (612,1006)   282
    (613,398)   239
    (614,386)   259
    (615,115)   264
    (616,928)   254
    (617,30)   260
    (618,361)   243
    (619,996)   222
    (620,5)   248
    (620,337)   256
    (621,41)   251
    (623,44)   267
    (623,79)   252
    (623,966)   263
    (624,19)   270
    (624,242)   258
    (624,524)   244
    (625,683)   288
    (626,51)   242
    (627,361)   257
    (628,396)   248
    (629,882)   260
    (630,341)   237
    (631,49)   238
    (631,585)   234
    (632,73)   268
    (634,912)   278
    (635,882)   266
    (636,617)   252
    (637,285)   251
    (637,716)   275
    (638,113)   274
    (638,367)   254
    (639,616)   258
    (640,837)   234
    (641,457)   251
    (643,934)   265
    (647,783)   240
    (648,195)   270
    (649,614)   239
    (650,957)   265
    (651,281)   252
    (652,973)   267
    (653,60)   249
    (653,333)   268
    (654,605)   272
    (655,910)   234
    (656,349)   255
    (659,17)   250
    (660,591)   275
    (661,512)   277
    (663,767)   258
    (664,158)   224
    (665,77)   239
    (666,503)   248
    (667,951)   261
    (668,365)   278
    (669,300)   273
    (671,141)   272
    (671,565)   285
    (672,819)   223
    (674,36)   249
    (674,819)   249
    (675,454)   234
    (676,242)   263
    (677,289)   278
    (677,647)   255
    (678,802)   240
    (679,899)   242
    (680,398)   266
    (681,390)   266
    (681,699)   233
    (682,117)   246
    (683,110)   265
    (684,907)   243
    (685,17)   239
    (686,202)   255
    (687,45)   222
    (688,287)   242
    (689,502)   257
    (690,299)   252
    (691,392)   256
    (692,600)   264
    (694,378)   243
    (695,702)   271
    (696,102)   251
    (698,631)   252
    (699,152)   272
    (700,840)   267
    (701,323)   239
    (702,777)   232
    (703,132)   264
    (704,374)   261
    (705,579)   254
    (706,511)   233
    (707,76)   261
    (708,259)   269
    (708,925)   266
    (709,872)   269
    (709,873)   265
    (710,107)   235
    (710,293)   266
    (711,210)   257
    (711,462)   267
    (714,475)   245
    (715,172)   253
    (715,751)   241
    (716,697)   249
    (717,234)   239
    (717,620)   244
    (718,848)   260
    (719,331)   265
    (720,201)   255
    (720,725)   272
    (721,806)   262
    (722,415)   239
    (722,934)   262
    (723,675)   249
    (724,480)   259
    (726,337)   259
    (727,177)   237
    (728,797)   272
    (729,884)   241
    (730,767)   249
    (731,275)   275
    (732,910)   231
    (733,763)   283
    (734,574)   263
    (735,268)   253
    (736,115)   218
    (737,146)   238
    (737,912)   249
    (738,1023)   252
    (739,335)   259
    (740,596)   233
    (741,365)   270
    (741,630)   256
    (742,485)   250
    (743,186)   252
    (745,621)   250
    (745,645)   246
    (746,273)   276
    (747,91)   256
    (748,886)   245
    (749,59)   273
    (749,755)   254
    (751,348)   253
    (752,313)   255
    (752,742)   277
    (752,745)   260
    (753,472)   260
    (753,592)   249
    (754,1007)   234
    (756,633)   255
    (758,847)   268
    (759,500)   253
    (760,340)   251
    (760,381)   270
    (762,962)   270
    (763,954)   236
    (764,392)   236
    (764,913)   258
    (766,915)   265
    (766,936)   259
    (767,372)   266
    (768,307)   266
    (770,458)   265
    (771,103)   241
    (771,487)   264
    (773,56)   248
    (774,773)   259
    (775,115)   266
    (776,537)   254
    (777,392)   258
    (778,893)   287
    (779,644)   270
    (780,256)   263
    (781,899)   261
    (782,399)   251
    (782,892)   277
    (783,614)   237
    (784,54)   231
    (785,816)   261
    (786,462)   248
    (787,876)   262
    (788,273)   276
    (789,696)   260
    (790,471)   251
    (791,793)   261
    (792,636)   264
    (792,955)   263
    (793,809)   269
    (794,986)   249
    (795,656)   253
    (796,347)   246
    (797,880)   264
    (798,802)   256
    (799,294)   267
    (800,970)   231
    (801,130)   244
    (803,896)   256
    (804,1022)   257
    (805,32)   232
    (805,479)   257
    (806,889)   245
    (807,504)   251
    (809,719)   272
    (809,737)   270
    (810,646)   241
    (811,547)   238
    (812,375)   262
    (813,200)   257
    (815,408)   252
    (816,902)   256
    (817,430)   241
    (818,985)   256
    (819,688)   254
    (821,839)   257
    (822,747)   262
    (823,39)   259
    (824,886)   241
    (825,406)   247
    (826,814)   242
    (827,625)   266
    (828,407)   260
    (829,511)   254
    (830,915)   263
    (831,982)   266
    (832,1003)   246
    (833,362)   259
    (833,999)   258
    (834,136)   263
    (834,295)   267
    (835,115)   281
    (836,218)   272
    (837,565)   285
    (839,541)   280
    (839,711)   273
    (840,159)   251
    (841,103)   240
    (841,636)   271
    (842,136)   257
    (843,524)   254
    (844,114)   260
    (845,694)   268
    (846,533)   274
    (847,741)   243
    (848,483)   269
    (849,464)   257
    (850,302)   245
    (851,567)   248
    (852,150)   262
    (852,529)   258
    (853,623)   234
    (855,106)   265
    (856,1014)   261
    (857,151)   270
    (857,650)   280
    (858,781)   242
    (858,994)   242
    (859,508)   255
    (859,716)   284
    (862,636)   241
    (863,21)   242
    (864,1022)   242
    (865,972)   264
    (866,97)   243
    (867,48)   235
    (868,303)   249
    (869,364)   255
    (870,506)   241
    (871,453)   255
    (872,775)   259
    (873,173)   269
    (874,485)   249
    (875,168)   249
    (876,357)   243
    (877,722)   255
    (877,990)   267
    (880,176)   291
    (881,23)   268
    (882,608)   248
    (883,929)   251
    (884,643)   247
    (885,687)   259
    (887,487)   257
    (888,110)   266
    (888,943)   264
    (889,892)   267
    (890,628)   261
    (891,679)   258
    (892,653)   254
    (894,33)   258
    (895,37)   266
    (895,695)   269
    (896,390)   269
    (897,42)   265
    (900,687)   281
    (901,146)   241
    (901,605)   261
    (902,57)   230
    (903,1021)   250
    (904,808)   237
    (905,795)   271
    (906,479)   257
    (907,674)   277
    (909,456)   250
    (910,167)   265
    (911,548)   248
    (914,924)   250
    (915,366)   253
    (915,502)   238
    (916,420)   273
    (916,823)   247
    (918,480)   248
    (919,970)   259
    (920,608)   246
    (921,966)   230
    (923,216)   247
    (925,685)   275
    (926,755)   274
    (929,538)   268
    (930,13)   259
    (931,479)   250
    (933,860)   261
    (934,165)   250
    (935,351)   233
    (936,399)   244
    (938,215)   264
    (939,496)   276
    (939,748)   262
    (940,414)   242
    (941,586)   265
    (942,356)   274
    (943,31)   263
    (943,538)   262
    (944,109)   249
    (945,671)   258
    (946,246)   255
    (947,182)   262
    (948,628)   262
    (949,316)   238
    (950,1017)   259
    (951,221)   250
    (955,457)   237
    (955,823)   241
    (956,653)   258
    (957,656)   255
    (958,644)   238
    (959,667)   246
    (960,78)   247
    (961,828)   252
    (962,877)   269
    (963,397)   284
    (964,370)   262
    (965,504)   244
    (966,483)   246
    (967,1023)   246
    (968,400)   233
    (969,564)   254
    (970,856)   257
    (971,875)   243
    (972,549)   259
    (972,630)   240
    (974,934)   281
    (976,980)   247
    (977,347)   230
    (978,123)   258
    (980,371)   245
    (981,175)   258
    (983,58)   252
    (984,449)   248
    (984,582)   246
    (985,72)   253
    (985,743)   237
    (986,323)   248
    (987,120)   241
    (987,340)   266
    (988,172)   251
    (989,585)   241
    (990,514)   271
    (991,660)   256
    (992,15)   283
    (992,531)   277
    (993,87)   267
    (993,674)   252
    (994,992)   244
    (995,170)   269
    (997,946)   270
    (998,678)   251
    (999,167)   258
    (1001,877)   250
    (1002,286)   242
    (1004,250)   259
    (1006,1022)   248
    (1008,159)   264
    (1009,574)   258
    (1012,533)   270
    (1013,574)   273
    (1014,667)   247
    (1015,127)   244
    (1015,613)   245
    (1016,457)   246
    (1017,180)   267
    (1018,254)   237
    (1019,287)   248
    (1020,67)   261
    (1020,151)   248
    (1021,810)   239
    (1022,491)   268
    (1023,840)   264


  1024x1024 GraphBLAS int32_t matrix, sparse by row
  C_actual, 1024 entries, memory: 40.2 KB

    (0,478)   268
    (0,574)   246
    (2,376)   235
    (5,560)   278
    (6,996)   255
    (7,183)   256
    (7,666)   248
    (8,896)   255
    (9,187)   274
    (10,446)   256
    (11,46)   270
    (11,955)   284
    (12,397)   250
    (12,953)   259
    (13,192)   278
    (14,421)   267
    (15,568)   251
    (16,788)   225
    (16,904)   246
    (17,928)   240
    (18,103)   262
    (19,821)   235
    (19,886)   236
    (20,474)   267
    (21,479)   248
    (21,975)   251
    (22,569)   255
    (23,310)   272
    (24,905)   262
    (25,241)   225
    (26,428)   224
    (28,107)   228
    (28,441)   274
    (30,694)   269
    (32,121)   239
    (33,81)   249
    (34,804)   269
    (36,451)   264
    (37,609)   263
    (38,138)   258
    (39,698)   263
    (40,950)   236
    (41,568)   236
    (42,324)   238
    (43,798)   244
    (46,208)   240
    (47,70)   264
    (48,336)   277
    (49,476)   254
    (50,35)   242
    (51,556)   265
    (52,999)   247
    (53,940)   264
    (54,558)   257
    (54,960)   259
    (55,979)   251
    (56,90)   305
    (57,846)   275
    (57,893)   272
    (58,35)   260
    (59,108)   255
    (60,479)   255
    (61,590)   264
    (62,771)   259
    (63,50)   267
    (64,268)   276
    (65,694)   249
    (66,719)   261
    (67,411)   239
    (68,324)   246
    (69,477)   254
    (70,539)   241
    (71,228)   235
    (72,297)   242
    (73,665)   269
    (75,855)   227
    (76,248)   235
    (77,433)   251
    (78,90)   275
    (81,754)   270
    (82,243)   286
    (84,253)   267
    (86,104)   247
    (87,657)   255
    (89,825)   251
    (90,37)   248
    (91,234)   259
    (91,519)   276
    (92,74)   259
    (92,218)   266
    (92,690)   256
    (93,486)   268
    (94,637)   277
    (94,722)   261
    (96,564)   282
    (97,748)   245
    (99,326)   249
    (100,281)   248
    (102,609)   258
    (103,621)   277
    (104,644)   226
    (106,652)   244
    (107,239)   273
    (107,522)   234
    (108,131)   274
    (109,884)   253
    (110,402)   251
    (111,905)   256
    (112,127)   241
    (112,779)   239
    (113,278)   251
    (114,519)   264
    (115,240)   262
    (116,198)   258
    (117,219)   230
    (117,338)   251
    (118,99)   260
    (120,477)   266
    (121,554)   271
    (121,715)   291
    (122,151)   253
    (123,621)   252
    (125,177)   236
    (126,36)   275
    (128,820)   263
    (128,835)   248
    (129,660)   255
    (130,623)   246
    (130,807)   273
    (131,253)   271
    (131,355)   260
    (132,570)   264
    (133,492)   278
    (134,821)   268
    (135,295)   266
    (136,108)   263
    (137,834)   271
    (138,288)   253
    (139,284)   249
    (139,945)   286
    (140,887)   265
    (141,199)   274
    (142,87)   235
    (142,225)   261
    (143,123)   258
    (144,574)   262
    (145,552)   250
    (146,194)   244
    (146,995)   255
    (148,357)   253
    (149,949)   253
    (150,717)   255
    (151,484)   272
    (156,290)   250
    (157,714)   302
    (157,974)   274
    (158,959)   228
    (160,297)   252
    (162,601)   264
    (163,816)   271
    (164,221)   254
    (165,396)   243
    (166,801)   242
    (167,879)   234
    (168,321)   273
    (169,901)   286
    (170,612)   282
    (171,15)   253
    (172,951)   261
    (174,0)   258
    (174,595)   259
    (175,669)   254
    (176,108)   261
    (176,188)   279
    (176,614)   269
    (176,781)   255
    (177,17)   261
    (178,631)   265
    (179,932)   225
    (180,830)   258
    (182,675)   259
    (182,1001)   257
    (183,692)   240
    (184,143)   247
    (185,450)   240
    (186,779)   270
    (187,997)   256
    (188,357)   265
    (189,111)   250
    (190,990)   262
    (192,644)   269
    (192,953)   250
    (193,135)   246
    (194,137)   267
    (195,922)   276
    (197,859)   269
    (198,910)   239
    (199,531)   270
    (201,907)   253
    (202,863)   255
    (203,865)   232
    (204,614)   268
    (207,826)   239
    (208,985)   262
    (209,808)   256
    (210,659)   250
    (211,71)   236
    (211,931)   266
    (212,426)   291
    (213,152)   255
    (214,928)   264
    (215,268)   270
    (216,550)   268
    (217,921)   252
    (218,704)   246
    (218,922)   265
    (219,66)   232
    (220,704)   235
    (221,56)   280
    (221,551)   273
    (222,545)   243
    (223,1016)   249
    (224,721)   261
    (225,935)   270
    (226,727)   254
    (228,743)   240
    (229,535)   242
    (230,382)   245
    (231,551)   260
    (232,897)   273
    (233,570)   235
    (234,520)   246
    (235,522)   261
    (236,221)   244
    (237,755)   271
    (238,964)   243
    (239,82)   243
    (240,388)   238
    (241,500)   276
    (242,124)   240
    (242,193)   243
    (242,621)   243
    (243,300)   254
    (244,588)   256
    (244,1004)   265
    (245,494)   253
    (246,326)   262
    (247,115)   263
    (247,147)   263
    (248,233)   224
    (250,485)   259
    (251,708)   262
    (252,197)   237
    (253,485)   256
    (254,40)   243
    (254,238)   261
    (255,895)   243
    (256,114)   268
    (257,461)   250
    (257,796)   237
    (258,233)   236
    (260,884)   257
    (261,945)   279
    (262,368)   260
    (264,755)   251
    (265,124)   253
    (266,352)   255
    (267,10)   238
    (268,234)   248
    (269,400)   248
    (270,877)   259
    (270,924)   231
    (271,944)   245
    (272,67)   253
    (273,100)   273
    (274,979)   284
    (276,333)   258
    (277,377)   245
    (279,877)   252
    (280,18)   242
    (281,449)   240
    (282,179)   259
    (283,1007)   244
    (284,595)   271
    (285,32)   231
    (286,37)   245
    (287,126)   299
    (287,394)   257
    (288,848)   267
    (290,317)   257
    (291,594)   264
    (292,562)   257
    (294,466)   265
    (294,960)   262
    (295,1)   245
    (295,106)   252
    (296,109)   245
    (296,183)   243
    (296,245)   238
    (297,912)   281
    (297,1006)   269
    (299,159)   271
    (300,554)   260
    (301,774)   240
    (302,30)   273
    (303,645)   243
    (304,229)   263
    (305,622)   282
    (307,264)   267
    (308,28)   241
    (309,328)   249
    (309,627)   280
    (310,357)   234
    (311,355)   243
    (312,61)   239
    (313,758)   265
    (314,571)   268
    (315,177)   236
    (315,298)   244
    (315,741)   236
    (316,177)   226
    (316,308)   279
    (317,323)   245
    (318,595)   288
    (319,126)   281
    (320,468)   260
    (321,73)   267
    (322,235)   246
    (323,375)   233
    (323,651)   255
    (324,549)   239
    (325,306)   246
    (325,487)   279
    (326,649)   272
    (327,704)   246
    (328,142)   271
    (329,176)   257
    (330,848)   249
    (330,965)   244
    (332,795)   265
    (334,695)   275
    (335,694)   236
    (336,775)   251
    (336,808)   231
    (337,608)   236
    (338,993)   243
    (339,680)   277
    (340,849)   251
    (341,36)   273
    (342,723)   252
    (343,678)   235
    (344,384)   255
    (344,680)   248
    (345,75)   252
    (347,996)   264
    (348,60)   280
    (348,821)   297
    (349,804)   265
    (350,282)   254
    (351,142)   272
    (351,937)   275
    (352,160)   256
    (353,536)   260
    (355,352)   264
    (356,340)   243
    (358,678)   257
    (360,679)   276
    (361,794)   255
    (361,989)   264
    (362,816)   295
    (363,206)   250
    (364,629)   267
    (365,990)   269
    (366,841)   262
    (366,971)   261
    (367,888)   315
    (368,587)   245
    (369,684)   261
    (370,270)   253
    (371,327)   257
    (372,471)   258
    (373,88)   246
    (374,669)   242
    (375,992)   241
    (376,336)   259
    (377,86)   292
    (378,882)   270
    (379,592)   264
    (380,77)   258
    (380,643)   240
    (381,1012)   255
    (382,816)   253
    (383,711)   240
    (385,670)   249
    (386,537)   255
    (387,347)   240
    (388,494)   268
    (389,328)   235
    (389,733)   237
    (390,551)   269
    (391,59)   254
    (391,600)   270
    (394,692)   247
    (396,645)   233
    (397,835)   259
    (398,107)   261
    (398,246)   264
    (399,436)   267
    (400,172)   260
    (400,382)   240
    (401,790)   245
    (402,320)   258
    (403,40)   257
    (404,641)   250
    (405,49)   269
    (405,475)   257
    (407,320)   277
    (408,61)   253
    (410,754)   239
    (411,643)   269
    (412,949)   260
    (413,94)   254
    (414,991)   257
    (415,26)   244
    (416,575)   254
    (417,366)   232
    (418,160)   258
    (418,669)   266
    (419,209)   252
    (419,285)   266
    (420,748)   277
    (421,614)   258
    (422,177)   217
    (423,873)   251
    (424,542)   258
    (425,263)   247
    (426,377)   261
    (427,149)   236
    (428,950)   246
    (429,305)   277
    (430,718)   237
    (431,51)   246
    (432,857)   246
    (434,604)   248
    (435,152)   248
    (436,356)   286
    (437,105)   235
    (438,814)   254
    (440,338)   251
    (441,982)   259
    (442,880)   244
    (443,753)   273
    (444,669)   240
    (445,952)   236
    (446,741)   264
    (447,970)   247
    (448,646)   244
    (448,744)   237
    (449,835)   286
    (450,579)   241
    (451,147)   258
    (451,1017)   257
    (452,868)   247
    (453,26)   262
    (454,415)   236
    (454,668)   249
    (455,43)   247
    (456,849)   270
    (456,985)   251
    (457,218)   266
    (458,510)   282
    (459,737)   250
    (460,836)   269
    (461,849)   263
    (461,917)   270
    (462,900)   262
    (463,316)   256
    (464,762)   250
    (465,355)   262
    (465,801)   254
    (466,673)   247
    (467,112)   260
    (468,288)   261
    (470,889)   248
    (471,650)   269
    (473,121)   239
    (473,127)   251
    (474,487)   265
    (475,382)   218
    (476,44)   258
    (477,342)   257
    (478,786)   267
    (480,667)   244
    (481,558)   252
    (482,680)   224
    (483,517)   270
    (484,961)   276
    (485,274)   249
    (486,1015)   262
    (487,194)   241
    (489,802)   252
    (490,811)   260
    (491,319)   254
    (492,377)   242
    (494,432)   207
    (495,809)   292
    (496,267)   255
    (496,902)   247
    (498,194)   244
    (499,952)   273
    (500,84)   259
    (501,704)   233
    (503,519)   278
    (504,510)   264
    (504,887)   262
    (505,574)   285
    (507,643)   259
    (508,449)   241
    (512,892)   253
    (513,271)   242
    (514,404)   276
    (515,758)   263
    (517,369)   271
    (518,293)   245
    (519,786)   261
    (520,270)   256
    (521,1013)   259
    (522,284)   262
    (523,632)   265
    (524,945)   273
    (525,94)   249
    (525,362)   257
    (526,52)   282
    (527,61)   242
    (528,294)   274
    (529,145)   248
    (529,998)   261
    (530,112)   253
    (531,908)   249
    (533,674)   252
    (534,505)   227
    (535,660)   261
    (535,776)   265
    (536,500)   274
    (537,799)   258
    (538,492)   241
    (538,861)   258
    (540,245)   272
    (542,137)   268
    (545,658)   246
    (546,213)   272
    (547,767)   255
    (547,912)   279
    (547,1018)   252
    (548,46)   261
    (548,697)   265
    (549,602)   257
    (550,927)   277
    (552,710)   271
    (553,391)   244
    (554,351)   227
    (555,10)   235
    (556,26)   238
    (557,910)   255
    (558,552)   261
    (560,792)   265
    (561,597)   257
    (562,182)   264
    (562,862)   261
    (563,877)   276
    (564,310)   259
    (564,609)   251
    (565,490)   251
    (566,564)   263
    (566,607)   251
    (569,872)   279
    (570,465)   263
    (571,271)   271
    (571,919)   243
    (572,630)   237
    (574,603)   272
    (576,256)   284
    (579,274)   236
    (580,182)   252
    (581,445)   251
    (582,177)   196
    (583,118)   280
    (584,399)   250
    (585,433)   244
    (587,254)   237
    (588,914)   254
    (589,1016)   269
    (590,95)   277
    (590,802)   279
    (591,978)   265
    (592,527)   245
    (593,143)   276
    (594,430)   232
    (595,787)   261
    (596,677)   247
    (598,788)   250
    (599,127)   228
    (600,339)   249
    (601,478)   271
    (602,218)   271
    (603,759)   242
    (604,270)   247
    (605,76)   243
    (606,930)   257
    (608,832)   267
    (609,287)   265
    (610,794)   256
    (611,759)   247
    (612,1006)   282
    (613,398)   239
    (614,386)   259
    (615,115)   264
    (616,928)   254
    (617,30)   260
    (618,361)   243
    (619,996)   222
    (620,5)   248
    (620,337)   256
    (621,41)   251
    (623,44)   267
    (623,79)   252
    (623,966)   263
    (624,19)   270
    (624,242)   258
    (624,524)   244
    (625,683)   288
    (626,51)   242
    (627,361)   257
    (628,396)   248
    (629,882)   260
    (630,341)   237
    (631,49)   238
    (631,585)   234
    (632,73)   268
    (634,912)   278
    (635,882)   266
    (636,617)   252
    (637,285)   251
    (637,716)   275
    (638,113)   274
    (638,367)   254
    (639,616)   258
    (640,837)   234
    (641,457)   251
    (643,934)   265
    (647,783)   240
    (648,195)   270
    (649,614)   239
    (650,957)   265
    (651,281)   252
    (652,973)   267
    (653,60)   249
    (653,333)   268
    (654,605)   272
    (655,910)   234
    (656,349)   255
    (659,17)   250
    (660,591)   275
    (661,512)   277
    (663,767)   258
    (664,158)   224
    (665,77)   239
    (666,503)   248
    (667,951)   261
    (668,365)   278
    (669,300)   273
    (671,141)   272
    (671,565)   285
    (672,819)   223
    (674,36)   249
    (674,819)   249
    (675,454)   234
    (676,242)   263
    (677,289)   278
    (677,647)   255
    (678,802)   240
    (679,899)   242
    (680,398)   266
    (681,390)   266
    (681,699)   233
    (682,117)   246
    (683,110)   265
    (684,907)   243
    (685,17)   239
    (686,202)   255
    (687,45)   222
    (688,287)   242
    (689,502)   257
    (690,299)   252
    (691,392)   256
    (692,600)   264
    (694,378)   243
    (695,702)   271
    (696,102)   251
    (698,631)   252
    (699,152)   272
    (700,840)   267
    (701,323)   239
    (702,777)   232
    (703,132)   264
    (704,374)   261
    (705,579)   254
    (706,511)   233
    (707,76)   261
    (708,259)   269
    (708,925)   266
    (709,872)   269
    (709,873)   265
    (710,107)   235
    (710,293)   266
    (711,210)   257
    (711,462)   267
    (714,475)   245
    (715,172)   253
    (715,751)   241
    (716,697)   249
    (717,234)   239
    (717,620)   244
    (718,848)   260
    (719,331)   265
    (720,201)   255
    (720,725)   272
    (721,806)   262
    (722,415)   239
    (722,934)   262
    (723,675)   249
    (724,480)   259
    (726,337)   259
    (727,177)   237
    (728,797)   272
    (729,884)   241
    (730,767)   249
    (731,275)   275
    (732,910)   231
    (733,763)   283
    (734,574)   263
    (735,268)   253
    (736,115)   218
    (737,146)   238
    (737,912)   249
    (738,1023)   252
    (739,335)   259
    (740,596)   233
    (741,365)   270
    (741,630)   256
    (742,485)   250
    (743,186)   252
    (745,621)   250
    (745,645)   246
    (746,273)   276
    (747,91)   256
    (748,886)   245
    (749,59)   273
    (749,755)   254
    (751,348)   253
    (752,313)   255
    (752,742)   277
    (752,745)   260
    (753,472)   260
    (753,592)   249
    (754,1007)   234
    (756,633)   255
    (758,847)   268
    (759,500)   253
    (760,340)   251
    (760,381)   270
    (762,962)   270
    (763,954)   236
    (764,392)   236
    (764,913)   258
    (766,915)   265
    (766,936)   259
    (767,372)   266
    (768,307)   266
    (770,458)   265
    (771,103)   241
    (771,487)   264
    (773,56)   248
    (774,773)   259
    (775,115)   266
    (776,537)   254
    (777,392)   258
    (778,893)   287
    (779,644)   270
    (780,256)   263
    (781,899)   261
    (782,399)   251
    (782,892)   277
    (783,614)   237
    (784,54)   231
    (785,816)   261
    (786,462)   248
    (787,876)   262
    (788,273)   276
    (789,696)   260
    (790,471)   251
    (791,793)   261
    (792,636)   264
    (792,955)   263
    (793,809)   269
    (794,986)   249
    (795,656)   253
    (796,347)   246
    (797,880)   264
    (798,802)   256
    (799,294)   267
    (800,970)   231
    (801,130)   244
    (803,896)   256
    (804,1022)   257
    (805,32)   232
    (805,479)   257
    (806,889)   245
    (807,504)   251
    (809,719)   272
    (809,737)   270
    (810,646)   241
    (811,547)   238
    (812,375)   262
    (813,200)   257
    (815,408)   252
    (816,902)   256
    (817,430)   241
    (818,985)   256
    (819,688)   254
    (821,839)   257
    (822,747)   262
    (823,39)   259
    (824,886)   241
    (825,406)   247
    (826,814)   242
    (827,625)   266
    (828,407)   260
    (829,511)   254
    (830,915)   263
    (831,982)   266
    (832,1003)   246
    (833,362)   259
    (833,999)   258
    (834,136)   263
    (834,295)   267
    (835,115)   281
    (836,218)   272
    (837,565)   285
    (839,541)   280
    (839,711)   273
    (840,159)   251
    (841,103)   240
    (841,636)   271
    (842,136)   257
    (843,524)   254
    (844,114)   260
    (845,694)   268
    (846,533)   274
    (847,741)   243
    (848,483)   269
    (849,464)   257
    (850,302)   245
    (851,567)   248
    (852,150)   262
    (852,529)   258
    (853,623)   234
    (855,106)   265
    (856,1014)   261
    (857,151)   270
    (857,650)   280
    (858,781)   242
    (858,994)   242
    (859,508)   255
    (859,716)   284
    (862,636)   241
    (863,21)   242
    (864,1022)   242
    (865,972)   264
    (866,97)   243
    (867,48)   235
    (868,303)   249
    (869,364)   255
    (870,506)   241
    (871,453)   255
    (872,775)   259
    (873,173)   269
    (874,485)   249
    (875,168)   249
    (876,357)   243
    (877,722)   255
    (877,990)   267
    (880,176)   291
    (881,23)   268
    (882,608)   248
    (883,929)   251
    (884,643)   247
    (885,687)   259
    (887,487)   257
    (888,110)   266
    (888,943)   264
    (889,892)   267
    (890,628)   261
    (891,679)   258
    (892,653)   254
    (894,33)   258
    (895,37)   266
    (895,695)   269
    (896,390)   269
    (897,42)   265
    (900,687)   281
    (901,146)   241
    (901,605)   261
    (902,57)   230
    (903,1021)   250
    (904,808)   237
    (905,795)   271
    (906,479)   257
    (907,674)   277
    (909,456)   250
    (910,167)   265
    (911,548)   248
    (914,924)   250
    (915,366)   253
    (915,502)   238
    (916,420)   273
    (916,823)   247
    (918,480)   248
    (919,970)   259
    (920,608)   246
    (921,966)   230
    (923,216)   247
    (925,685)   275
    (926,755)   274
    (929,538)   268
    (930,13)   259
    (931,479)   250
    (933,860)   261
    (934,165)   250
    (935,351)   233
    (936,399)   244
    (938,215)   264
    (939,496)   276
    (939,748)   262
    (940,414)   242
    (941,586)   265
    (942,356)   274
    (943,31)   263
    (943,538)   262
    (944,109)   249
    (945,671)   258
    (946,246)   255
    (947,182)   262
    (948,628)   262
    (949,316)   238
    (950,1017)   259
    (951,221)   250
    (955,457)   237
    (955,823)   241
    (956,653)   258
    (957,656)   255
    (958,644)   238
    (959,667)   246
    (960,78)   247
    (961,828)   252
    (962,877)   269
    (963,397)   284
    (964,370)   262
    (965,504)   244
    (966,483)   246
    (967,1023)   246
    (968,400)   233
    (969,564)   254
    (970,856)   257
    (971,875)   243
    (972,549)   259
    (972,630)   240
    (974,934)   281
    (976,980)   247
    (977,347)   230
    (978,123)   258
    (980,371)   245
    (981,175)   258
    (983,58)   252
    (984,449)   248
    (984,582)   246
    (985,72)   253
    (985,743)   237
    (986,323)   248
    (987,120)   241
    (987,340)   266
    (988,172)   251
    (989,585)   241
    (990,514)   271
    (991,660)   256
    (992,15)   283
    (992,531)   277
    (993,87)   267
    (993,674)   252
    (994,992)   244
    (995,170)   269
    (997,946)   270
    (998,678)   251
    (999,167)   258
    (1001,877)   250
    (1002,286)   242
    (1004,250)   259
    (1006,1022)   248
    (1008,159)   264
    (1009,574)   258
    (1012,533)   270
    (1013,574)   273
    (1014,667)   247
    (1015,127)   244
    (1015,613)   245
    (1016,457)   246
    (1017,180)   267
    (1018,254)   237
    (1019,287)   248
    (1020,67)   261
    (1020,151)   248
    (1021,810)   239
    (1022,491)   268
    (1023,840)   264

 rmm_wrap_alloc 16384 bytes
 rmm_wrap_alloc 16384 bytes

  1024x1024 GraphBLAS double matrix, sparse by row
  Diff actual, 1024 entries, memory: 32.2 KB

    (0,478)    0
    (0,574)    0
    (2,376)    0
    (5,560)    0
    (6,996)    0
    (7,183)    0
    (7,666)    0
    (8,896)    0
    (9,187)    0
    (10,446)    0
    (11,46)    0
    (11,955)    0
    (12,397)    0
    (12,953)    0
    (13,192)    0
    (14,421)    0
    (15,568)    0
    (16,788)    0
    (16,904)    0
    (17,928)    0
    (18,103)    0
    (19,821)    0
    (19,886)    0
    (20,474)    0
    (21,479)    0
    (21,975)    0
    (22,569)    0
    (23,310)    0
    (24,905)    0
    (25,241)    0
    (26,428)    0
    (28,107)    0
    (28,441)    0
    (30,694)    0
    (32,121)    0
    (33,81)    0
    (34,804)    0
    (36,451)    0
    (37,609)    0
    (38,138)    0
    (39,698)    0
    (40,950)    0
    (41,568)    0
    (42,324)    0
    (43,798)    0
    (46,208)    0
    (47,70)    0
    (48,336)    0
    (49,476)    0
    (50,35)    0
    (51,556)    0
    (52,999)    0
    (53,940)    0
    (54,558)    0
    (54,960)    0
    (55,979)    0
    (56,90)    0
    (57,846)    0
    (57,893)    0
    (58,35)    0
    (59,108)    0
    (60,479)    0
    (61,590)    0
    (62,771)    0
    (63,50)    0
    (64,268)    0
    (65,694)    0
    (66,719)    0
    (67,411)    0
    (68,324)    0
    (69,477)    0
    (70,539)    0
    (71,228)    0
    (72,297)    0
    (73,665)    0
    (75,855)    0
    (76,248)    0
    (77,433)    0
    (78,90)    0
    (81,754)    0
    (82,243)    0
    (84,253)    0
    (86,104)    0
    (87,657)    0
    (89,825)    0
    (90,37)    0
    (91,234)    0
    (91,519)    0
    (92,74)    0
    (92,218)    0
    (92,690)    0
    (93,486)    0
    (94,637)    0
    (94,722)    0
    (96,564)    0
    (97,748)    0
    (99,326)    0
    (100,281)    0
    (102,609)    0
    (103,621)    0
    (104,644)    0
    (106,652)    0
    (107,239)    0
    (107,522)    0
    (108,131)    0
    (109,884)    0
    (110,402)    0
    (111,905)    0
    (112,127)    0
    (112,779)    0
    (113,278)    0
    (114,519)    0
    (115,240)    0
    (116,198)    0
    (117,219)    0
    (117,338)    0
    (118,99)    0
    (120,477)    0
    (121,554)    0
    (121,715)    0
    (122,151)    0
    (123,621)    0
    (125,177)    0
    (126,36)    0
    (128,820)    0
    (128,835)    0
    (129,660)    0
    (130,623)    0
    (130,807)    0
    (131,253)    0
    (131,355)    0
    (132,570)    0
    (133,492)    0
    (134,821)    0
    (135,295)    0
    (136,108)    0
    (137,834)    0
    (138,288)    0
    (139,284)    0
    (139,945)    0
    (140,887)    0
    (141,199)    0
    (142,87)    0
    (142,225)    0
    (143,123)    0
    (144,574)    0
    (145,552)    0
    (146,194)    0
    (146,995)    0
    (148,357)    0
    (149,949)    0
    (150,717)    0
    (151,484)    0
    (156,290)    0
    (157,714)    0
    (157,974)    0
    (158,959)    0
    (160,297)    0
    (162,601)    0
    (163,816)    0
    (164,221)    0
    (165,396)    0
    (166,801)    0
    (167,879)    0
    (168,321)    0
    (169,901)    0
    (170,612)    0
    (171,15)    0
    (172,951)    0
    (174,0)    0
    (174,595)    0
    (175,669)    0
    (176,108)    0
    (176,188)    0
    (176,614)    0
    (176,781)    0
    (177,17)    0
    (178,631)    0
    (179,932)    0
    (180,830)    0
    (182,675)    0
    (182,1001)    0
    (183,692)    0
    (184,143)    0
    (185,450)    0
    (186,779)    0
    (187,997)    0
    (188,357)    0
    (189,111)    0
    (190,990)    0
    (192,644)    0
    (192,953)    0
    (193,135)    0
    (194,137)    0
    (195,922)    0
    (197,859)    0
    (198,910)    0
    (199,531)    0
    (201,907)    0
    (202,863)    0
    (203,865)    0
    (204,614)    0
    (207,826)    0
    (208,985)    0
    (209,808)    0
    (210,659)    0
    (211,71)    0
    (211,931)    0
    (212,426)    0
    (213,152)    0
    (214,928)    0
    (215,268)    0
    (216,550)    0
    (217,921)    0
    (218,704)    0
    (218,922)    0
    (219,66)    0
    (220,704)    0
    (221,56)    0
    (221,551)    0
    (222,545)    0
    (223,1016)    0
    (224,721)    0
    (225,935)    0
    (226,727)    0
    (228,743)    0
    (229,535)    0
    (230,382)    0
    (231,551)    0
    (232,897)    0
    (233,570)    0
    (234,520)    0
    (235,522)    0
    (236,221)    0
    (237,755)    0
    (238,964)    0
    (239,82)    0
    (240,388)    0
    (241,500)    0
    (242,124)    0
    (242,193)    0
    (242,621)    0
    (243,300)    0
    (244,588)    0
    (244,1004)    0
    (245,494)    0
    (246,326)    0
    (247,115)    0
    (247,147)    0
    (248,233)    0
    (250,485)    0
    (251,708)    0
    (252,197)    0
    (253,485)    0
    (254,40)    0
    (254,238)    0
    (255,895)    0
    (256,114)    0
    (257,461)    0
    (257,796)    0
    (258,233)    0
    (260,884)    0
    (261,945)    0
    (262,368)    0
    (264,755)    0
    (265,124)    0
    (266,352)    0
    (267,10)    0
    (268,234)    0
    (269,400)    0
    (270,877)    0
    (270,924)    0
    (271,944)    0
    (272,67)    0
    (273,100)    0
    (274,979)    0
    (276,333)    0
    (277,377)    0
    (279,877)    0
    (280,18)    0
    (281,449)    0
    (282,179)    0
    (283,1007)    0
    (284,595)    0
    (285,32)    0
    (286,37)    0
    (287,126)    0
    (287,394)    0
    (288,848)    0
    (290,317)    0
    (291,594)    0
    (292,562)    0
    (294,466)    0
    (294,960)    0
    (295,1)    0
    (295,106)    0
    (296,109)    0
    (296,183)    0
    (296,245)    0
    (297,912)    0
    (297,1006)    0
    (299,159)    0
    (300,554)    0
    (301,774)    0
    (302,30)    0
    (303,645)    0
    (304,229)    0
    (305,622)    0
    (307,264)    0
    (308,28)    0
    (309,328)    0
    (309,627)    0
    (310,357)    0
    (311,355)    0
    (312,61)    0
    (313,758)    0
    (314,571)    0
    (315,177)    0
    (315,298)    0
    (315,741)    0
    (316,177)    0
    (316,308)    0
    (317,323)    0
    (318,595)    0
    (319,126)    0
    (320,468)    0
    (321,73)    0
    (322,235)    0
    (323,375)    0
    (323,651)    0
    (324,549)    0
    (325,306)    0
    (325,487)    0
    (326,649)    0
    (327,704)    0
    (328,142)    0
    (329,176)    0
    (330,848)    0
    (330,965)    0
    (332,795)    0
    (334,695)    0
    (335,694)    0
    (336,775)    0
    (336,808)    0
    (337,608)    0
    (338,993)    0
    (339,680)    0
    (340,849)    0
    (341,36)    0
    (342,723)    0
    (343,678)    0
    (344,384)    0
    (344,680)    0
    (345,75)    0
    (347,996)    0
    (348,60)    0
    (348,821)    0
    (349,804)    0
    (350,282)    0
    (351,142)    0
    (351,937)    0
    (352,160)    0
    (353,536)    0
    (355,352)    0
    (356,340)    0
    (358,678)    0
    (360,679)    0
    (361,794)    0
    (361,989)    0
    (362,816)    0
    (363,206)    0
    (364,629)    0
    (365,990)    0
    (366,841)    0
    (366,971)    0
    (367,888)    0
    (368,587)    0
    (369,684)    0
    (370,270)    0
    (371,327)    0
    (372,471)    0
    (373,88)    0
    (374,669)    0
    (375,992)    0
    (376,336)    0
    (377,86)    0
    (378,882)    0
    (379,592)    0
    (380,77)    0
    (380,643)    0
    (381,1012)    0
    (382,816)    0
    (383,711)    0
    (385,670)    0
    (386,537)    0
    (387,347)    0
    (388,494)    0
    (389,328)    0
    (389,733)    0
    (390,551)    0
    (391,59)    0
    (391,600)    0
    (394,692)    0
    (396,645)    0
    (397,835)    0
    (398,107)    0
    (398,246)    0
    (399,436)    0
    (400,172)    0
    (400,382)    0
    (401,790)    0
    (402,320)    0
    (403,40)    0
    (404,641)    0
    (405,49)    0
    (405,475)    0
    (407,320)    0
    (408,61)    0
    (410,754)    0
    (411,643)    0
    (412,949)    0
    (413,94)    0
    (414,991)    0
    (415,26)    0
    (416,575)    0
    (417,366)    0
    (418,160)    0
    (418,669)    0
    (419,209)    0
    (419,285)    0
    (420,748)    0
    (421,614)    0
    (422,177)    0
    (423,873)    0
    (424,542)    0
    (425,263)    0
    (426,377)    0
    (427,149)    0
    (428,950)    0
    (429,305)    0
    (430,718)    0
    (431,51)    0
    (432,857)    0
    (434,604)    0
    (435,152)    0
    (436,356)    0
    (437,105)    0
    (438,814)    0
    (440,338)    0
    (441,982)    0
    (442,880)    0
    (443,753)    0
    (444,669)    0
    (445,952)    0
    (446,741)    0
    (447,970)    0
    (448,646)    0
    (448,744)    0
    (449,835)    0
    (450,579)    0
    (451,147)    0
    (451,1017)    0
    (452,868)    0
    (453,26)    0
    (454,415)    0
    (454,668)    0
    (455,43)    0
    (456,849)    0
    (456,985)    0
    (457,218)    0
    (458,510)    0
    (459,737)    0
    (460,836)    0
    (461,849)    0
    (461,917)    0
    (462,900)    0
    (463,316)    0
    (464,762)    0
    (465,355)    0
    (465,801)    0
    (466,673)    0
    (467,112)    0
    (468,288)    0
    (470,889)    0
    (471,650)    0
    (473,121)    0
    (473,127)    0
    (474,487)    0
    (475,382)    0
    (476,44)    0
    (477,342)    0
    (478,786)    0
    (480,667)    0
    (481,558)    0
    (482,680)    0
    (483,517)    0
    (484,961)    0
    (485,274)    0
    (486,1015)    0
    (487,194)    0
    (489,802)    0
    (490,811)    0
    (491,319)    0
    (492,377)    0
    (494,432)    0
    (495,809)    0
    (496,267)    0
    (496,902)    0
    (498,194)    0
    (499,952)    0
    (500,84)    0
    (501,704)    0
    (503,519)    0
    (504,510)    0
    (504,887)    0
    (505,574)    0
    (507,643)    0
    (508,449)    0
    (512,892)    0
    (513,271)    0
    (514,404)    0
    (515,758)    0
    (517,369)    0
    (518,293)    0
    (519,786)    0
    (520,270)    0
    (521,1013)    0
    (522,284)    0
    (523,632)    0
    (524,945)    0
    (525,94)    0
    (525,362)    0
    (526,52)    0
    (527,61)    0
    (528,294)    0
    (529,145)    0
    (529,998)    0
    (530,112)    0
    (531,908)    0
    (533,674)    0
    (534,505)    0
    (535,660)    0
    (535,776)    0
    (536,500)    0
    (537,799)    0
    (538,492)    0
    (538,861)    0
    (540,245)    0
    (542,137)    0
    (545,658)    0
    (546,213)    0
    (547,767)    0
    (547,912)    0
    (547,1018)    0
    (548,46)    0
    (548,697)    0
    (549,602)    0
    (550,927)    0
    (552,710)    0
    (553,391)    0
    (554,351)    0
    (555,10)    0
    (556,26)    0
    (557,910)    0
    (558,552)    0
    (560,792)    0
    (561,597)    0
    (562,182)    0
    (562,862)    0
    (563,877)    0
    (564,310)    0
    (564,609)    0
    (565,490)    0
    (566,564)    0
    (566,607)    0
    (569,872)    0
    (570,465)    0
    (571,271)    0
    (571,919)    0
    (572,630)    0
    (574,603)    0
    (576,256)    0
    (579,274)    0
    (580,182)    0
    (581,445)    0
    (582,177)    0
    (583,118)    0
    (584,399)    0
    (585,433)    0
    (587,254)    0
    (588,914)    0
    (589,1016)    0
    (590,95)    0
    (590,802)    0
    (591,978)    0
    (592,527)    0
    (593,143)    0
    (594,430)    0
    (595,787)    0
    (596,677)    0
    (598,788)    0
    (599,127)    0
    (600,339)    0
    (601,478)    0
    (602,218)    0
    (603,759)    0
    (604,270)    0
    (605,76)    0
    (606,930)    0
    (608,832)    0
    (609,287)    0
    (610,794)    0
    (611,759)    0
    (612,1006)    0
    (613,398)    0
    (614,386)    0
    (615,115)    0
    (616,928)    0
    (617,30)    0
    (618,361)    0
    (619,996)    0
    (620,5)    0
    (620,337)    0
    (621,41)    0
    (623,44)    0
    (623,79)    0
    (623,966)    0
    (624,19)    0
    (624,242)    0
    (624,524)    0
    (625,683)    0
    (626,51)    0
    (627,361)    0
    (628,396)    0
    (629,882)    0
    (630,341)    0
    (631,49)    0
    (631,585)    0
    (632,73)    0
    (634,912)    0
    (635,882)    0
    (636,617)    0
    (637,285)    0
    (637,716)    0
    (638,113)    0
    (638,367)    0
    (639,616)    0
    (640,837)    0
    (641,457)    0
    (643,934)    0
    (647,783)    0
    (648,195)    0
    (649,614)    0
    (650,957)    0
    (651,281)    0
    (652,973)    0
    (653,60)    0
    (653,333)    0
    (654,605)    0
    (655,910)    0
    (656,349)    0
    (659,17)    0
    (660,591)    0
    (661,512)    0
    (663,767)    0
    (664,158)    0
    (665,77)    0
    (666,503)    0
    (667,951)    0
    (668,365)    0
    (669,300)    0
    (671,141)    0
    (671,565)    0
    (672,819)    0
    (674,36)    0
    (674,819)    0
    (675,454)    0
    (676,242)    0
    (677,289)    0
    (677,647)    0
    (678,802)    0
    (679,899)    0
    (680,398)    0
    (681,390)    0
    (681,699)    0
    (682,117)    0
    (683,110)    0
    (684,907)    0
    (685,17)    0
    (686,202)    0
    (687,45)    0
    (688,287)    0
    (689,502)    0
    (690,299)    0
    (691,392)    0
    (692,600)    0
    (694,378)    0
    (695,702)    0
    (696,102)    0
    (698,631)    0
    (699,152)    0
    (700,840)    0
    (701,323)    0
    (702,777)    0
    (703,132)    0
    (704,374)    0
    (705,579)    0
    (706,511)    0
    (707,76)    0
    (708,259)    0
    (708,925)    0
    (709,872)    0
    (709,873)    0
    (710,107)    0
    (710,293)    0
    (711,210)    0
    (711,462)    0
    (714,475)    0
    (715,172)    0
    (715,751)    0
    (716,697)    0
    (717,234)    0
    (717,620)    0
    (718,848)    0
    (719,331)    0
    (720,201)    0
    (720,725)    0
    (721,806)    0
    (722,415)    0
    (722,934)    0
    (723,675)    0
    (724,480)    0
    (726,337)    0
    (727,177)    0
    (728,797)    0
    (729,884)    0
    (730,767)    0
    (731,275)    0
    (732,910)    0
    (733,763)    0
    (734,574)    0
    (735,268)    0
    (736,115)    0
    (737,146)    0
    (737,912)    0
    (738,1023)    0
    (739,335)    0
    (740,596)    0
    (741,365)    0
    (741,630)    0
    (742,485)    0
    (743,186)    0
    (745,621)    0
    (745,645)    0
    (746,273)    0
    (747,91)    0
    (748,886)    0
    (749,59)    0
    (749,755)    0
    (751,348)    0
    (752,313)    0
    (752,742)    0
    (752,745)    0
    (753,472)    0
    (753,592)    0
    (754,1007)    0
    (756,633)    0
    (758,847)    0
    (759,500)    0
    (760,340)    0
    (760,381)    0
    (762,962)    0
    (763,954)    0
    (764,392)    0
    (764,913)    0
    (766,915)    0
    (766,936)    0
    (767,372)    0
    (768,307)    0
    (770,458)    0
    (771,103)    0
    (771,487)    0
    (773,56)    0
    (774,773)    0
    (775,115)    0
    (776,537)    0
    (777,392)    0
    (778,893)    0
    (779,644)    0
    (780,256)    0
    (781,899)    0
    (782,399)    0
    (782,892)    0
    (783,614)    0
    (784,54)    0
    (785,816)    0
    (786,462)    0
    (787,876)    0
    (788,273)    0
    (789,696)    0
    (790,471)    0
    (791,793)    0
    (792,636)    0
    (792,955)    0
    (793,809)    0
    (794,986)    0
    (795,656)    0
    (796,347)    0
    (797,880)    0
    (798,802)    0
    (799,294)    0
    (800,970)    0
    (801,130)    0
    (803,896)    0
    (804,1022)    0
    (805,32)    0
    (805,479)    0
    (806,889)    0
    (807,504)    0
    (809,719)    0
    (809,737)    0
    (810,646)    0
    (811,547)    0
    (812,375)    0
    (813,200)    0
    (815,408)    0
    (816,902)    0
    (817,430)    0
    (818,985)    0
    (819,688)    0
    (821,839)    0
    (822,747)    0
    (823,39)    0
    (824,886)    0
    (825,406)    0
    (826,814)    0
    (827,625)    0
    (828,407)    0
    (829,511)    0
    (830,915)    0
    (831,982)    0
    (832,1003)    0
    (833,362)    0
    (833,999)    0
    (834,136)    0
    (834,295)    0
    (835,115)    0
    (836,218)    0
    (837,565)    0
    (839,541)    0
    (839,711)    0
    (840,159)    0
    (841,103)    0
    (841,636)    0
    (842,136)    0
    (843,524)    0
    (844,114)    0
    (845,694)    0
    (846,533)    0
    (847,741)    0
    (848,483)    0
    (849,464)    0
    (850,302)    0
    (851,567)    0
    (852,150)    0
    (852,529)    0
    (853,623)    0
    (855,106)    0
    (856,1014)    0
    (857,151)    0
    (857,650)    0
    (858,781)    0
    (858,994)    0
    (859,508)    0
    (859,716)    0
    (862,636)    0
    (863,21)    0
    (864,1022)    0
    (865,972)    0
    (866,97)    0
    (867,48)    0
    (868,303)    0
    (869,364)    0
    (870,506)    0
    (871,453)    0
    (872,775)    0
    (873,173)    0
    (874,485)    0
    (875,168)    0
    (876,357)    0
    (877,722)    0
    (877,990)    0
    (880,176)    0
    (881,23)    0
    (882,608)    0
    (883,929)    0
    (884,643)    0
    (885,687)    0
    (887,487)    0
    (888,110)    0
    (888,943)    0
    (889,892)    0
    (890,628)    0
    (891,679)    0
    (892,653)    0
    (894,33)    0
    (895,37)    0
    (895,695)    0
    (896,390)    0
    (897,42)    0
    (900,687)    0
    (901,146)    0
    (901,605)    0
    (902,57)    0
    (903,1021)    0
    (904,808)    0
    (905,795)    0
    (906,479)    0
    (907,674)    0
    (909,456)    0
    (910,167)    0
    (911,548)    0
    (914,924)    0
    (915,366)    0
    (915,502)    0
    (916,420)    0
    (916,823)    0
    (918,480)    0
    (919,970)    0
    (920,608)    0
    (921,966)    0
    (923,216)    0
    (925,685)    0
    (926,755)    0
    (929,538)    0
    (930,13)    0
    (931,479)    0
    (933,860)    0
    (934,165)    0
    (935,351)    0
    (936,399)    0
    (938,215)    0
    (939,496)    0
    (939,748)    0
    (940,414)    0
    (941,586)    0
    (942,356)    0
    (943,31)    0
    (943,538)    0
    (944,109)    0
    (945,671)    0
    (946,246)    0
    (947,182)    0
    (948,628)    0
    (949,316)    0
    (950,1017)    0
    (951,221)    0
    (955,457)    0
    (955,823)    0
    (956,653)    0
    (957,656)    0
    (958,644)    0
    (959,667)    0
    (960,78)    0
    (961,828)    0
    (962,877)    0
    (963,397)    0
    (964,370)    0
    (965,504)    0
    (966,483)    0
    (967,1023)    0
    (968,400)    0
    (969,564)    0
    (970,856)    0
    (971,875)    0
    (972,549)    0
    (972,630)    0
    (974,934)    0
    (976,980)    0
    (977,347)    0
    (978,123)    0
    (980,371)    0
    (981,175)    0
    (983,58)    0
    (984,449)    0
    (984,582)    0
    (985,72)    0
    (985,743)    0
    (986,323)    0
    (987,120)    0
    (987,340)    0
    (988,172)    0
    (989,585)    0
    (990,514)    0
    (991,660)    0
    (992,15)    0
    (992,531)    0
    (993,87)    0
    (993,674)    0
    (994,992)    0
    (995,170)    0
    (997,946)    0
    (998,678)    0
    (999,167)    0
    (1001,877)    0
    (1002,286)    0
    (1004,250)    0
    (1006,1022)    0
    (1008,159)    0
    (1009,574)    0
    (1012,533)    0
    (1013,574)    0
    (1014,667)    0
    (1015,127)    0
    (1015,613)    0
    (1016,457)    0
    (1017,180)    0
    (1018,254)    0
    (1019,287)    0
    (1020,67)    0
    (1020,151)    0
    (1021,810)    0
    (1022,491)    0
    (1023,840)    0


  1024x1024 GraphBLAS bool matrix, sparse by row
  T actual, 1024 entries, memory: 25.2 KB

    (0,478)   1
    (0,574)   1
    (2,376)   1
    (5,560)   1
    (6,996)   1
    (7,183)   1
    (7,666)   1
    (8,896)   1
    (9,187)   1
    (10,446)   1
    (11,46)   1
    (11,955)   1
    (12,397)   1
    (12,953)   1
    (13,192)   1
    (14,421)   1
    (15,568)   1
    (16,788)   1
    (16,904)   1
    (17,928)   1
    (18,103)   1
    (19,821)   1
    (19,886)   1
    (20,474)   1
    (21,479)   1
    (21,975)   1
    (22,569)   1
    (23,310)   1
    (24,905)   1
    ...
 work:1024 gpus:0 Getting test data
Creating problem gen
filling matrices
inside fill, using seed 4567
fill_random nrows=1024ncols=1024 need 1024 values, invsparse = 1024
fill_random after alloc values
vdim ready 
vlen ready 
ready to fill p
filling sparse
1024 nonzeroes left to fill..
35 nonzeroes left to fill..
inside fill, using seed 4567
fill_random nrows=1024ncols=1024 need 1024 values, invsparse = 1024
fill_random after alloc values
vdim ready 
vlen ready 
ready to fill p
filling sparse
1024 nonzeroes left to fill..
35 nonzeroes left to fill..
inside fill, using seed 543210
fill_random nrows=1024ncols=1024 need 1048576 values, invsparse = 1
fill_random after alloc values
vdim ready 
vlen ready 
ready to fill p
filling dense
 rmm_wrap_alloc 16384 bytes
 rmm_wrap_alloc 16384 bytes
 rmm_wrap_alloc 524288 bytes
 rmm_wrap_alloc 524288 bytes
 rmm_wrap_alloc 1048576 bytes
 rmm_wrap_alloc 1048576 bytes
 rmm_wrap_alloc 524288 bytes
 rmm_wrap_alloc 2097152 bytes
 rmm_wrap_alloc 2097152 bytes
 rmm_wrap_alloc 1048576 bytes
 rmm_wrap_alloc 4194304 bytes
 rmm_wrap_alloc 4194304 bytes
 rmm_wrap_alloc 2097152 bytes
 rmm_wrap_alloc 8388608 bytes
 rmm_wrap_alloc 8388608 bytes
 rmm_wrap_alloc 4194304 bytes
 rmm_wrap_alloc 8388608 bytes
 rmm_wrap_alloc 4194304 bytes
 rmm_wrap_alloc 8388608 bytes
inside fill, using seed 32
fill_random nrows=1024ncols=1024 need 5120 values, invsparse = 205
fill_random after alloc values
vdim ready 
vlen ready 
ready to fill p
filling sparse
5120 nonzeroes left to fill..
2026 nonzeroes left to fill..
 rmm_wrap_alloc 16384 bytes
1024 slots to fill
all pairs to bucket 5, no filling
done assigning buckets
Building semiring factgory
 rmm_wrap_alloc 256 bytes
 calling stringify semiring: 0x7f1ff53ef300
inside enumify: 0x7f1ff53ef300

    GraphBLAS Semiring: semiring (user-defined)
    GraphBLAS Monoid: semiring->add (built-in)
    GraphBLAS BinaryOp: monoid->op (built-in) z=plus(x,y)
    GraphBLAS type: ztype int32_t size: 4
    GraphBLAS type: xtype int32_t size: 4
    GraphBLAS type: ytype int32_t size: 4
    identity: [   0 ] 

    GraphBLAS BinaryOp: semiring->multiply (built-in) z=times(x,y)
    GraphBLAS type: ztype int32_t size: 4
    GraphBLAS type: xtype int32_t size: 4
    GraphBLAS type: ytype int32_t size: 4
Getting semiring add
Getting semiring mult
Getting semiring add op
Getting types
Getting opcodes
Getting typecodes
Performing asserts
Invoking boolean rename
Invoking boolean rename
Invoking enumify binop
e 14
Invoking enumify monoid
Calling enumify binop
Inside plus binop code
e 11
Calling enumify identity
Calling enumify terminal
Done enumify monoid
Done invoking enumify monoid
atype
btype
ctype
Invoking enumify_mask, mtype 0x7f2028b56f40
GB_enumify_mask gets mcode: 6 Mask_struct: 0 Mask_comp: 0
got mask_ecode: 8
constructing semiring scode
before: add_ecode: 11, id_ecode: 0, term_ecode: 31, mult_ecode: 14, flipxy: 0, zcode: 6, xcode: 6, ycode: 6, mask_ecode: 8, ccode: 6, acode: 6, bcode: 6, csparsity: 0, msparsity: 0, asparsity: 0, bsparsity: 0
serialized_scode: 397409434378593792
done enumify semiring
scode=397409434378593792
done stringify semiring
 returned from  stringify semiring
 rmm_wrap_alloc 256 bytes
 rmm_wrap_alloc 8192 bytes
1024 slots to fill
all pairs to bucket 5, no filling
done assigning buckets
bucket 5 has 1024 dots to do
LAUNCHING BUCKET CODE: 5
Confiring spdnINside get cached file
looking for prog in file /home/cjnolet/.SuiteSparse/GraphBLAS/6.3.0/GB_semiring_397409434378593792.h
opening /home/cjnolet/.SuiteSparse/GraphBLAS/6.3.0/GB_semiring_397409434378593792.h for write
about to close
 read cache file /home/cjnolet/.SuiteSparse/GraphBLAS/6.3.0/GB_semiring_397409434378593792.h
successful_read: 1
Just closed
 jit_cache get program GB_jit_AxB_dot3_phase3_spdn
found memory-cached prog GB_jit_AxB_dot3_phase3_spdn
 got kernel instance AxB_dot3_phase3_spdn_int32_t_int32_t_int32_t
found memory-cached prog AxB_dot3_phase3_spdn_int32_t_int32_t_int32_t
Launching _Z20AxB_dot3_phase3_spdnIiiiEvxxPxP16GB_Matrix_opaqueS2_S2_S2_i<<<32,32,0,0>>>(long,long,long*,GB_Matrix_opaque*,GB_Matrix_opaque*,GB_Matrix_opaque*,GB_Matrix_opaque*,int)
Printing bucketp
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
Done.
returned from kernel 3.78778ms

  1024x1024 GraphBLAS int32_t matrix, sparse (jumbled) by row
  sparsity control: sparse only
  C GPU, 1024 entries, memory: 28.2 KB
  pending tuples: 0 max pending: 0 zombies: 131

    (0,478)   1
    (0,574)   2
    (2,376) zombie
    (5,560)   3
    (6,996)   2
    (7,183)   0
    (7,666)   0
    (8,896)   2
    (9,187)   0
    (10,446)   2
    (11,46)   2
    (11,955)   2
    (12,397)   1
    (12,953)   0
    (13,192)   1
    (14,421)   1
    (15,568)   1
    (16,788)   1
    (16,904)   0
    (17,928)   0
    (18,103) zombie
    (19,821)   1
    (19,886)   0
    (20,474)   4
    (21,479)   1
    (21,975)   1
    (22,569)   1
    (23,310)   2
    (24,905)   0
    ...
 rmm_wrap_alloc 256 bytes
Not using cuda path. M_is_hypersparse: 0, A->iso: 0, B->iso: 0, A_BITMAP: 0, B_BITMAP: 0, GB_IS_FULL(A): 0, GB_IS_FULL(B): 0, semiring header size: 32
 rmm_wrap_alloc 16384 bytes

  1024x1024 GraphBLAS int32_t matrix, sparse by row
  sparsity control: sparse only
  M actual, 1024 entries, memory: 28.2 KB

    (0,478)   0
    (0,574)   0
    (2,376)   1
    (5,560)   0
    (6,996)   0
    (7,183)   1
    (7,666)   1
    (8,896)   0
    (9,187)   0
    (10,446)   1
    (11,46)   1
    (11,955)   1
    (12,397)   0
    (12,953)   1
    (13,192)   1
    (14,421)   0
    (15,568)   1
    (16,788)   1
    (16,904)   1
    (17,928)   0
    (18,103)   1
    (19,821)   0
    (19,886)   0
    (20,474)   0
    (21,479)   1
    (21,975)   0
    (22,569)   1
    (23,310)   0
    (24,905)   1
    ...
 rmm_wrap_alloc 16384 bytes

  1024x1024 GraphBLAS int32_t matrix, sparse by row
  sparsity control: sparse only
  C GPU, 893 entries, memory: 28.2 KB

    (0,478)   1
    (0,574)   2
    (5,560)   3
    (6,996)   2
    (7,183)   0
    (7,666)   0
    (8,896)   2
    (9,187)   0
    (10,446)   2
    (11,46)   2
    (11,955)   2
    (12,397)   1
    (12,953)   0
    (13,192)   1
    (14,421)   1
    (15,568)   1
    (16,788)   1
    (16,904)   0
    (17,928)   0
    (19,821)   1
    (19,886)   0
    (20,474)   4
    (21,479)   1
    (21,975)   1
    (22,569)   1
    (23,310)   2
    (24,905)   0
    (25,241)   0
    (26,428)   0
    (28,107)   2
    (32,121)   0
    (33,81)   2
    (37,609)   2
    (39,698)   1
    (41,568)   1
    (42,324)   0
    (43,798)   1
    (46,208)   0
    (47,70)   1
    (48,336)   1
    (49,476)   1
    (50,35)   0
    (51,556)   0
    (52,999)   1
    (53,940)   1
    (54,558)   0
    (54,960)   1
    (55,979)   1
    (56,90)   2
    (57,846)   3
    (57,893)   0
    (58,35)   0
    (59,108)   3
    (60,479)   1
    (61,590)   2
    (62,771)   0
    (63,50)   0
    (64,268)   3
    (66,719)   2
    (67,411)   2
    (68,324)   0
    (69,477)   0
    (70,539)   1
    (71,228)   3
    (72,297)   3
    (73,665)   0
    (75,855)   0
    (76,248)   0
    (77,433)   4
    (78,90)   3
    (81,754)   4
    (82,243)   2
    (84,253)   1
    (86,104)   3
    (87,657)   0
    (89,825)   2
    (90,37)   4
    (91,234)   1
    (91,519)   1
    (92,74)   3
    (92,218)   1
    (92,690)   1
    (93,486)   2
    (94,637)   0
    (94,722)   1
    (96,564)   1
    (99,326)   2
    (100,281)   1
    (102,609)   2
    (104,644)   0
    (106,652)   1
    (107,239)   0
    (107,522)   2
    (108,131)   1
    (109,884)   2
    (110,402)   3
    (111,905)   2
    (112,127)   0
    (112,779)   0
    (113,278)   0
    (114,519)   1
    (115,240)   4
    (117,219)   0
    (117,338)   2
    (118,99)   4
    (120,477)   1
    (121,554)   3
    (121,715)   3
    (122,151)   3
    (125,177)   5
    (128,820)   6
    (129,660)   0
    (130,623)   1
    (131,253)   1
    (131,355)   1
    (133,492)   1
    (134,821)   0
    (135,295)   2
    (136,108)   3
    (137,834)   2
    (138,288)   1
    (139,284)   2
    (139,945)   0
    (141,199)   1
    (142,87)   4
    (142,225)   1
    (143,123)   0
    (144,574)   0
    (146,194)   3
    (148,357)   0
    (149,949)   1
    (150,717)   2
    (151,484)   2
    (156,290)   2
    (157,714)   0
    (157,974)   1
    (160,297)   1
    (162,601)   2
    (163,816)   3
    (164,221)   1
    (165,396)   1
    (166,801)   3
    (167,879)   3
    (168,321)   0
    (169,901)   3
    (172,951)   1
    (176,108)   1
    (176,188)   1
    (176,614)   2
    (176,781)   1
    (178,631)   1
    (179,932)   2
    (180,830)   3
    (182,675)   1
    (182,1001)   2
    (183,692)   1
    (184,143)   2
    (185,450)   1
    (186,779)   0
    (187,997)   3
    (188,357)   1
    (189,111)   2
    (190,990)   1
    (192,644)   0
    (192,953)   0
    (193,135)   1
    (194,137)   4
    (195,922)   4
    (197,859)   1
    (198,910)   1
    (199,531)   3
    (201,907)   0
    (202,863)   1
    (203,865)   4
    (204,614)   3
    (207,826)   1
    (208,985)   2
    (209,808)   3
    (211,71)   4
    (211,931)   3
    (212,426)   0
    (213,152)   0
    (214,928)   0
    (215,268)   3
    (216,550)   3
    (217,921)   0
    (218,704)   2
    (218,922)   2
    (219,66)   1
    (220,704)   2
    (221,56)   1
    (221,551)   2
    (222,545)   1
    (223,1016)   2
    (224,721)   1
    (225,935)   1
    (226,727)   0
    (228,743)   4
    (229,535)   2
    (231,551)   3
    (232,897)   2
    (234,520)   2
    (235,522)   2
    (236,221)   3
    (237,755)   2
    (238,964)   2
    (239,82)   0
    (240,388)   0
    (241,500)   2
    (242,124)   3
    (242,193)   0
    (243,300)   0
    (244,588)   0
    (244,1004)   3
    (245,494)   0
    (246,326)   1
    (247,115)   1
    (247,147)   1
    (248,233)   0
    (250,485)   6
    (251,708)   0
    (252,197)   1
    (253,485)   5
    (254,40)   3
    (254,238)   0
    (255,895)   3
    (256,114)   0
    (257,461)   2
    (257,796)   0
    (258,233)   1
    (260,884)   2
    (261,945)   1
    (262,368)   2
    (264,755)   1
    (265,124)   1
    (266,352)   3
    (267,10)   1
    (268,234)   1
    (269,400)   1
    (270,877)   0
    (270,924)   0
    (271,944)   0
    (272,67)   3
    (273,100)   1
    (274,979)   4
    (276,333)   2
    (277,377)   0
    (279,877)   1
    (280,18)   3
    (281,449)   3
    (282,179)   2
    (283,1007)   2
    (285,32)   1
    (286,37)   2
    (287,394)   3
    (288,848)   0
    (290,317)   0
    (291,594)   1
    (294,466)   2
    (294,960)   0
    (295,1)   0
    (295,106)   2
    (296,109)   2
    (296,183)   0
    (296,245)   0
    (297,912)   1
    (299,159)   1
    (300,554)   1
    (301,774)   1
    (302,30)   1
    (303,645)   1
    (304,229)   1
    (305,622)   0
    (307,264)   3
    (308,28)   0
    (309,328)   4
    (309,627)   0
    (310,357)   1
    (311,355)   1
    (312,61)   2
    (314,571)   3
    (315,177)   3
    (315,741)   0
    (316,177)   3
    (316,308)   4
    (320,468)   1
    (321,73)   0
    (322,235)   2
    (323,375)   3
    (323,651)   3
    (324,549)   2
    (325,306)   1
    (325,487)   1
    (326,649)   2
    (327,704)   0
    (329,176)   2
    (330,848)   1
    (330,965)   2
    (332,795)   1
    (334,695)   1
    (336,808)   4
    (337,608)   1
    (338,993)   2
    (339,680)   0
    (340,849)   1
    (342,723)   2
    (343,678)   2
    (344,384)   3
    (344,680)   0
    (345,75)   0
    (347,996)   3
    (348,60)   3
    (348,821)   1
    (350,282)   1
    (352,160)   2
    (353,536)   1
    (355,352)   5
    (356,340)   2
    (358,678)   2
    (360,679)   1
    (361,794)   0
    (361,989)   3
    (362,816)   2
    (363,206)   4
    (364,629)   0
    (365,990)   0
    (366,841)   1
    (366,971)   0
    (367,888)   2
    (368,587)   0
    (369,684)   3
    (370,270)   1
    (372,471)   1
    (373,88)   1
    (375,992)   2
    (376,336)   3
    (377,86)   1
    (378,882)   1
    (379,592)   2
    (380,77)   2
    (380,643)   2
    (381,1012)   2
    (382,816)   2
    (383,711)   2
    (385,670)   1
    (386,537)   1
    (387,347)   2
    (388,494)   1
    (389,328)   3
    (390,551)   1
    (391,59)   2
    (391,600)   1
    (394,692)   4
    (396,645)   2
    (398,107)   3
    (398,246)   2
    (399,436)   3
    (400,172)   0
    (401,790)   3
    (402,320)   2
    (403,40)   2
    (404,641)   0
    (405,49)   0
    (405,475)   1
    (407,320)   3
    (408,61)   4
    (410,754)   3
    (411,643)   2
    (412,949)   1
    (413,94)   5
    (415,26)   1
    (416,575)   0
    (417,366)   3
    (418,160)   0
    (419,209)   1
    (421,614)   1
    (422,177)   2
    (423,873)   1
    (424,542)   3
    (425,263)   0
    (426,377)   0
    (427,149)   0
    (429,305)   0
    (430,718)   1
    (431,51)   0
    (432,857)   2
    (434,604)   0
    (435,152)   2
    (436,356)   1
    (437,105)   3
    (440,338)   0
    (441,982)   2
    (442,880)   1
    (443,753)   1
    (446,741)   0
    (448,646)   0
    (448,744)   2
    (450,579)   1
    (451,147)   0
    (451,1017)   0
    (452,868)   3
    (453,26)   1
    (454,415)   1
    (454,668)   0
    (455,43)   0
    (456,849)   1
    (456,985)   2
    (457,218)   2
    (458,510)   4
    (459,737)   2
    (460,836)   2
    (461,849)   0
    (461,917)   2
    (462,900)   1
    (463,316)   1
    (464,762)   1
    (465,355)   1
    (465,801)   1
    (466,673)   0
    (468,288)   1
    (470,889)   2
    (471,650)   1
    (473,121)   1
    (473,127)   2
    (474,487)   0
    (476,44)   0
    (477,342)   1
    (480,667)   1
    (481,558)   0
    (482,680)   1
    (483,517)   1
    (484,961)   1
    (485,274)   0
    (486,1015)   3
    (487,194)   1
    (489,802)   2
    (490,811)   1
    (491,319)   4
    (492,377)   1
    (494,432)   1
    (495,809)   0
    (496,267)   2
    (496,902)   1
    (498,194)   1
    (500,84)   0
    (501,704)   2
    (503,519)   2
    (504,510)   3
    (505,574)   1
    (507,643)   3
    (508,449)   3
    (512,892)   3
    (513,271)   2
    (517,369)   1
    (518,293)   2
    (520,270)   1
    (521,1013)   1
    (522,284)   1
    (524,945)   1
    (525,94)   5
    (525,362)   2
    (526,52)   1
    (527,61)   3
    (529,998)   0
    (531,908)   1
    (533,674)   4
    (535,660)   1
    (535,776)   1
    (536,500)   3
    (537,799)   2
    (538,492)   2
    (538,861)   1
    (540,245)   0
    (542,137)   2
    (545,658)   0
    (546,213)   1
    (547,767)   1
    (547,912)   3
    (547,1018)   1
    (548,46)   2
    (548,697)   0
    (549,602)   2
    (550,927)   2
    (553,391)   1
    (554,351)   2
    (555,10)   2
    (556,26)   2
    (557,910)   0
    (560,792)   0
    (562,182)   0
    (562,862)   1
    (563,877)   0
    (564,310)   3
    (564,609)   3
    (565,490)   0
    (566,564)   2
    (566,607)   1
    (569,872)   0
    (570,465)   1
    (571,271)   3
    (571,919)   1
    (574,603)   0
    (576,256)   4
    (579,274)   0
    (580,182)   0
    (581,445)   0
    (582,177)   3
    (583,118)   0
    (584,399)   1
    (585,433)   4
    (587,254)   2
    (588,914)   2
    (589,1016)   3
    (590,95)   3
    (590,802)   2
    (592,527)   0
    (593,143)   2
    (594,430)   0
    (595,787)   2
    (598,788)   1
    (599,127)   3
    (601,478)   2
    (602,218)   0
    (603,759)   1
    (604,270)   1
    (605,76)   3
    (606,930)   0
    (608,832)   1
    (609,287)   1
    (610,794)   0
    (611,759)   1
    (613,398)   3
    (614,386)   4
    (615,115)   0
    (616,928)   0
    (617,30)   2
    (618,361)   5
    (619,996)   4
    (620,5)   3
    (621,41)   0
    (623,44)   2
    (624,19)   1
    (624,242)   2
    (624,524)   1
    (626,51)   0
    (627,361)   1
    (628,396)   3
    (629,882)   1
    (630,341)   1
    (631,49)   1
    (631,585)   1
    (632,73)   1
    (634,912)   2
    (635,882)   1
    (636,617)   1
    (637,716)   0
    (638,113)   1
    (639,616)   5
    (640,837)   2
    (641,457)   1
    (643,934)   3
    (647,783)   2
    (648,195)   1
    (649,614)   1
    (650,957)   1
    (651,281)   2
    (652,973)   1
    (653,60)   1
    (653,333)   2
    (654,605)   3
    (655,910)   0
    (656,349)   3
    (660,591)   4
    (661,512)   2
    (663,767)   0
    (665,77)   3
    (666,503)   4
    (667,951)   2
    (668,365)   4
    (669,300)   1
    (671,141)   1
    (671,565)   2
    (672,819)   1
    (674,819)   1
    (675,454)   0
    (676,242)   2
    (677,289)   4
    (678,802)   3
    (680,398)   1
    (681,390)   1
    (682,117)   4
    (683,110)   2
    (684,907)   0
    (686,202)   0
    (687,45)   1
    (688,287)   2
    (689,502)   3
    (690,299)   3
    (691,392)   2
    (692,600)   0
    (694,378)   1
    (695,702)   1
    (696,102)   2
    (698,631)   0
    (699,152)   1
    (700,840)   1
    (702,777)   1
    (703,132)   1
    (704,374)   1
    (705,579)   1
    (706,511)   3
    (707,76)   3
    (708,259)   2
    (708,925)   0
    (709,872)   1
    (709,873)   1
    (710,107)   3
    (710,293)   2
    (711,462)   0
    (714,475)   2
    (715,172)   0
    (715,751)   2
    (716,697)   0
    (717,234)   0
    (718,848)   2
    (719,331)   1
    (720,201)   1
    (720,725)   2
    (722,415)   2
    (722,934)   2
    (723,675)   2
    (724,480)   3
    (727,177)   4
    (728,797)   1
    (729,884)   1
    (730,767)   0
    (731,275)   1
    (732,910)   0
    (733,763)   5
    (734,574)   0
    (735,268)   3
    (736,115)   1
    (737,912)   2
    (738,1023)   2
    (739,335)   0
    (740,596)   3
    (741,365)   1
    (742,485)   5
    (743,186)   1
    (745,645)   2
    (746,273)   3
    (747,91)   5
    (748,886)   0
    (749,59)   2
    (749,755)   2
    (751,348)   0
    (752,313)   2
    (752,742)   0
    (752,745)   1
    (753,472)   1
    (753,592)   1
    (754,1007)   0
    (756,633)   1
    (758,847)   2
    (759,500)   3
    (760,340)   2
    (760,381)   2
    (762,962)   3
    (763,954)   0
    (764,392)   1
    (764,913)   3
    (766,915)   3
    (766,936)   0
    (767,372)   1
    (768,307)   0
    (770,458)   0
    (771,487)   0
    (773,56)   1
    (774,773)   0
    (775,115)   1
    (776,537)   1
    (777,392)   1
    (778,893)   0
    (779,644)   0
    (780,256)   2
    (782,399)   1
    (782,892)   2
    (783,614)   2
    (785,816)   1
    (786,462)   1
    (787,876)   1
    (788,273)   4
    (789,696)   2
    (790,471)   1
    (791,793)   3
    (792,636)   3
    (792,955)   3
    (793,809)   0
    (794,986)   1
    (795,656)   0
    (796,347)   3
    (797,880)   2
    (798,802)   0
    (801,130)   1
    (803,896)   3
    (804,1022)   3
    (805,32)   1
    (805,479)   1
    (806,889)   2
    (807,504)   3
    (809,719)   1
    (809,737)   2
    (810,646)   0
    (812,375)   3
    (813,200)   2
    (815,408)   3
    (816,902)   1
    (817,430)   1
    (818,985)   5
    (819,688)   1
    (821,839)   1
    (822,747)   1
    (823,39)   1
    (824,886)   0
    (825,406)   0
    (828,407)   2
    (829,511)   1
    (830,915)   2
    (831,982)   1
    (832,1003)   2
    (833,362)   2
    (833,999)   2
    (834,136)   2
    (834,295)   1
    (835,115)   1
    (836,218)   2
    (837,565)   4
    (839,541)   0
    (839,711)   0
    (840,159)   1
    (841,636)   1
    (842,136)   2
    (843,524)   0
    (844,114)   0
    (846,533)   1
    (847,741)   0
    (848,483)   1
    (849,464)   3
    (850,302)   0
    (851,567)   1
    (852,150)   4
    (852,529)   0
    (853,623)   1
    (855,106)   2
    (856,1014)   1
    (857,151)   2
    (857,650)   1
    (858,781)   1
    (858,994)   0
    (859,508)   0
    (859,716)   0
    (862,636)   2
    (863,21)   4
    (864,1022)   2
    (866,97)   0
    (867,48)   1
    (868,303)   1
    (869,364)   4
    (871,453)   1
    (873,173)   0
    (874,485)   7
    (875,168)   1
    (876,357)   0
    (877,722)   1
    (877,990)   0
    (880,176)   2
    (881,23)   1
    (882,608)   0
    (884,643)   3
    (885,687)   0
    (887,487)   0
    (888,110)   2
    (888,943)   0
    (889,892)   3
    (890,628)   2
    (891,679)   1
    (892,653)   2
    (894,33)   0
    (895,37)   2
    (895,695)   0
    (896,390)   0
    (897,42)   2
    (900,687)   0
    (901,605)   2
    (902,57)   1
    (903,1021)   1
    (904,808)   4
    (905,795)   3
    (906,479)   0
    (907,674)   2
    (909,456)   2
    (911,548)   1
    (914,924)   1
    (915,366)   2
    (915,502)   3
    (916,420)   3
    (916,823)   1
    (918,480)   3
    (920,608)   1
    (925,685)   0
    (926,755)   4
    (929,538)   0
    (930,13)   1
    (931,479)   3
    (933,860)   0
    (934,165)   0
    (935,351)   2
    (936,399)   1
    (938,215)   0
    (939,496)   0
    (940,414)   0
    (941,586)   5
    (942,356)   1
    (943,31)   4
    (943,538)   0
    (944,109)   3
    (945,671)   1
    (946,246)   3
    (947,182)   0
    (948,628)   2
    (949,316)   0
    (950,1017)   0
    (951,221)   2
    (955,457)   1
    (955,823)   0
    (956,653)   2
    (957,656)   0
    (958,644)   0
    (959,667)   2
    (960,78)   3
    (961,828)   4
    (962,877)   1
    (963,397)   1
    (964,370)   1
    (965,504)   3
    (966,483)   2
    (967,1023)   2
    (968,400)   0
    (969,564)   1
    (970,856)   1
    (971,875)   1
    (972,549)   1
    (974,934)   2
    (977,347)   3
    (978,123)   0
    (981,175)   3
    (983,58)   1
    (984,449)   1
    (984,582)   2
    (985,72)   1
    (985,743)   2
    (987,120)   2
    (987,340)   4
    (988,172)   0
    (989,585)   2
    (991,660)   1
    (992,531)   3
    (993,87)   2
    (993,674)   2
    (994,992)   2
    (995,170)   2
    (997,946)   1
    (998,678)   2
    (1001,877)   1
    (1002,286)   2
    (1004,250)   3
    (1006,1022)   3
    (1008,159)   1
    (1009,574)   0
    (1012,533)   1
    (1013,574)   1
    (1014,667)   3
    (1015,127)   1
    (1015,613)   2
    (1016,457)   1
    (1017,180)   2
    (1018,254)   2
    (1019,287)   3
    (1020,67)   3
    (1020,151)   2
    (1021,810)   1
    (1022,491)   0
    (1023,840)   2


  1024x1024 GraphBLAS int32_t matrix, sparse by row
  C_actual, 893 entries, memory: 28.2 KB

    (0,478)   1
    (0,574)   2
    (5,560)   3
    (6,996)   2
    (7,183)   0
    (7,666)   0
    (8,896)   2
    (9,187)   0
    (10,446)   2
    (11,46)   2
    (11,955)   2
    (12,397)   1
    (12,953)   0
    (13,192)   1
    (14,421)   1
    (15,568)   1
    (16,788)   1
    (16,904)   0
    (17,928)   0
    (19,821)   1
    (19,886)   0
    (20,474)   4
    (21,479)   1
    (21,975)   1
    (22,569)   1
    (23,310)   2
    (24,905)   0
    (25,241)   0
    (26,428)   0
    (28,107)   2
    (32,121)   0
    (33,81)   2
    (37,609)   2
    (39,698)   1
    (41,568)   1
    (42,324)   0
    (43,798)   1
    (46,208)   0
    (47,70)   1
    (48,336)   1
    (49,476)   1
    (50,35)   0
    (51,556)   0
    (52,999)   1
    (53,940)   1
    (54,558)   0
    (54,960)   1
    (55,979)   1
    (56,90)   2
    (57,846)   3
    (57,893)   0
    (58,35)   0
    (59,108)   3
    (60,479)   1
    (61,590)   2
    (62,771)   0
    (63,50)   0
    (64,268)   3
    (66,719)   2
    (67,411)   2
    (68,324)   0
    (69,477)   0
    (70,539)   1
    (71,228)   3
    (72,297)   3
    (73,665)   0
    (75,855)   0
    (76,248)   0
    (77,433)   4
    (78,90)   3
    (81,754)   4
    (82,243)   2
    (84,253)   1
    (86,104)   3
    (87,657)   0
    (89,825)   2
    (90,37)   4
    (91,234)   1
    (91,519)   1
    (92,74)   3
    (92,218)   1
    (92,690)   1
    (93,486)   2
    (94,637)   0
    (94,722)   1
    (96,564)   1
    (99,326)   2
    (100,281)   1
    (102,609)   2
    (104,644)   0
    (106,652)   1
    (107,239)   0
    (107,522)   2
    (108,131)   1
    (109,884)   2
    (110,402)   3
    (111,905)   2
    (112,127)   0
    (112,779)   0
    (113,278)   0
    (114,519)   1
    (115,240)   4
    (117,219)   0
    (117,338)   2
    (118,99)   4
    (120,477)   1
    (121,554)   3
    (121,715)   3
    (122,151)   3
    (125,177)   5
    (128,820)   6
    (129,660)   0
    (130,623)   1
    (131,253)   1
    (131,355)   1
    (133,492)   1
    (134,821)   0
    (135,295)   2
    (136,108)   3
    (137,834)   2
    (138,288)   1
    (139,284)   2
    (139,945)   0
    (141,199)   1
    (142,87)   4
    (142,225)   1
    (143,123)   0
    (144,574)   0
    (146,194)   3
    (148,357)   0
    (149,949)   1
    (150,717)   2
    (151,484)   2
    (156,290)   2
    (157,714)   0
    (157,974)   1
    (160,297)   1
    (162,601)   2
    (163,816)   3
    (164,221)   1
    (165,396)   1
    (166,801)   3
    (167,879)   3
    (168,321)   0
    (169,901)   3
    (172,951)   1
    (176,108)   1
    (176,188)   1
    (176,614)   2
    (176,781)   1
    (178,631)   1
    (179,932)   2
    (180,830)   3
    (182,675)   1
    (182,1001)   2
    (183,692)   1
    (184,143)   2
    (185,450)   1
    (186,779)   0
    (187,997)   3
    (188,357)   1
    (189,111)   2
    (190,990)   1
    (192,644)   0
    (192,953)   0
    (193,135)   1
    (194,137)   4
    (195,922)   4
    (197,859)   1
    (198,910)   1
    (199,531)   3
    (201,907)   0
    (202,863)   1
    (203,865)   4
    (204,614)   3
    (207,826)   1
    (208,985)   2
    (209,808)   3
    (211,71)   4
    (211,931)   3
    (212,426)   0
    (213,152)   0
    (214,928)   0
    (215,268)   3
    (216,550)   3
    (217,921)   0
    (218,704)   2
    (218,922)   2
    (219,66)   1
    (220,704)   2
    (221,56)   1
    (221,551)   2
    (222,545)   1
    (223,1016)   2
    (224,721)   1
    (225,935)   1
    (226,727)   0
    (228,743)   4
    (229,535)   2
    (231,551)   3
    (232,897)   2
    (234,520)   2
    (235,522)   2
    (236,221)   3
    (237,755)   2
    (238,964)   2
    (239,82)   0
    (240,388)   0
    (241,500)   2
    (242,124)   3
    (242,193)   0
    (243,300)   0
    (244,588)   0
    (244,1004)   3
    (245,494)   0
    (246,326)   1
    (247,115)   1
    (247,147)   1
    (248,233)   0
    (250,485)   6
    (251,708)   0
    (252,197)   1
    (253,485)   5
    (254,40)   3
    (254,238)   0
    (255,895)   3
    (256,114)   0
    (257,461)   2
    (257,796)   0
    (258,233)   1
    (260,884)   2
    (261,945)   1
    (262,368)   2
    (264,755)   1
    (265,124)   1
    (266,352)   3
    (267,10)   1
    (268,234)   1
    (269,400)   1
    (270,877)   0
    (270,924)   0
    (271,944)   0
    (272,67)   3
    (273,100)   1
    (274,979)   4
    (276,333)   2
    (277,377)   0
    (279,877)   1
    (280,18)   3
    (281,449)   3
    (282,179)   2
    (283,1007)   2
    (285,32)   1
    (286,37)   2
    (287,394)   3
    (288,848)   0
    (290,317)   0
    (291,594)   1
    (294,466)   2
    (294,960)   0
    (295,1)   0
    (295,106)   2
    (296,109)   2
    (296,183)   0
    (296,245)   0
    (297,912)   1
    (299,159)   1
    (300,554)   1
    (301,774)   1
    (302,30)   1
    (303,645)   1
    (304,229)   1
    (305,622)   0
    (307,264)   3
    (308,28)   0
    (309,328)   4
    (309,627)   0
    (310,357)   1
    (311,355)   1
    (312,61)   2
    (314,571)   3
    (315,177)   3
    (315,741)   0
    (316,177)   3
    (316,308)   4
    (320,468)   1
    (321,73)   0
    (322,235)   2
    (323,375)   3
    (323,651)   3
    (324,549)   2
    (325,306)   1
    (325,487)   1
    (326,649)   2
    (327,704)   0
    (329,176)   2
    (330,848)   1
    (330,965)   2
    (332,795)   1
    (334,695)   1
    (336,808)   4
    (337,608)   1
    (338,993)   2
    (339,680)   0
    (340,849)   1
    (342,723)   2
    (343,678)   2
    (344,384)   3
    (344,680)   0
    (345,75)   0
    (347,996)   3
    (348,60)   3
    (348,821)   1
    (350,282)   1
    (352,160)   2
    (353,536)   1
    (355,352)   5
    (356,340)   2
    (358,678)   2
    (360,679)   1
    (361,794)   0
    (361,989)   3
    (362,816)   2
    (363,206)   4
    (364,629)   0
    (365,990)   0
    (366,841)   1
    (366,971)   0
    (367,888)   2
    (368,587)   0
    (369,684)   3
    (370,270)   1
    (372,471)   1
    (373,88)   1
    (375,992)   2
    (376,336)   3
    (377,86)   1
    (378,882)   1
    (379,592)   2
    (380,77)   2
    (380,643)   2
    (381,1012)   2
    (382,816)   2
    (383,711)   2
    (385,670)   1
    (386,537)   1
    (387,347)   2
    (388,494)   1
    (389,328)   3
    (390,551)   1
    (391,59)   2
    (391,600)   1
    (394,692)   4
    (396,645)   2
    (398,107)   3
    (398,246)   2
    (399,436)   3
    (400,172)   0
    (401,790)   3
    (402,320)   2
    (403,40)   2
    (404,641)   0
    (405,49)   0
    (405,475)   1
    (407,320)   3
    (408,61)   4
    (410,754)   3
    (411,643)   2
    (412,949)   1
    (413,94)   5
    (415,26)   1
    (416,575)   0
    (417,366)   3
    (418,160)   0
    (419,209)   1
    (421,614)   1
    (422,177)   2
    (423,873)   1
    (424,542)   3
    (425,263)   0
    (426,377)   0
    (427,149)   0
    (429,305)   0
    (430,718)   1
    (431,51)   0
    (432,857)   2
    (434,604)   0
    (435,152)   2
    (436,356)   1
    (437,105)   3
    (440,338)   0
    (441,982)   2
    (442,880)   1
    (443,753)   1
    (446,741)   0
    (448,646)   0
    (448,744)   2
    (450,579)   1
    (451,147)   0
    (451,1017)   0
    (452,868)   3
    (453,26)   1
    (454,415)   1
    (454,668)   0
    (455,43)   0
    (456,849)   1
    (456,985)   2
    (457,218)   2
    (458,510)   4
    (459,737)   2
    (460,836)   2
    (461,849)   0
    (461,917)   2
    (462,900)   1
    (463,316)   1
    (464,762)   1
    (465,355)   1
    (465,801)   1
    (466,673)   0
    (468,288)   1
    (470,889)   2
    (471,650)   1
    (473,121)   1
    (473,127)   2
    (474,487)   0
    (476,44)   0
    (477,342)   1
    (480,667)   1
    (481,558)   0
    (482,680)   1
    (483,517)   1
    (484,961)   1
    (485,274)   0
    (486,1015)   3
    (487,194)   1
    (489,802)   2
    (490,811)   1
    (491,319)   4
    (492,377)   1
    (494,432)   1
    (495,809)   0
    (496,267)   2
    (496,902)   1
    (498,194)   1
    (500,84)   0
    (501,704)   2
    (503,519)   2
    (504,510)   3
    (505,574)   1
    (507,643)   3
    (508,449)   3
    (512,892)   3
    (513,271)   2
    (517,369)   1
    (518,293)   2
    (520,270)   1
    (521,1013)   1
    (522,284)   1
    (524,945)   1
    (525,94)   5
    (525,362)   2
    (526,52)   1
    (527,61)   3
    (529,998)   0
    (531,908)   1
    (533,674)   4
    (535,660)   1
    (535,776)   1
    (536,500)   3
    (537,799)   2
    (538,492)   2
    (538,861)   1
    (540,245)   0
    (542,137)   2
    (545,658)   0
    (546,213)   1
    (547,767)   1
    (547,912)   3
    (547,1018)   1
    (548,46)   2
    (548,697)   0
    (549,602)   2
    (550,927)   2
    (553,391)   1
    (554,351)   2
    (555,10)   2
    (556,26)   2
    (557,910)   0
    (560,792)   0
    (562,182)   0
    (562,862)   1
    (563,877)   0
    (564,310)   3
    (564,609)   3
    (565,490)   0
    (566,564)   2
    (566,607)   1
    (569,872)   0
    (570,465)   1
    (571,271)   3
    (571,919)   1
    (574,603)   0
    (576,256)   4
    (579,274)   0
    (580,182)   0
    (581,445)   0
    (582,177)   3
    (583,118)   0
    (584,399)   1
    (585,433)   4
    (587,254)   2
    (588,914)   2
    (589,1016)   3
    (590,95)   3
    (590,802)   2
    (592,527)   0
    (593,143)   2
    (594,430)   0
    (595,787)   2
    (598,788)   1
    (599,127)   3
    (601,478)   2
    (602,218)   0
    (603,759)   1
    (604,270)   1
    (605,76)   3
    (606,930)   0
    (608,832)   1
    (609,287)   1
    (610,794)   0
    (611,759)   1
    (613,398)   3
    (614,386)   4
    (615,115)   0
    (616,928)   0
    (617,30)   2
    (618,361)   5
    (619,996)   4
    (620,5)   3
    (621,41)   0
    (623,44)   2
    (624,19)   1
    (624,242)   2
    (624,524)   1
    (626,51)   0
    (627,361)   1
    (628,396)   3
    (629,882)   1
    (630,341)   1
    (631,49)   1
    (631,585)   1
    (632,73)   1
    (634,912)   2
    (635,882)   1
    (636,617)   1
    (637,716)   0
    (638,113)   1
    (639,616)   5
    (640,837)   2
    (641,457)   1
    (643,934)   3
    (647,783)   2
    (648,195)   1
    (649,614)   1
    (650,957)   1
    (651,281)   2
    (652,973)   1
    (653,60)   1
    (653,333)   2
    (654,605)   3
    (655,910)   0
    (656,349)   3
    (660,591)   4
    (661,512)   2
    (663,767)   0
    (665,77)   3
    (666,503)   4
    (667,951)   2
    (668,365)   4
    (669,300)   1
    (671,141)   1
    (671,565)   2
    (672,819)   1
    (674,819)   1
    (675,454)   0
    (676,242)   2
    (677,289)   4
    (678,802)   3
    (680,398)   1
    (681,390)   1
    (682,117)   4
    (683,110)   2
    (684,907)   0
    (686,202)   0
    (687,45)   1
    (688,287)   2
    (689,502)   3
    (690,299)   3
    (691,392)   2
    (692,600)   0
    (694,378)   1
    (695,702)   1
    (696,102)   2
    (698,631)   0
    (699,152)   1
    (700,840)   1
    (702,777)   1
    (703,132)   1
    (704,374)   1
    (705,579)   1
    (706,511)   3
    (707,76)   3
    (708,259)   2
    (708,925)   0
    (709,872)   1
    (709,873)   1
    (710,107)   3
    (710,293)   2
    (711,462)   0
    (714,475)   2
    (715,172)   0
    (715,751)   2
    (716,697)   0
    (717,234)   0
    (718,848)   2
    (719,331)   1
    (720,201)   1
    (720,725)   2
    (722,415)   2
    (722,934)   2
    (723,675)   2
    (724,480)   3
    (727,177)   4
    (728,797)   1
    (729,884)   1
    (730,767)   0
    (731,275)   1
    (732,910)   0
    (733,763)   5
    (734,574)   0
    (735,268)   3
    (736,115)   1
    (737,912)   2
    (738,1023)   2
    (739,335)   0
    (740,596)   3
    (741,365)   1
    (742,485)   5
    (743,186)   1
    (745,645)   2
    (746,273)   3
    (747,91)   5
    (748,886)   0
    (749,59)   2
    (749,755)   2
    (751,348)   0
    (752,313)   2
    (752,742)   0
    (752,745)   1
    (753,472)   1
    (753,592)   1
    (754,1007)   0
    (756,633)   1
    (758,847)   2
    (759,500)   3
    (760,340)   2
    (760,381)   2
    (762,962)   3
    (763,954)   0
    (764,392)   1
    (764,913)   3
    (766,915)   3
    (766,936)   0
    (767,372)   1
    (768,307)   0
    (770,458)   0
    (771,487)   0
    (773,56)   1
    (774,773)   0
    (775,115)   1
    (776,537)   1
    (777,392)   1
    (778,893)   0
    (779,644)   0
    (780,256)   2
    (782,399)   1
    (782,892)   2
    (783,614)   2
    (785,816)   1
    (786,462)   1
    (787,876)   1
    (788,273)   4
    (789,696)   2
    (790,471)   1
    (791,793)   3
    (792,636)   3
    (792,955)   3
    (793,809)   0
    (794,986)   1
    (795,656)   0
    (796,347)   3
    (797,880)   2
    (798,802)   0
    (801,130)   1
    (803,896)   3
    (804,1022)   3
    (805,32)   1
    (805,479)   1
    (806,889)   2
    (807,504)   3
    (809,719)   1
    (809,737)   2
    (810,646)   0
    (812,375)   3
    (813,200)   2
    (815,408)   3
    (816,902)   1
    (817,430)   1
    (818,985)   5
    (819,688)   1
    (821,839)   1
    (822,747)   1
    (823,39)   1
    (824,886)   0
    (825,406)   0
    (828,407)   2
    (829,511)   1
    (830,915)   2
    (831,982)   1
    (832,1003)   2
    (833,362)   2
    (833,999)   2
    (834,136)   2
    (834,295)   1
    (835,115)   1
    (836,218)   2
    (837,565)   4
    (839,541)   0
    (839,711)   0
    (840,159)   1
    (841,636)   1
    (842,136)   2
    (843,524)   0
    (844,114)   0
    (846,533)   1
    (847,741)   0
    (848,483)   1
    (849,464)   3
    (850,302)   0
    (851,567)   1
    (852,150)   4
    (852,529)   0
    (853,623)   1
    (855,106)   2
    (856,1014)   1
    (857,151)   2
    (857,650)   1
    (858,781)   1
    (858,994)   0
    (859,508)   0
    (859,716)   0
    (862,636)   2
    (863,21)   4
    (864,1022)   2
    (866,97)   0
    (867,48)   1
    (868,303)   1
    (869,364)   4
    (871,453)   1
    (873,173)   0
    (874,485)   7
    (875,168)   1
    (876,357)   0
    (877,722)   1
    (877,990)   0
    (880,176)   2
    (881,23)   1
    (882,608)   0
    (884,643)   3
    (885,687)   0
    (887,487)   0
    (888,110)   2
    (888,943)   0
    (889,892)   3
    (890,628)   2
    (891,679)   1
    (892,653)   2
    (894,33)   0
    (895,37)   2
    (895,695)   0
    (896,390)   0
    (897,42)   2
    (900,687)   0
    (901,605)   2
    (902,57)   1
    (903,1021)   1
    (904,808)   4
    (905,795)   3
    (906,479)   0
    (907,674)   2
    (909,456)   2
    (911,548)   1
    (914,924)   1
    (915,366)   2
    (915,502)   3
    (916,420)   3
    (916,823)   1
    (918,480)   3
    (920,608)   1
    (925,685)   0
    (926,755)   4
    (929,538)   0
    (930,13)   1
    (931,479)   3
    (933,860)   0
    (934,165)   0
    (935,351)   2
    (936,399)   1
    (938,215)   0
    (939,496)   0
    (940,414)   0
    (941,586)   5
    (942,356)   1
    (943,31)   4
    (943,538)   0
    (944,109)   3
    (945,671)   1
    (946,246)   3
    (947,182)   0
    (948,628)   2
    (949,316)   0
    (950,1017)   0
    (951,221)   2
    (955,457)   1
    (955,823)   0
    (956,653)   2
    (957,656)   0
    (958,644)   0
    (959,667)   2
    (960,78)   3
    (961,828)   4
    (962,877)   1
    (963,397)   1
    (964,370)   1
    (965,504)   3
    (966,483)   2
    (967,1023)   2
    (968,400)   0
    (969,564)   1
    (970,856)   1
    (971,875)   1
    (972,549)   1
    (974,934)   2
    (977,347)   3
    (978,123)   0
    (981,175)   3
    (983,58)   1
    (984,449)   1
    (984,582)   2
    (985,72)   1
    (985,743)   2
    (987,120)   2
    (987,340)   4
    (988,172)   0
    (989,585)   2
    (991,660)   1
    (992,531)   3
    (993,87)   2
    (993,674)   2
    (994,992)   2
    (995,170)   2
    (997,946)   1
    (998,678)   2
    (1001,877)   1
    (1002,286)   2
    (1004,250)   3
    (1006,1022)   3
    (1008,159)   1
    (1009,574)   0
    (1012,533)   1
    (1013,574)   1
    (1014,667)   3
    (1015,127)   1
    (1015,613)   2
    (1016,457)   1
    (1017,180)   2
    (1018,254)   2
    (1019,287)   3
    (1020,67)   3
    (1020,151)   2
    (1021,810)   1
    (1022,491)   0
    (1023,840)   2

 rmm_wrap_alloc 256 bytes
 rmm_wrap_alloc 256 bytes

  1024x1024 GraphBLAS double matrix, sparse by row
  Diff actual, 893 entries, memory: 32.2 KB

    (0,478)    0
    (0,574)    0
    (5,560)    0
    (6,996)    0
    (7,183)    0
    (7,666)    0
    (8,896)    0
    (9,187)    0
    (10,446)    0
    (11,46)    0
    (11,955)    0
    (12,397)    0
    (12,953)    0
    (13,192)    0
    (14,421)    0
    (15,568)    0
    (16,788)    0
    (16,904)    0
    (17,928)    0
    (19,821)    0
    (19,886)    0
    (20,474)    0
    (21,479)    0
    (21,975)    0
    (22,569)    0
    (23,310)    0
    (24,905)    0
    (25,241)    0
    (26,428)    0
    (28,107)    0
    (32,121)    0
    (33,81)    0
    (37,609)    0
    (39,698)    0
    (41,568)    0
    (42,324)    0
    (43,798)    0
    (46,208)    0
    (47,70)    0
    (48,336)    0
    (49,476)    0
    (50,35)    0
    (51,556)    0
    (52,999)    0
    (53,940)    0
    (54,558)    0
    (54,960)    0
    (55,979)    0
    (56,90)    0
    (57,846)    0
    (57,893)    0
    (58,35)    0
    (59,108)    0
    (60,479)    0
    (61,590)    0
    (62,771)    0
    (63,50)    0
    (64,268)    0
    (66,719)    0
    (67,411)    0
    (68,324)    0
    (69,477)    0
    (70,539)    0
    (71,228)    0
    (72,297)    0
    (73,665)    0
    (75,855)    0
    (76,248)    0
    (77,433)    0
    (78,90)    0
    (81,754)    0
    (82,243)    0
    (84,253)    0
    (86,104)    0
    (87,657)    0
    (89,825)    0
    (90,37)    0
    (91,234)    0
    (91,519)    0
    (92,74)    0
    (92,218)    0
    (92,690)    0
    (93,486)    0
    (94,637)    0
    (94,722)    0
    (96,564)    0
    (99,326)    0
    (100,281)    0
    (102,609)    0
    (104,644)    0
    (106,652)    0
    (107,239)    0
    (107,522)    0
    (108,131)    0
    (109,884)    0
    (110,402)    0
    (111,905)    0
    (112,127)    0
    (112,779)    0
    (113,278)    0
    (114,519)    0
    (115,240)    0
    (117,219)    0
    (117,338)    0
    (118,99)    0
    (120,477)    0
    (121,554)    0
    (121,715)    0
    (122,151)    0
    (125,177)    0
    (128,820)    0
    (129,660)    0
    (130,623)    0
    (131,253)    0
    (131,355)    0
    (133,492)    0
    (134,821)    0
    (135,295)    0
    (136,108)    0
    (137,834)    0
    (138,288)    0
    (139,284)    0
    (139,945)    0
    (141,199)    0
    (142,87)    0
    (142,225)    0
    (143,123)    0
    (144,574)    0
    (146,194)    0
    (148,357)    0
    (149,949)    0
    (150,717)    0
    (151,484)    0
    (156,290)    0
    (157,714)    0
    (157,974)    0
    (160,297)    0
    (162,601)    0
    (163,816)    0
    (164,221)    0
    (165,396)    0
    (166,801)    0
    (167,879)    0
    (168,321)    0
    (169,901)    0
    (172,951)    0
    (176,108)    0
    (176,188)    0
    (176,614)    0
    (176,781)    0
    (178,631)    0
    (179,932)    0
    (180,830)    0
    (182,675)    0
    (182,1001)    0
    (183,692)    0
    (184,143)    0
    (185,450)    0
    (186,779)    0
    (187,997)    0
    (188,357)    0
    (189,111)    0
    (190,990)    0
    (192,644)    0
    (192,953)    0
    (193,135)    0
    (194,137)    0
    (195,922)    0
    (197,859)    0
    (198,910)    0
    (199,531)    0
    (201,907)    0
    (202,863)    0
    (203,865)    0
    (204,614)    0
    (207,826)    0
    (208,985)    0
    (209,808)    0
    (211,71)    0
    (211,931)    0
    (212,426)    0
    (213,152)    0
    (214,928)    0
    (215,268)    0
    (216,550)    0
    (217,921)    0
    (218,704)    0
    (218,922)    0
    (219,66)    0
    (220,704)    0
    (221,56)    0
    (221,551)    0
    (222,545)    0
    (223,1016)    0
    (224,721)    0
    (225,935)    0
    (226,727)    0
    (228,743)    0
    (229,535)    0
    (231,551)    0
    (232,897)    0
    (234,520)    0
    (235,522)    0
    (236,221)    0
    (237,755)    0
    (238,964)    0
    (239,82)    0
    (240,388)    0
    (241,500)    0
    (242,124)    0
    (242,193)    0
    (243,300)    0
    (244,588)    0
    (244,1004)    0
    (245,494)    0
    (246,326)    0
    (247,115)    0
    (247,147)    0
    (248,233)    0
    (250,485)    0
    (251,708)    0
    (252,197)    0
    (253,485)    0
    (254,40)    0
    (254,238)    0
    (255,895)    0
    (256,114)    0
    (257,461)    0
    (257,796)    0
    (258,233)    0
    (260,884)    0
    (261,945)    0
    (262,368)    0
    (264,755)    0
    (265,124)    0
    (266,352)    0
    (267,10)    0
    (268,234)    0
    (269,400)    0
    (270,877)    0
    (270,924)    0
    (271,944)    0
    (272,67)    0
    (273,100)    0
    (274,979)    0
    (276,333)    0
    (277,377)    0
    (279,877)    0
    (280,18)    0
    (281,449)    0
    (282,179)    0
    (283,1007)    0
    (285,32)    0
    (286,37)    0
    (287,394)    0
    (288,848)    0
    (290,317)    0
    (291,594)    0
    (294,466)    0
    (294,960)    0
    (295,1)    0
    (295,106)    0
    (296,109)    0
    (296,183)    0
    (296,245)    0
    (297,912)    0
    (299,159)    0
    (300,554)    0
    (301,774)    0
    (302,30)    0
    (303,645)    0
    (304,229)    0
    (305,622)    0
    (307,264)    0
    (308,28)    0
    (309,328)    0
    (309,627)    0
    (310,357)    0
    (311,355)    0
    (312,61)    0
    (314,571)    0
    (315,177)    0
    (315,741)    0
    (316,177)    0
    (316,308)    0
    (320,468)    0
    (321,73)    0
    (322,235)    0
    (323,375)    0
    (323,651)    0
    (324,549)    0
    (325,306)    0
    (325,487)    0
    (326,649)    0
    (327,704)    0
    (329,176)    0
    (330,848)    0
    (330,965)    0
    (332,795)    0
    (334,695)    0
    (336,808)    0
    (337,608)    0
    (338,993)    0
    (339,680)    0
    (340,849)    0
    (342,723)    0
    (343,678)    0
    (344,384)    0
    (344,680)    0
    (345,75)    0
    (347,996)    0
    (348,60)    0
    (348,821)    0
    (350,282)    0
    (352,160)    0
    (353,536)    0
    (355,352)    0
    (356,340)    0
    (358,678)    0
    (360,679)    0
    (361,794)    0
    (361,989)    0
    (362,816)    0
    (363,206)    0
    (364,629)    0
    (365,990)    0
    (366,841)    0
    (366,971)    0
    (367,888)    0
    (368,587)    0
    (369,684)    0
    (370,270)    0
    (372,471)    0
    (373,88)    0
    (375,992)    0
    (376,336)    0
    (377,86)    0
    (378,882)    0
    (379,592)    0
    (380,77)    0
    (380,643)    0
    (381,1012)    0
    (382,816)    0
    (383,711)    0
    (385,670)    0
    (386,537)    0
    (387,347)    0
    (388,494)    0
    (389,328)    0
    (390,551)    0
    (391,59)    0
    (391,600)    0
    (394,692)    0
    (396,645)    0
    (398,107)    0
    (398,246)    0
    (399,436)    0
    (400,172)    0
    (401,790)    0
    (402,320)    0
    (403,40)    0
    (404,641)    0
    (405,49)    0
    (405,475)    0
    (407,320)    0
    (408,61)    0
    (410,754)    0
    (411,643)    0
    (412,949)    0
    (413,94)    0
    (415,26)    0
    (416,575)    0
    (417,366)    0
    (418,160)    0
    (419,209)    0
    (421,614)    0
    (422,177)    0
    (423,873)    0
    (424,542)    0
    (425,263)    0
    (426,377)    0
    (427,149)    0
    (429,305)    0
    (430,718)    0
    (431,51)    0
    (432,857)    0
    (434,604)    0
    (435,152)    0
    (436,356)    0
    (437,105)    0
    (440,338)    0
    (441,982)    0
    (442,880)    0
    (443,753)    0
    (446,741)    0
    (448,646)    0
    (448,744)    0
    (450,579)    0
    (451,147)    0
    (451,1017)    0
    (452,868)    0
    (453,26)    0
    (454,415)    0
    (454,668)    0
    (455,43)    0
    (456,849)    0
    (456,985)    0
    (457,218)    0
    (458,510)    0
    (459,737)    0
    (460,836)    0
    (461,849)    0
    (461,917)    0
    (462,900)    0
    (463,316)    0
    (464,762)    0
    (465,355)    0
    (465,801)    0
    (466,673)    0
    (468,288)    0
    (470,889)    0
    (471,650)    0
    (473,121)    0
    (473,127)    0
    (474,487)    0
    (476,44)    0
    (477,342)    0
    (480,667)    0
    (481,558)    0
    (482,680)    0
    (483,517)    0
    (484,961)    0
    (485,274)    0
    (486,1015)    0
    (487,194)    0
    (489,802)    0
    (490,811)    0
    (491,319)    0
    (492,377)    0
    (494,432)    0
    (495,809)    0
    (496,267)    0
    (496,902)    0
    (498,194)    0
    (500,84)    0
    (501,704)    0
    (503,519)    0
    (504,510)    0
    (505,574)    0
    (507,643)    0
    (508,449)    0
    (512,892)    0
    (513,271)    0
    (517,369)    0
    (518,293)    0
    (520,270)    0
    (521,1013)    0
    (522,284)    0
    (524,945)    0
    (525,94)    0
    (525,362)    0
    (526,52)    0
    (527,61)    0
    (529,998)    0
    (531,908)    0
    (533,674)    0
    (535,660)    0
    (535,776)    0
    (536,500)    0
    (537,799)    0
    (538,492)    0
    (538,861)    0
    (540,245)    0
    (542,137)    0
    (545,658)    0
    (546,213)    0
    (547,767)    0
    (547,912)    0
    (547,1018)    0
    (548,46)    0
    (548,697)    0
    (549,602)    0
    (550,927)    0
    (553,391)    0
    (554,351)    0
    (555,10)    0
    (556,26)    0
    (557,910)    0
    (560,792)    0
    (562,182)    0
    (562,862)    0
    (563,877)    0
    (564,310)    0
    (564,609)    0
    (565,490)    0
    (566,564)    0
    (566,607)    0
    (569,872)    0
    (570,465)    0
    (571,271)    0
    (571,919)    0
    (574,603)    0
    (576,256)    0
    (579,274)    0
    (580,182)    0
    (581,445)    0
    (582,177)    0
    (583,118)    0
    (584,399)    0
    (585,433)    0
    (587,254)    0
    (588,914)    0
    (589,1016)    0
    (590,95)    0
    (590,802)    0
    (592,527)    0
    (593,143)    0
    (594,430)    0
    (595,787)    0
    (598,788)    0
    (599,127)    0
    (601,478)    0
    (602,218)    0
    (603,759)    0
    (604,270)    0
    (605,76)    0
    (606,930)    0
    (608,832)    0
    (609,287)    0
    (610,794)    0
    (611,759)    0
    (613,398)    0
    (614,386)    0
    (615,115)    0
    (616,928)    0
    (617,30)    0
    (618,361)    0
    (619,996)    0
    (620,5)    0
    (621,41)    0
    (623,44)    0
    (624,19)    0
    (624,242)    0
    (624,524)    0
    (626,51)    0
    (627,361)    0
    (628,396)    0
    (629,882)    0
    (630,341)    0
    (631,49)    0
    (631,585)    0
    (632,73)    0
    (634,912)    0
    (635,882)    0
    (636,617)    0
    (637,716)    0
    (638,113)    0
    (639,616)    0
    (640,837)    0
    (641,457)    0
    (643,934)    0
    (647,783)    0
    (648,195)    0
    (649,614)    0
    (650,957)    0
    (651,281)    0
    (652,973)    0
    (653,60)    0
    (653,333)    0
    (654,605)    0
    (655,910)    0
    (656,349)    0
    (660,591)    0
    (661,512)    0
    (663,767)    0
    (665,77)    0
    (666,503)    0
    (667,951)    0
    (668,365)    0
    (669,300)    0
    (671,141)    0
    (671,565)    0
    (672,819)    0
    (674,819)    0
    (675,454)    0
    (676,242)    0
    (677,289)    0
    (678,802)    0
    (680,398)    0
    (681,390)    0
    (682,117)    0
    (683,110)    0
    (684,907)    0
    (686,202)    0
    (687,45)    0
    (688,287)    0
    (689,502)    0
    (690,299)    0
    (691,392)    0
    (692,600)    0
    (694,378)    0
    (695,702)    0
    (696,102)    0
    (698,631)    0
    (699,152)    0
    (700,840)    0
    (702,777)    0
    (703,132)    0
    (704,374)    0
    (705,579)    0
    (706,511)    0
    (707,76)    0
    (708,259)    0
    (708,925)    0
    (709,872)    0
    (709,873)    0
    (710,107)    0
    (710,293)    0
    (711,462)    0
    (714,475)    0
    (715,172)    0
    (715,751)    0
    (716,697)    0
    (717,234)    0
    (718,848)    0
    (719,331)    0
    (720,201)    0
    (720,725)    0
    (722,415)    0
    (722,934)    0
    (723,675)    0
    (724,480)    0
    (727,177)    0
    (728,797)    0
    (729,884)    0
    (730,767)    0
    (731,275)    0
    (732,910)    0
    (733,763)    0
    (734,574)    0
    (735,268)    0
    (736,115)    0
    (737,912)    0
    (738,1023)    0
    (739,335)    0
    (740,596)    0
    (741,365)    0
    (742,485)    0
    (743,186)    0
    (745,645)    0
    (746,273)    0
    (747,91)    0
    (748,886)    0
    (749,59)    0
    (749,755)    0
    (751,348)    0
    (752,313)    0
    (752,742)    0
    (752,745)    0
    (753,472)    0
    (753,592)    0
    (754,1007)    0
    (756,633)    0
    (758,847)    0
    (759,500)    0
    (760,340)    0
    (760,381)    0
    (762,962)    0
    (763,954)    0
    (764,392)    0
    (764,913)    0
    (766,915)    0
    (766,936)    0
    (767,372)    0
    (768,307)    0
    (770,458)    0
    (771,487)    0
    (773,56)    0
    (774,773)    0
    (775,115)    0
    (776,537)    0
    (777,392)    0
    (778,893)    0
    (779,644)    0
    (780,256)    0
    (782,399)    0
    (782,892)    0
    (783,614)    0
    (785,816)    0
    (786,462)    0
    (787,876)    0
    (788,273)    0
    (789,696)    0
    (790,471)    0
    (791,793)    0
    (792,636)    0
    (792,955)    0
    (793,809)    0
    (794,986)    0
    (795,656)    0
    (796,347)    0
    (797,880)    0
    (798,802)    0
    (801,130)    0
    (803,896)    0
    (804,1022)    0
    (805,32)    0
    (805,479)    0
    (806,889)    0
    (807,504)    0
    (809,719)    0
    (809,737)    0
    (810,646)    0
    (812,375)    0
    (813,200)    0
    (815,408)    0
    (816,902)    0
    (817,430)    0
    (818,985)    0
    (819,688)    0
    (821,839)    0
    (822,747)    0
    (823,39)    0
    (824,886)    0
    (825,406)    0
    (828,407)    0
    (829,511)    0
    (830,915)    0
    (831,982)    0
    (832,1003)    0
    (833,362)    0
    (833,999)    0
    (834,136)    0
    (834,295)    0
    (835,115)    0
    (836,218)    0
    (837,565)    0
    (839,541)    0
    (839,711)    0
    (840,159)    0
    (841,636)    0
    (842,136)    0
    (843,524)    0
    (844,114)    0
    (846,533)    0
    (847,741)    0
    (848,483)    0
    (849,464)    0
    (850,302)    0
    (851,567)    0
    (852,150)    0
    (852,529)    0
    (853,623)    0
    (855,106)    0
    (856,1014)    0
    (857,151)    0
    (857,650)    0
    (858,781)    0
    (858,994)    0
    (859,508)    0
    (859,716)    0
    (862,636)    0
    (863,21)    0
    (864,1022)    0
    (866,97)    0
    (867,48)    0
    (868,303)    0
    (869,364)    0
    (871,453)    0
    (873,173)    0
    (874,485)    0
    (875,168)    0
    (876,357)    0
    (877,722)    0
    (877,990)    0
    (880,176)    0
    (881,23)    0
    (882,608)    0
    (884,643)    0
    (885,687)    0
    (887,487)    0
    (888,110)    0
    (888,943)    0
    (889,892)    0
    (890,628)    0
    (891,679)    0
    (892,653)    0
    (894,33)    0
    (895,37)    0
    (895,695)    0
    (896,390)    0
    (897,42)    0
    (900,687)    0
    (901,605)    0
    (902,57)    0
    (903,1021)    0
    (904,808)    0
    (905,795)    0
    (906,479)    0
    (907,674)    0
    (909,456)    0
    (911,548)    0
    (914,924)    0
    (915,366)    0
    (915,502)    0
    (916,420)    0
    (916,823)    0
    (918,480)    0
    (920,608)    0
    (925,685)    0
    (926,755)    0
    (929,538)    0
    (930,13)    0
    (931,479)    0
    (933,860)    0
    (934,165)    0
    (935,351)    0
    (936,399)    0
    (938,215)    0
    (939,496)    0
    (940,414)    0
    (941,586)    0
    (942,356)    0
    (943,31)    0
    (943,538)    0
    (944,109)    0
    (945,671)    0
    (946,246)    0
    (947,182)    0
    (948,628)    0
    (949,316)    0
    (950,1017)    0
    (951,221)    0
    (955,457)    0
    (955,823)    0
    (956,653)    0
    (957,656)    0
    (958,644)    0
    (959,667)    0
    (960,78)    0
    (961,828)    0
    (962,877)    0
    (963,397)    0
    (964,370)    0
    (965,504)    0
    (966,483)    0
    (967,1023)    0
    (968,400)    0
    (969,564)    0
    (970,856)    0
    (971,875)    0
    (972,549)    0
    (974,934)    0
    (977,347)    0
    (978,123)    0
    (981,175)    0
    (983,58)    0
    (984,449)    0
    (984,582)    0
    (985,72)    0
    (985,743)    0
    (987,120)    0
    (987,340)    0
    (988,172)    0
    (989,585)    0
    (991,660)    0
    (992,531)    0
    (993,87)    0
    (993,674)    0
    (994,992)    0
    (995,170)    0
    (997,946)    0
    (998,678)    0
    (1001,877)    0
    (1002,286)    0
    (1004,250)    0
    (1006,1022)    0
    (1008,159)    0
    (1009,574)    0
    (1012,533)    0
    (1013,574)    0
    (1014,667)    0
    (1015,127)    0
    (1015,613)    0
    (1016,457)    0
    (1017,180)    0
    (1018,254)    0
    (1019,287)    0
    (1020,67)    0
    (1020,151)    0
    (1021,810)    0
    (1022,491)    0
    (1023,840)    0


  1024x1024 GraphBLAS bool matrix, sparse by row
  T actual, 893 entries, memory: 25.2 KB

    (0,478)   1
    (0,574)   1
    (5,560)   1
    (6,996)   1
    (7,183)   1
    (7,666)   1
    (8,896)   1
    (9,187)   1
    (10,446)   1
    (11,46)   1
    (11,955)   1
    (12,397)   1
    (12,953)   1
    (13,192)   1
    (14,421)   1
    (15,568)   1
    (16,788)   1
    (16,904)   1
    (17,928)   1
    (19,821)   1
    (19,886)   1
    (20,474)   1
    (21,479)   1
    (21,975)   1
    (22,569)   1
    (23,310)   1
    (24,905)   1
    (25,241)   1
    (26,428)   1
    ...
 work:893 gpus:0 Getting test data
Creating problem gen
filling matrices
inside fill, using seed 4567
fill_random nrows=1024ncols=1024 need 1024 values, invsparse = 1024
fill_random after alloc values
vdim ready 
vlen ready 
ready to fill p
filling sparse
1024 nonzeroes left to fill..
35 nonzeroes left to fill..
inside fill, using seed 4567
fill_random nrows=1024ncols=1024 need 1024 values, invsparse = 1024
fill_random after alloc values
vdim ready 
vlen ready 
ready to fill p
filling sparse
1024 nonzeroes left to fill..
35 nonzeroes left to fill..
 rmm_wrap_alloc 8192 bytes
inside fill, using seed 543210
fill_random nrows=1024ncols=1024 need 2048 values, invsparse = 512
fill_random after alloc values
vdim ready 
vlen ready 
ready to fill p
filling sparse
2048 nonzeroes left to fill..
504 nonzeroes left to fill..
 rmm_wrap_alloc 256 bytes
 rmm_wrap_alloc 256 bytes
 rmm_wrap_alloc 4096 bytes
 rmm_wrap_alloc 16384 bytes
 rmm_wrap_alloc 16384 bytes
 rmm_wrap_alloc 16384 bytes
 rmm_wrap_alloc 256 bytes
 rmm_wrap_alloc 8192 bytes
inside fill, using seed 32
fill_random nrows=1024ncols=1024 need 10240 values, invsparse = 103
fill_random after alloc values
vdim ready 
vlen ready 
ready to fill p
filling sparse
10240 nonzeroes left to fill..
4633 nonzeroes left to fill..
 rmm_wrap_alloc 16384 bytes
 rmm_wrap_alloc 256 bytes
1024 slots to fill
all pairs to bucket 6, no filling
done assigning buckets
Building semiring factgory
 calling stringify semiring: 0x7f1ff5416f00
inside enumify: 0x7f1ff5416f00

    GraphBLAS Semiring: semiring (user-defined)
    GraphBLAS Monoid: semiring->add (built-in)
    GraphBLAS BinaryOp: monoid->op (built-in) z=plus(x,y)
    GraphBLAS type: ztype int32_t size: 4
    GraphBLAS type: xtype int32_t size: 4
    GraphBLAS type: ytype int32_t size: 4
    identity: [   0 ] 

    GraphBLAS BinaryOp: semiring->multiply (built-in) z=times(x,y)
    GraphBLAS type: ztype int32_t size: 4
    GraphBLAS type: xtype int32_t size: 4
    GraphBLAS type: ytype int32_t size: 4
Getting semiring add
Getting semiring mult
Getting semiring add op
Getting types
Getting opcodes
Getting typecodes
Performing asserts
Invoking boolean rename
Invoking boolean rename
Invoking enumify binop
e 14
Invoking enumify monoid
Calling enumify binop
Inside plus binop code
e 11
Calling enumify identity
Calling enumify terminal
Done enumify monoid
Done invoking enumify monoid
atype
btype
ctype
Invoking enumify_mask, mtype 0x7f2028b56f40
GB_enumify_mask gets mcode: 6 Mask_struct: 0 Mask_comp: 0
got mask_ecode: 8
constructing semiring scode
before: add_ecode: 11, id_ecode: 0, term_ecode: 31, mult_ecode: 14, flipxy: 0, zcode: 6, xcode: 6, ycode: 6, mask_ecode: 8, ccode: 6, acode: 6, bcode: 6, csparsity: 0, msparsity: 0, asparsity: 0, bsparsity: 0
serialized_scode: 397409434378593792
done enumify semiring
scode=397409434378593792
done stringify semiring
 returned from  stringify semiring
 rmm_wrap_alloc 256 bytes
 rmm_wrap_alloc 8192 bytes
1024 slots to fill
all pairs to bucket 6, no filling
done assigning buckets
bucket 6 has 1024 dots to do
LAUNCHING BUCKET CODE: 6
INside get cached file
looking for prog in file /home/cjnolet/.SuiteSparse/GraphBLAS/6.3.0/GB_semiring_397409434378593792.h
opening /home/cjnolet/.SuiteSparse/GraphBLAS/6.3.0/GB_semiring_397409434378593792.h for write
about to close
 read cache file /home/cjnolet/.SuiteSparse/GraphBLAS/6.3.0/GB_semiring_397409434378593792.h
successful_read: 1
Just closed
 jit_cache get program GB_jit_AxB_dot3_phase3_vssp
found memory-cached prog GB_jit_AxB_dot3_phase3_vssp
 got kernel instance AxB_dot3_phase3_vssp_int32_t_int32_t_int32_t
found memory-cached prog AxB_dot3_phase3_vssp_int32_t_int32_t_int32_t
Launching _Z20AxB_dot3_phase3_vsspIiiiEvxxPxP16GB_Matrix_opaqueS2_S2_S2_i<<<32,32,0,0>>>(long,long,long*,GB_Matrix_opaque*,GB_Matrix_opaque*,GB_Matrix_opaque*,GB_Matrix_opaque*,int)
Printing bucketp
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
Done.
returned from kernel 1.00352ms

  1024x1024 GraphBLAS int32_t matrix, sparse by row
  sparsity control: sparse only
  C GPU, 1024 entries, memory: 28.2 KB
  pending tuples: 0 max pending: 0 zombies: 1001

    (0,478) zombie
    (0,574) zombie
    (2,376) zombie
    (5,560) zombie
    (6,996) zombie
    (7,183) zombie
    (7,666) zombie
    (8,896) zombie
    (9,187) zombie
    (10,446) zombie
    (11,46) zombie
    (11,955) zombie
    (12,397) zombie
    (12,953) zombie
    (13,192) zombie
    (14,421) zombie
    (15,568) zombie
    (16,788) zombie
    (16,904) zombie
    (17,928) zombie
    (18,103) zombie
    (19,821) zombie
    (19,886) zombie
    (20,474) zombie
    (21,479) zombie
    (21,975) zombie
    (22,569) zombie
    (23,310) zombie
    (24,905) zombie
    ...
 rmm_wrap_alloc 256 bytes
Not using cuda path. M_is_hypersparse: 0, A->iso: 0, B->iso: 0, A_BITMAP: 0, B_BITMAP: 0, GB_IS_FULL(A): 0, GB_IS_FULL(B): 0, semiring header size: 32
 rmm_wrap_alloc 16384 bytes

  1024x1024 GraphBLAS int32_t matrix, sparse by row
  sparsity control: sparse only
  M actual, 1024 entries, memory: 28.2 KB

    (0,478)   0
    (0,574)   0
    (2,376)   1
    (5,560)   0
    (6,996)   0
    (7,183)   1
    (7,666)   1
    (8,896)   0
    (9,187)   0
    (10,446)   1
    (11,46)   1
    (11,955)   1
    (12,397)   0
    (12,953)   1
    (13,192)   1
    (14,421)   0
    (15,568)   1
    (16,788)   1
    (16,904)   1
    (17,928)   0
    (18,103)   1
    (19,821)   0
    (19,886)   0
    (20,474)   0
    (21,479)   1
    (21,975)   0
    (22,569)   1
    (23,310)   0
    (24,905)   1
    ...
 rmm_wrap_alloc 16384 bytes
 rmm_wrap_alloc 256 bytes
 rmm_wrap_alloc 256 bytes

  1024x1024 GraphBLAS int32_t matrix, sparse by row
  sparsity control: sparse only
  C GPU, 23 entries, memory: 16.6 KB

    (42,324)   0
    (73,665)   1
    (106,652)   0
    (138,288)   1
    (242,124)   1
    (295,1)   0
    (300,554)   1
    (312,61)   0
    (344,384)   0
    (496,267)   0
    (587,254)   1
    (686,202)   0
    (708,925)   1
    (715,751)   0
    (729,884)   0
    (741,365)   1
    (751,348)   1
    (792,636)   0
    (857,151)   0
    (876,357)   0
    (940,414)   0
    (945,671)   0
    (968,400)   1


  1024x1024 GraphBLAS int32_t matrix, hypersparse by row
  C_actual, 23 entries, memory: 1.1 KB

    (42,324)   0
    (73,665)   1
    (106,652)   0
    (138,288)   1
    (242,124)   1
    (295,1)   0
    (300,554)   1
    (312,61)   0
    (344,384)   0
    (496,267)   0
    (587,254)   1
    (686,202)   0
    (708,925)   1
    (715,751)   0
    (729,884)   0
    (741,365)   1
    (751,348)   1
    (792,636)   0
    (857,151)   0
    (876,357)   0
    (940,414)   0
    (945,671)   0
    (968,400)   1

 rmm_wrap_alloc 256 bytes
 rmm_wrap_alloc 256 bytes
 rmm_wrap_alloc 256 bytes
 rmm_wrap_alloc 256 bytes
 rmm_wrap_alloc 256 bytes
 rmm_wrap_alloc 256 bytes
 rmm_wrap_alloc 256 bytes
 rmm_wrap_alloc 256 bytes
 rmm_wrap_alloc 256 bytes
 rmm_wrap_alloc 256 bytes

  1024x1024 GraphBLAS double matrix, hypersparse by row
  Diff actual, 23 entries, memory: 1.2 KB

    (42,324)    0
    (73,665)    0
    (106,652)    0
    (138,288)    0
    (242,124)    0
    (295,1)    0
    (300,554)    0
    (312,61)    0
    (344,384)    0
    (496,267)    0
    (587,254)    0
    (686,202)    0
    (708,925)    0
    (715,751)    0
    (729,884)    0
    (741,365)    0
    (751,348)    0
    (792,636)    0
    (857,151)    0
    (876,357)    0
    (940,414)    0
    (945,671)    0
    (968,400)    0


  1024x1024 GraphBLAS bool matrix, hypersparse by row
  T actual, 23 entries, memory: 1.0 KB

    (42,324)   1
    (73,665)   1
    (106,652)   1
    (138,288)   1
    (242,124)   1
    (295,1)   1
    (300,554)   1
    (312,61)   1
    (344,384)   1
    (496,267)   1
    (587,254)   1
    (686,202)   1
    (708,925)   1
    (715,751)   1
    (729,884)   1
    (741,365)   1
    (751,348)   1
    (792,636)   1
    (857,151)   1
    (876,357)   1
    (940,414)   1
    (945,671)   1
    (968,400)   1
 work:23 gpus:0 Getting test data
Creating problem gen
filling matrices
inside fill, using seed 4567
fill_random nrows=1024ncols=1024 need 1024 values, invsparse = 1024
fill_random after alloc values
vdim ready 
vlen ready 
ready to fill p
filling sparse
1024 nonzeroes left to fill..
35 nonzeroes left to fill..
inside fill, using seed 4567
fill_random nrows=1024ncols=1024 need 1024 values, invsparse = 1024
fill_random after alloc values
vdim ready 
vlen ready 
ready to fill p
filling sparse
1024 nonzeroes left to fill..
35 nonzeroes left to fill..
inside fill, using seed 543210
fill_random nrows=1024ncols=1024 need 2048 values, invsparse = 512
fill_random after alloc values
vdim ready 
vlen ready 
ready to fill p
filling sparse
2048 nonzeroes left to fill..
504 nonzeroes left to fill..
 rmm_wrap_alloc 256 bytes
 rmm_wrap_alloc 16384 bytes
inside fill, using seed 32
fill_random nrows=1024ncols=1024 need 4096 values, invsparse = 256
fill_random after alloc values
vdim ready 
vlen ready 
ready to fill p
filling sparse
4096 nonzeroes left to fill..
1491 nonzeroes left to fill..
 rmm_wrap_alloc 16384 bytes
1024 slots to fill
all pairs to bucket 7, no filling
done assigning buckets
Building semiring factgory
 calling stringify semiring: 0x7f1ff542a200
inside enumify: 0x7f1ff542a200

    GraphBLAS Semiring: semiring (user-defined)
    GraphBLAS Monoid: semiring->add (built-in)
    GraphBLAS BinaryOp: monoid->op (built-in) z=plus(x,y)
    GraphBLAS type: ztype int32_t size: 4
    GraphBLAS type: xtype int32_t size: 4
    GraphBLAS type: ytype int32_t size: 4
    identity: [   0 ] 

    GraphBLAS BinaryOp: semiring->multiply (built-in) z=times(x,y)
    GraphBLAS type: ztype int32_t size: 4
    GraphBLAS type: xtype int32_t size: 4
    GraphBLAS type: ytype int32_t size: 4
Getting semiring add
Getting semiring mult
Getting semiring add op
Getting types
Getting opcodes
Getting typecodes
Performing asserts
Invoking boolean rename
Invoking boolean rename
Invoking enumify binop
e 14
Invoking enumify monoid
Calling enumify binop
Inside plus binop code
e 11
Calling enumify identity
Calling enumify terminal
Done enumify monoid
Done invoking enumify monoid
atype
btype
ctype
Invoking enumify_mask, mtype 0x7f2028b56f40
GB_enumify_mask gets mcode: 6 Mask_struct: 0 Mask_comp: 0
got mask_ecode: 8
constructing semiring scode
before: add_ecode: 11, id_ecode: 0, term_ecode: 31, mult_ecode: 14, flipxy: 0, zcode: 6, xcode: 6, ycode: 6, mask_ecode: 8, ccode: 6, acode: 6, bcode: 6, csparsity: 0, msparsity: 0, asparsity: 0, bsparsity: 0
serialized_scode: 397409434378593792
done enumify semiring
scode=397409434378593792
done stringify semiring
 returned from  stringify semiring
 rmm_wrap_alloc 256 bytes
 rmm_wrap_alloc 8192 bytes
1024 slots to fill
all pairs to bucket 7, no filling
done assigning buckets
bucket 7 has 1024 dots to do
LAUNCHING BUCKET CODE: 7
INside get cached file
looking for prog in file /home/cjnolet/.SuiteSparse/GraphBLAS/6.3.0/GB_semiring_397409434378593792.h
opening /home/cjnolet/.SuiteSparse/GraphBLAS/6.3.0/GB_semiring_397409434378593792.h for write
about to close
 read cache file /home/cjnolet/.SuiteSparse/GraphBLAS/6.3.0/GB_semiring_397409434378593792.h
successful_read: 1
Just closed
 jit_cache get program GB_jit_AxB_dot3_phase3_vsvs
found memory-cached prog GB_jit_AxB_dot3_phase3_vsvs
 got kernel instance AxB_dot3_phase3_vsvs_int32_t_int32_t_int32_t
found memory-cached prog AxB_dot3_phase3_vsvs_int32_t_int32_t_int32_t
Launching _Z20AxB_dot3_phase3_vsvsIiiiEvxxPxP16GB_Matrix_opaqueS2_S2_S2_i<<<2,512,0,0>>>(long,long,long*,GB_Matrix_opaque*,GB_Matrix_opaque*,GB_Matrix_opaque*,GB_Matrix_opaque*,int)
Printing bucketp
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
Done.
returned from kernel 0.776192ms

  1024x1024 GraphBLAS int32_t matrix, sparse (jumbled) by row
  sparsity control: sparse only
  C GPU, 1024 entries, memory: 28.2 KB
  pending tuples: 0 max pending: 0 zombies: 1010

    (0,478) zombie
    (0,574) zombie
    (2,376) zombie
    (5,560) zombie
    (6,996) zombie
    (7,183) zombie
    (7,666) zombie
    (8,896) zombie
    (9,187) zombie
    (10,446) zombie
    (11,46) zombie
    (11,955) zombie
    (12,397) zombie
    (12,953) zombie
    (13,192) zombie
    (14,421) zombie
    (15,568) zombie
    (16,788) zombie
    (16,904) zombie
    (17,928) zombie
    (18,103) zombie
    (19,821) zombie
    (19,886) zombie
    (20,474) zombie
    (21,479) zombie
    (21,975) zombie
    (22,569) zombie
    (23,310) zombie
    (24,905) zombie
    ...
Not using cuda path. M_is_hypersparse: 0, A->iso: 0, B->iso: 0, A_BITMAP: 0, B_BITMAP: 0, GB_IS_FULL(A): 0, GB_IS_FULL(B): 0, semiring header size: 32
 rmm_wrap_alloc 16384 bytes
 rmm_wrap_alloc 16384 bytes

  1024x1024 GraphBLAS int32_t matrix, sparse by row
  sparsity control: sparse only
  M actual, 1024 entries, memory: 28.2 KB

    (0,478)   0
    (0,574)   0
    (2,376)   1
    (5,560)   0
    (6,996)   0
    (7,183)   1
    (7,666)   1
    (8,896)   0
    (9,187)   0
    (10,446)   1
    (11,46)   1
    (11,955)   1
    (12,397)   0
    (12,953)   1
    (13,192)   1
    (14,421)   0
    (15,568)   1
    (16,788)   1
    (16,904)   1
    (17,928)   0
    (18,103)   1
    (19,821)   0
    (19,886)   0
    (20,474)   0
    (21,479)   1
    (21,975)   0
    (22,569)   1
    (23,310)   0
    (24,905)   1
    ...
 rmm_wrap_alloc 16384 bytes
 rmm_wrap_alloc 256 bytes

  1024x1024 GraphBLAS int32_t matrix, sparse by row
  sparsity control: sparse only
  C GPU, 14 entries, memory: 16.4 KB

    (99,326)   0
    (115,240)   0
    (176,614)   0
    (180,830)   1
    (343,678)   0
    (398,246)   0
    (411,643)   0
    (557,910)   0
    (590,95)   0
    (601,478)   0
    (623,44)   0
    (729,884)   0
    (825,406)   1
    (891,679)   0


  1024x1024 GraphBLAS int32_t matrix, hypersparse by row
  C_actual, 14 entries, memory: 704 bytes

    (99,326)   0
    (115,240)   0
    (176,614)   0
    (180,830)   1
    (343,678)   0
    (398,246)   0
    (411,643)   0
    (557,910)   0
    (590,95)   0
    (601,478)   0
    (623,44)   0
    (729,884)   0
    (825,406)   1
    (891,679)   0

 rmm_wrap_alloc 256 bytes
 rmm_wrap_alloc 256 bytes
 rmm_wrap_alloc 256 bytes
 rmm_wrap_alloc 256 bytes
 rmm_wrap_alloc 256 bytes
 rmm_wrap_alloc 256 bytes

  1024x1024 GraphBLAS double matrix, hypersparse by row
  Diff actual, 14 entries, memory: 768 bytes

    (99,326)    0
    (115,240)    0
    (176,614)    0
    (180,830)    0
    (343,678)    0
    (398,246)    0
    (411,643)    0
    (557,910)    0
    (590,95)    0
    (601,478)    0
    (623,44)    0
    (729,884)    0
    (825,406)    0
    (891,679)    0


  1024x1024 GraphBLAS bool matrix, hypersparse by row
  T actual, 14 entries, memory: 656 bytes

    (99,326)   1
    (115,240)   1
    (176,614)   1
    (180,830)   1
    (343,678)   1
    (398,246)   1
    (411,643)   1
    (557,910)   1
    (590,95)   1
    (601,478)   1
    (623,44)   1
    (729,884)   1
    (825,406)   1
    (891,679)   1
 work:14 gpus:0 Getting test data
Creating problem gen
filling matrices
inside fill, using seed 4567
fill_random nrows=1024ncols=1024 need 1024 values, invsparse = 1024
fill_random after alloc values
vdim ready 
vlen ready 
ready to fill p
filling sparse
1024 nonzeroes left to fill..
35 nonzeroes left to fill..
inside fill, using seed 4567
fill_random nrows=1024ncols=1024 need 1024 values, invsparse = 1024
fill_random after alloc values
vdim ready 
vlen ready 
ready to fill p
filling sparse
1024 nonzeroes left to fill..
35 nonzeroes left to fill..
inside fill, using seed 543210
fill_random nrows=1024ncols=1024 need 2048 values, invsparse = 512
fill_random after alloc values
vdim ready 
vlen ready 
ready to fill p
filling sparse
2048 nonzeroes left to fill..
504 nonzeroes left to fill..
 rmm_wrap_alloc 256 bytes
inside fill, using seed 32
fill_random nrows=1024ncols=1024 need 4096 values, invsparse = 256
fill_random after alloc values
vdim ready 
vlen ready 
ready to fill p
filling sparse
4096 nonzeroes left to fill..
1491 nonzeroes left to fill..
 rmm_wrap_alloc 16384 bytes
1024 slots to fill
all pairs to bucket 8, no filling
done assigning buckets
Building semiring factgory
 calling stringify semiring: 0x7f1ff5447700
inside enumify: 0x7f1ff5447700

    GraphBLAS Semiring: semiring (user-defined)
    GraphBLAS Monoid: semiring->add (built-in)
    GraphBLAS BinaryOp: monoid->op (built-in) z=plus(x,y)
    GraphBLAS type: ztype int32_t size: 4
    GraphBLAS type: xtype int32_t size: 4
    GraphBLAS type: ytype int32_t size: 4
    identity: [   0 ] 

    GraphBLAS BinaryOp: semiring->multiply (built-in) z=times(x,y)
    GraphBLAS type: ztype int32_t size: 4
    GraphBLAS type: xtype int32_t size: 4
    GraphBLAS type: ytype int32_t size: 4
Getting semiring add
Getting semiring mult
Getting semiring add op
Getting types
Getting opcodes
Getting typecodes
Performing asserts
Invoking boolean rename
Invoking boolean rename
Invoking enumify binop
e 14
Invoking enumify monoid
Calling enumify binop
Inside plus binop code
e 11
Calling enumify identity
Calling enumify terminal
Done enumify monoid
Done invoking enumify monoid
atype
btype
ctype
Invoking enumify_mask, mtype 0x7f2028b56f40
GB_enumify_mask gets mcode: 6 Mask_struct: 0 Mask_comp: 0
got mask_ecode: 8
constructing semiring scode
before: add_ecode: 11, id_ecode: 0, term_ecode: 31, mult_ecode: 14, flipxy: 0, zcode: 6, xcode: 6, ycode: 6, mask_ecode: 8, ccode: 6, acode: 6, bcode: 6, csparsity: 0, msparsity: 0, asparsity: 0, bsparsity: 0
serialized_scode: 397409434378593792
done enumify semiring
scode=397409434378593792
done stringify semiring
 returned from  stringify semiring
 rmm_wrap_alloc 256 bytes
 rmm_wrap_alloc 8192 bytes
1024 slots to fill
all pairs to bucket 8, no filling
done assigning buckets
bucket 8 has 1024 dots to do
LAUNCHING BUCKET CODE: 8
INside get cached file
looking for prog in file /home/cjnolet/.SuiteSparse/GraphBLAS/6.3.0/GB_semiring_397409434378593792.h
opening /home/cjnolet/.SuiteSparse/GraphBLAS/6.3.0/GB_semiring_397409434378593792.h for write
about to close
 read cache file /home/cjnolet/.SuiteSparse/GraphBLAS/6.3.0/GB_semiring_397409434378593792.h
successful_read: 1
Just closed
 jit_cache get program GB_jit_AxB_dot3_phase3_vsvs
found memory-cached prog GB_jit_AxB_dot3_phase3_vsvs
 got kernel instance AxB_dot3_phase3_vsvs_int32_t_int32_t_int32_t
found memory-cached prog AxB_dot3_phase3_vsvs_int32_t_int32_t_int32_t
Launching _Z20AxB_dot3_phase3_vsvsIiiiEvxxPxP16GB_Matrix_opaqueS2_S2_S2_i<<<2,512,0,0>>>(long,long,long*,GB_Matrix_opaque*,GB_Matrix_opaque*,GB_Matrix_opaque*,GB_Matrix_opaque*,int)
Printing bucketp
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
Done.
returned from kernel 0.867296ms

  1024x1024 GraphBLAS int32_t matrix, sparse (jumbled) by row
  sparsity control: sparse only
  C GPU, 1024 entries, memory: 28.2 KB
  pending tuples: 0 max pending: 0 zombies: 1010

    (0,478) zombie
    (0,574) zombie
    (2,376) zombie
    (5,560) zombie
    (6,996) zombie
    (7,183) zombie
    (7,666) zombie
    (8,896) zombie
    (9,187) zombie
    (10,446) zombie
    (11,46) zombie
    (11,955) zombie
    (12,397) zombie
    (12,953) zombie
    (13,192) zombie
    (14,421) zombie
    (15,568) zombie
    (16,788) zombie
    (16,904) zombie
    (17,928) zombie
    (18,103) zombie
    (19,821) zombie
    (19,886) zombie
    (20,474) zombie
    (21,479) zombie
    (21,975) zombie
    (22,569) zombie
    (23,310) zombie
    (24,905) zombie
    ...
 rmm_wrap_alloc 256 bytes
Not using cuda path. M_is_hypersparse: 0, A->iso: 0, B->iso: 0, A_BITMAP: 0, B_BITMAP: 0, GB_IS_FULL(A): 0, GB_IS_FULL(B): 0, semiring header size: 32
 rmm_wrap_alloc 16384 bytes
 rmm_wrap_alloc 16384 bytes

  1024x1024 GraphBLAS int32_t matrix, sparse by row
  sparsity control: sparse only
  M actual, 1024 entries, memory: 28.2 KB

    (0,478)   0
    (0,574)   0
    (2,376)   1
    (5,560)   0
    (6,996)   0
    (7,183)   1
    (7,666)   1
    (8,896)   0
    (9,187)   0
    (10,446)   1
    (11,46)   1
    (11,955)   1
    (12,397)   0
    (12,953)   1
    (13,192)   1
    (14,421)   0
    (15,568)   1
    (16,788)   1
    (16,904)   1
    (17,928)   0
    (18,103)   1
    (19,821)   0
    (19,886)   0
    (20,474)   0
    (21,479)   1
    (21,975)   0
    (22,569)   1
    (23,310)   0
    (24,905)   1
    ...
 rmm_wrap_alloc 16384 bytes

  1024x1024 GraphBLAS int32_t matrix, sparse by row
  sparsity control: sparse only
  C GPU, 14 entries, memory: 16.4 KB

    (99,326)   0
    (115,240)   0
    (176,614)   0
    (180,830)   1
    (343,678)   0
    (398,246)   0
    (411,643)   0
    (557,910)   0
    (590,95)   0
    (601,478)   0
    (623,44)   0
    (729,884)   0
    (825,406)   1
    (891,679)   0


  1024x1024 GraphBLAS int32_t matrix, hypersparse by row
  C_actual, 14 entries, memory: 704 bytes

    (99,326)   0
    (115,240)   0
    (176,614)   0
    (180,830)   1
    (343,678)   0
    (398,246)   0
    (411,643)   0
    (557,910)   0
    (590,95)   0
    (601,478)   0
    (623,44)   0
    (729,884)   0
    (825,406)   1
    (891,679)   0

 rmm_wrap_alloc 256 bytes
 rmm_wrap_alloc 256 bytes
 rmm_wrap_alloc 256 bytes
 rmm_wrap_alloc 256 bytes
 rmm_wrap_alloc 256 bytes

  1024x1024 GraphBLAS double matrix, hypersparse by row
  Diff actual, 14 entries, memory: 768 bytes

    (99,326)    0
    (115,240)    0
    (176,614)    0
    (180,830)    0
    (343,678)    0
    (398,246)    0
    (411,643)    0
    (557,910)    0
    (590,95)    0
    (601,478)    0
    (623,44)    0
    (729,884)    0
    (825,406)    0
    (891,679)    0


  1024x1024 GraphBLAS bool matrix, hypersparse by row
  T actual, 14 entries, memory: 656 bytes

    (99,326)   1
    (115,240)   1
    (176,614)   1
    (180,830)   1
    (343,678)   1
    (398,246)   1
    (411,643)   1
    (557,910)   1
    (590,95)   1
    (601,478)   1
    (623,44)   1
    (729,884)   1
    (825,406)   1
    (891,679)   1
 work:14 gpus:0 Getting test data
Creating problem gen
filling matrices
inside fill, using seed 4567
fill_random nrows=1024ncols=1024 need 1024 values, invsparse = 1024
fill_random after alloc values
vdim ready 
vlen ready 
ready to fill p
filling sparse
1024 nonzeroes left to fill..
35 nonzeroes left to fill..
inside fill, using seed 4567
fill_random nrows=1024ncols=1024 need 1024 values, invsparse = 1024
fill_random after alloc values
vdim ready 
vlen ready 
ready to fill p
filling sparse
1024 nonzeroes left to fill..
35 nonzeroes left to fill..
inside fill, using seed 543210
fill_random nrows=1024ncols=1024 need 2048 values, invsparse = 512
fill_random after alloc values
vdim ready 
vlen ready 
ready to fill p
filling sparse
2048 nonzeroes left to fill..
504 nonzeroes left to fill..
 rmm_wrap_alloc 256 bytes
 rmm_wrap_alloc 256 bytes
inside fill, using seed 32
fill_random nrows=1024ncols=1024 need 4096 values, invsparse = 256
fill_random after alloc values
vdim ready 
vlen ready 
ready to fill p
filling sparse
4096 nonzeroes left to fill..
1491 nonzeroes left to fill..
 rmm_wrap_alloc 16384 bytes
 rmm_wrap_alloc 256 bytes
1024 slots to fill
all pairs to bucket 9, no filling
done assigning buckets
Building semiring factgory
 calling stringify semiring: 0x7f1ff5447800
inside enumify: 0x7f1ff5447800

    GraphBLAS Semiring: semiring (user-defined)
    GraphBLAS Monoid: semiring->add (built-in)
    GraphBLAS BinaryOp: monoid->op (built-in) z=plus(x,y)
    GraphBLAS type: ztype int32_t size: 4
    GraphBLAS type: xtype int32_t size: 4
    GraphBLAS type: ytype int32_t size: 4
    identity: [   0 ] 

    GraphBLAS BinaryOp: semiring->multiply (built-in) z=times(x,y)
    GraphBLAS type: ztype int32_t size: 4
    GraphBLAS type: xtype int32_t size: 4
    GraphBLAS type: ytype int32_t size: 4
Getting semiring add
Getting semiring mult
Getting semiring add op
Getting types
Getting opcodes
Getting typecodes
Performing asserts
Invoking boolean rename
Invoking boolean rename
Invoking enumify binop
e 14
Invoking enumify monoid
Calling enumify binop
Inside plus binop code
e 11
Calling enumify identity
Calling enumify terminal
Done enumify monoid
Done invoking enumify monoid
atype
btype
ctype
Invoking enumify_mask, mtype 0x7f2028b56f40
GB_enumify_mask gets mcode: 6 Mask_struct: 0 Mask_comp: 0
got mask_ecode: 8
constructing semiring scode
before: add_ecode: 11, id_ecode: 0, term_ecode: 31, mult_ecode: 14, flipxy: 0, zcode: 6, xcode: 6, ycode: 6, mask_ecode: 8, ccode: 6, acode: 6, bcode: 6, csparsity: 0, msparsity: 0, asparsity: 0, bsparsity: 0
serialized_scode: 397409434378593792
done enumify semiring
scode=397409434378593792
done stringify semiring
 returned from  stringify semiring
 rmm_wrap_alloc 256 bytes
 rmm_wrap_alloc 8192 bytes
1024 slots to fill
all pairs to bucket 9, no filling
done assigning buckets
bucket 9 has 1024 dots to do
LAUNCHING BUCKET CODE: 9
INside get cached file
looking for prog in file /home/cjnolet/.SuiteSparse/GraphBLAS/6.3.0/GB_semiring_397409434378593792.h
opening /home/cjnolet/.SuiteSparse/GraphBLAS/6.3.0/GB_semiring_397409434378593792.h for write
about to close
 read cache file /home/cjnolet/.SuiteSparse/GraphBLAS/6.3.0/GB_semiring_397409434378593792.h
successful_read: 1
Just closed
 jit_cache get program GB_jit_AxB_dot3_phase3_vsvs
found memory-cached prog GB_jit_AxB_dot3_phase3_vsvs
 got kernel instance AxB_dot3_phase3_vsvs_int32_t_int32_t_int32_t
found memory-cached prog AxB_dot3_phase3_vsvs_int32_t_int32_t_int32_t
Launching _Z20AxB_dot3_phase3_vsvsIiiiEvxxPxP16GB_Matrix_opaqueS2_S2_S2_i<<<2,512,0,0>>>(long,long,long*,GB_Matrix_opaque*,GB_Matrix_opaque*,GB_Matrix_opaque*,GB_Matrix_opaque*,int)
Printing bucketp
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
Done.
returned from kernel 0.913408ms

  1024x1024 GraphBLAS int32_t matrix, sparse (jumbled) by row
  sparsity control: sparse only
  C GPU, 1024 entries, memory: 28.2 KB
  pending tuples: 0 max pending: 0 zombies: 1010

    (0,478) zombie
    (0,574) zombie
    (2,376) zombie
    (5,560) zombie
    (6,996) zombie
    (7,183) zombie
    (7,666) zombie
    (8,896) zombie
    (9,187) zombie
    (10,446) zombie
    (11,46) zombie
    (11,955) zombie
    (12,397) zombie
    (12,953) zombie
    (13,192) zombie
    (14,421) zombie
    (15,568) zombie
    (16,788) zombie
    (16,904) zombie
    (17,928) zombie
    (18,103) zombie
    (19,821) zombie
    (19,886) zombie
    (20,474) zombie
    (21,479) zombie
    (21,975) zombie
    (22,569) zombie
    (23,310) zombie
    (24,905) zombie
    ...
 rmm_wrap_alloc 256 bytes
Not using cuda path. M_is_hypersparse: 0, A->iso: 0, B->iso: 0, A_BITMAP: 0, B_BITMAP: 0, GB_IS_FULL(A): 0, GB_IS_FULL(B): 0, semiring header size: 32
 rmm_wrap_alloc 16384 bytes
 rmm_wrap_alloc 16384 bytes

  1024x1024 GraphBLAS int32_t matrix, sparse by row
  sparsity control: sparse only
  M actual, 1024 entries, memory: 28.2 KB

    (0,478)   0
    (0,574)   0
    (2,376)   1
    (5,560)   0
    (6,996)   0
    (7,183)   1
    (7,666)   1
    (8,896)   0
    (9,187)   0
    (10,446)   1
    (11,46)   1
    (11,955)   1
    (12,397)   0
    (12,953)   1
    (13,192)   1
    (14,421)   0
    (15,568)   1
    (16,788)   1
    (16,904)   1
    (17,928)   0
    (18,103)   1
    (19,821)   0
    (19,886)   0
    (20,474)   0
    (21,479)   1
    (21,975)   0
    (22,569)   1
    (23,310)   0
    (24,905)   1
    ...
 rmm_wrap_alloc 16384 bytes

  1024x1024 GraphBLAS int32_t matrix, sparse by row
  sparsity control: sparse only
  C GPU, 14 entries, memory: 16.4 KB

    (99,326)   0
    (115,240)   0
    (176,614)   0
    (180,830)   1
    (343,678)   0
    (398,246)   0
    (411,643)   0
    (557,910)   0
    (590,95)   0
    (601,478)   0
    (623,44)   0
    (729,884)   0
    (825,406)   1
    (891,679)   0


  1024x1024 GraphBLAS int32_t matrix, hypersparse by row
  C_actual, 14 entries, memory: 704 bytes

    (99,326)   0
    (115,240)   0
    (176,614)   0
    (180,830)   1
    (343,678)   0
    (398,246)   0
    (411,643)   0
    (557,910)   0
    (590,95)   0
    (601,478)   0
    (623,44)   0
    (729,884)   0
    (825,406)   1
    (891,679)   0

 rmm_wrap_alloc 256 bytes
 rmm_wrap_alloc 256 bytes
 rmm_wrap_alloc 256 bytes
 rmm_wrap_alloc 256 bytes
 rmm_wrap_alloc 256 bytes

  1024x1024 GraphBLAS double matrix, hypersparse by row
  Diff actual, 14 entries, memory: 768 bytes

    (99,326)    0
    (115,240)    0
    (176,614)    0
    (180,830)    0
    (343,678)    0
    (398,246)    0
    (411,643)    0
    (557,910)    0
    (590,95)    0
    (601,478)    0
    (623,44)    0
    (729,884)    0
    (825,406)    0
    (891,679)    0


  1024x1024 GraphBLAS bool matrix, hypersparse by row
  T actual, 14 entries, memory: 656 bytes

    (99,326)   1
    (115,240)   1
    (176,614)   1
    (180,830)   1
    (343,678)   1
    (398,246)   1
    (411,643)   1
    (557,910)   1
    (590,95)   1
    (601,478)   1
    (623,44)   1
    (729,884)   1
    (825,406)   1
    (891,679)   1
 work:14 gpus:0 Getting test data
Creating problem gen
filling matrices
inside fill, using seed 4567
fill_random nrows=1024ncols=1024 need 1024 values, invsparse = 1024
fill_random after alloc values
vdim ready 
vlen ready 
ready to fill p
filling sparse
1024 nonzeroes left to fill..
35 nonzeroes left to fill..
inside fill, using seed 4567
fill_random nrows=1024ncols=1024 need 1024 values, invsparse = 1024
fill_random after alloc values
vdim ready 
vlen ready 
ready to fill p
filling sparse
1024 nonzeroes left to fill..
35 nonzeroes left to fill..
inside fill, using seed 543210
fill_random nrows=1024ncols=1024 need 2048 values, invsparse = 512
fill_random after alloc values
vdim ready 
vlen ready 
ready to fill p
filling sparse
2048 nonzeroes left to fill..
504 nonzeroes left to fill..
 rmm_wrap_alloc 256 bytes
 rmm_wrap_alloc 256 bytes
inside fill, using seed 32
fill_random nrows=1024ncols=1024 need 4096 values, invsparse = 256
fill_random after alloc values
vdim ready 
vlen ready 
ready to fill p
filling sparse
4096 nonzeroes left to fill..
1491 nonzeroes left to fill..
 rmm_wrap_alloc 16384 bytes
 rmm_wrap_alloc 256 bytes
1024 slots to fill
all pairs to bucket 10, no filling
done assigning buckets
Building semiring factgory
 calling stringify semiring: 0x7f1ff542a400
inside enumify: 0x7f1ff542a400

    GraphBLAS Semiring: semiring (user-defined)
    GraphBLAS Monoid: semiring->add (built-in)
    GraphBLAS BinaryOp: monoid->op (built-in) z=plus(x,y)
    GraphBLAS type: ztype int32_t size: 4
    GraphBLAS type: xtype int32_t size: 4
    GraphBLAS type: ytype int32_t size: 4
    identity: [   0 ] 

    GraphBLAS BinaryOp: semiring->multiply (built-in) z=times(x,y)
    GraphBLAS type: ztype int32_t size: 4
    GraphBLAS type: xtype int32_t size: 4
    GraphBLAS type: ytype int32_t size: 4
Getting semiring add
Getting semiring mult
Getting semiring add op
Getting types
Getting opcodes
Getting typecodes
Performing asserts
Invoking boolean rename
Invoking boolean rename
Invoking enumify binop
e 14
Invoking enumify monoid
Calling enumify binop
Inside plus binop code
e 11
Calling enumify identity
Calling enumify terminal
Done enumify monoid
Done invoking enumify monoid
atype
btype
ctype
Invoking enumify_mask, mtype 0x7f2028b56f40
GB_enumify_mask gets mcode: 6 Mask_struct: 0 Mask_comp: 0
got mask_ecode: 8
constructing semiring scode
before: add_ecode: 11, id_ecode: 0, term_ecode: 31, mult_ecode: 14, flipxy: 0, zcode: 6, xcode: 6, ycode: 6, mask_ecode: 8, ccode: 6, acode: 6, bcode: 6, csparsity: 0, msparsity: 0, asparsity: 0, bsparsity: 0
serialized_scode: 397409434378593792
done enumify semiring
scode=397409434378593792
done stringify semiring
 returned from  stringify semiring
 rmm_wrap_alloc 256 bytes
 rmm_wrap_alloc 8192 bytes
1024 slots to fill
all pairs to bucket 10, no filling
done assigning buckets
bucket 10 has 1024 dots to do
LAUNCHING BUCKET CODE: 10
INside get cached file
looking for prog in file /home/cjnolet/.SuiteSparse/GraphBLAS/6.3.0/GB_semiring_397409434378593792.h
opening /home/cjnolet/.SuiteSparse/GraphBLAS/6.3.0/GB_semiring_397409434378593792.h for write
about to close
 read cache file /home/cjnolet/.SuiteSparse/GraphBLAS/6.3.0/GB_semiring_397409434378593792.h
successful_read: 1
Just closed
 jit_cache get program GB_jit_AxB_dot3_phase3_vsvs
found memory-cached prog GB_jit_AxB_dot3_phase3_vsvs
 got kernel instance AxB_dot3_phase3_vsvs_int32_t_int32_t_int32_t
found memory-cached prog AxB_dot3_phase3_vsvs_int32_t_int32_t_int32_t
Launching _Z20AxB_dot3_phase3_vsvsIiiiEvxxPxP16GB_Matrix_opaqueS2_S2_S2_i<<<2,512,0,0>>>(long,long,long*,GB_Matrix_opaque*,GB_Matrix_opaque*,GB_Matrix_opaque*,GB_Matrix_opaque*,int)
Printing bucketp
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
Done.
returned from kernel 0.871424ms

  1024x1024 GraphBLAS int32_t matrix, sparse (jumbled) by row
  sparsity control: sparse only
  C GPU, 1024 entries, memory: 28.2 KB
  pending tuples: 0 max pending: 0 zombies: 1010

    (0,478) zombie
    (0,574) zombie
    (2,376) zombie
    (5,560) zombie
    (6,996) zombie
    (7,183) zombie
    (7,666) zombie
    (8,896) zombie
    (9,187) zombie
    (10,446) zombie
    (11,46) zombie
    (11,955) zombie
    (12,397) zombie
    (12,953) zombie
    (13,192) zombie
    (14,421) zombie
    (15,568) zombie
    (16,788) zombie
    (16,904) zombie
    (17,928) zombie
    (18,103) zombie
    (19,821) zombie
    (19,886) zombie
    (20,474) zombie
    (21,479) zombie
    (21,975) zombie
    (22,569) zombie
    (23,310) zombie
    (24,905) zombie
    ...
 rmm_wrap_alloc 256 bytes
Not using cuda path. M_is_hypersparse: 0, A->iso: 0, B->iso: 0, A_BITMAP: 0, B_BITMAP: 0, GB_IS_FULL(A): 0, GB_IS_FULL(B): 0, semiring header size: 32
 rmm_wrap_alloc 16384 bytes
 rmm_wrap_alloc 16384 bytes

  1024x1024 GraphBLAS int32_t matrix, sparse by row
  sparsity control: sparse only
  M actual, 1024 entries, memory: 28.2 KB

    (0,478)   0
    (0,574)   0
    (2,376)   1
    (5,560)   0
    (6,996)   0
    (7,183)   1
    (7,666)   1
    (8,896)   0
    (9,187)   0
    (10,446)   1
    (11,46)   1
    (11,955)   1
    (12,397)   0
    (12,953)   1
    (13,192)   1
    (14,421)   0
    (15,568)   1
    (16,788)   1
    (16,904)   1
    (17,928)   0
    (18,103)   1
    (19,821)   0
    (19,886)   0
    (20,474)   0
    (21,479)   1
    (21,975)   0
    (22,569)   1
    (23,310)   0
    (24,905)   1
    ...
 rmm_wrap_alloc 16384 bytes

  1024x1024 GraphBLAS int32_t matrix, sparse by row
  sparsity control: sparse only
  C GPU, 14 entries, memory: 16.4 KB

    (99,326)   0
    (115,240)   0
    (176,614)   0
    (180,830)   1
    (343,678)   0
    (398,246)   0
    (411,643)   0
    (557,910)   0
    (590,95)   0
    (601,478)   0
    (623,44)   0
    (729,884)   0
    (825,406)   1
    (891,679)   0


  1024x1024 GraphBLAS int32_t matrix, hypersparse by row
  C_actual, 14 entries, memory: 704 bytes

    (99,326)   0
    (115,240)   0
    (176,614)   0
    (180,830)   1
    (343,678)   0
    (398,246)   0
    (411,643)   0
    (557,910)   0
    (590,95)   0
    (601,478)   0
    (623,44)   0
    (729,884)   0
    (825,406)   1
    (891,679)   0

 rmm_wrap_alloc 256 bytes
 rmm_wrap_alloc 256 bytes
 rmm_wrap_alloc 256 bytes
 rmm_wrap_alloc 256 bytes
 rmm_wrap_alloc 256 bytes

  1024x1024 GraphBLAS double matrix, hypersparse by row
  Diff actual, 14 entries, memory: 768 bytes

    (99,326)    0
    (115,240)    0
    (176,614)    0
    (180,830)    0
    (343,678)    0
    (398,246)    0
    (411,643)    0
    (557,910)    0
    (590,95)    0
    (601,478)    0
    (623,44)    0
    (729,884)    0
    (825,406)    0
    (891,679)    0


  1024x1024 GraphBLAS bool matrix, hypersparse by row
  T actual, 14 entries, memory: 656 bytes

    (99,326)   1
    (115,240)   1
    (176,614)   1
    (180,830)   1
    (343,678)   1
    (398,246)   1
    (411,643)   1
    (557,910)   1
    (590,95)   1
    (601,478)   1
    (623,44)   1
    (729,884)   1
    (825,406)   1
    (891,679)   1
 work:14 gpus:0 Getting test data
Creating problem gen
filling matrices
inside fill, using seed 4567
fill_random nrows=1024ncols=1024 need 1024 values, invsparse = 1024
fill_random after alloc values
vdim ready 
vlen ready 
ready to fill p
filling sparse
1024 nonzeroes left to fill..
35 nonzeroes left to fill..
inside fill, using seed 4567
fill_random nrows=1024ncols=1024 need 1024 values, invsparse = 1024
fill_random after alloc values
vdim ready 
vlen ready 
ready to fill p
filling sparse
1024 nonzeroes left to fill..
35 nonzeroes left to fill..
inside fill, using seed 543210
fill_random nrows=1024ncols=1024 need 5120 values, invsparse = 205
fill_random after alloc values
vdim ready 
vlen ready 
ready to fill p
filling sparse
5120 nonzeroes left to fill..
2091 nonzeroes left to fill..
 rmm_wrap_alloc 256 bytes
 rmm_wrap_alloc 256 bytes
 rmm_wrap_alloc 256 bytes
inside fill, using seed 32
fill_random nrows=1024ncols=1024 need 2048 values, invsparse = 512
fill_random after alloc values
vdim ready 
vlen ready 
ready to fill p
filling sparse
2048 nonzeroes left to fill..
569 nonzeroes left to fill..
 rmm_wrap_alloc 16384 bytes
 rmm_wrap_alloc 256 bytes
1024 slots to fill
all pairs to bucket 11, no filling
done assigning buckets
Building semiring factgory
 calling stringify semiring: 0x7f1ff542b400
inside enumify: 0x7f1ff542b400

    GraphBLAS Semiring: semiring (user-defined)
    GraphBLAS Monoid: semiring->add (built-in)
    GraphBLAS BinaryOp: monoid->op (built-in) z=plus(x,y)
    GraphBLAS type: ztype int32_t size: 4
    GraphBLAS type: xtype int32_t size: 4
    GraphBLAS type: ytype int32_t size: 4
    identity: [   0 ] 

    GraphBLAS BinaryOp: semiring->multiply (built-in) z=times(x,y)
    GraphBLAS type: ztype int32_t size: 4
    GraphBLAS type: xtype int32_t size: 4
    GraphBLAS type: ytype int32_t size: 4
Getting semiring add
Getting semiring mult
Getting semiring add op
Getting types
Getting opcodes
Getting typecodes
Performing asserts
Invoking boolean rename
Invoking boolean rename
Invoking enumify binop
e 14
Invoking enumify monoid
Calling enumify binop
Inside plus binop code
e 11
Calling enumify identity
Calling enumify terminal
Done enumify monoid
Done invoking enumify monoid
atype
btype
ctype
Invoking enumify_mask, mtype 0x7f2028b56f40
GB_enumify_mask gets mcode: 6 Mask_struct: 0 Mask_comp: 0
got mask_ecode: 8
constructing semiring scode
before: add_ecode: 11, id_ecode: 0, term_ecode: 31, mult_ecode: 14, flipxy: 0, zcode: 6, xcode: 6, ycode: 6, mask_ecode: 8, ccode: 6, acode: 6, bcode: 6, csparsity: 0, msparsity: 0, asparsity: 0, bsparsity: 0
serialized_scode: 397409434378593792
done enumify semiring
scode=397409434378593792
done stringify semiring
 returned from  stringify semiring
 rmm_wrap_alloc 256 bytes
 rmm_wrap_alloc 8192 bytes
1024 slots to fill
all pairs to bucket 11, no filling
done assigning buckets
bucket 11 has 1024 dots to do
LAUNCHING BUCKET CODE: 11
INside get cached file
looking for prog in file /home/cjnolet/.SuiteSparse/GraphBLAS/6.3.0/GB_semiring_397409434378593792.h
opening /home/cjnolet/.SuiteSparse/GraphBLAS/6.3.0/GB_semiring_397409434378593792.h for write
about to close
 read cache file /home/cjnolet/.SuiteSparse/GraphBLAS/6.3.0/GB_semiring_397409434378593792.h
successful_read: 1
Just closed
 jit_cache get program GB_jit_AxB_dot3_phase3_mp
found memory-cached prog GB_jit_AxB_dot3_phase3_mp
 got kernel instance AxB_dot3_phase3_mp_int32_t_int32_t_int32_t
found memory-cached prog AxB_dot3_phase3_mp_int32_t_int32_t_int32_t
Launching _Z18AxB_dot3_phase3_mpIiiiEvxxPxP16GB_Matrix_opaqueS2_S2_S2_i<<<32,32,0,0>>>(long,long,long*,GB_Matrix_opaque*,GB_Matrix_opaque*,GB_Matrix_opaque*,GB_Matrix_opaque*,int)
warp 22 zombie count = 31, nzombies = 0
warp 17 zombie count = 32, nzombies = 0
warp 11 zombie count = 32, nzombies = 0
warp 1 zombie count = 32, nzombies = 0
warp 3 zombie count = 32, nzombies = 0
warp 21 zombie count = 32, nzombies = 0
warp 27 zombie count = 32, nzombies = 0
warp 9 zombie count = 31, nzombies = 0
warp 15 zombie count = 32, nzombies = 0
warp 5 zombie count = 32, nzombies = 0
warp 30 zombie count = 32, nzombies = 0
warp 6 zombie count = 32, nzombies = 0
warp 24 zombie count = 32, nzombies = 0
warp 13 zombie count = 31, nzombies = 0
warp 7 zombie count = 31, nzombies = 0
warp 20 zombie count = 32, nzombies = 0
warp 14 zombie count = 32, nzombies = 0
warp 2 zombie count = 32, nzombies = 0
warp 19 zombie count = 32, nzombies = 0
warp 25 zombie count = 32, nzombies = 0
warp 31 zombie count = 32, nzombies = 0
warp 16 zombie count = 32, nzombies = 0
warp 26 zombie count = 31, nzombies = 0
warp 4 zombie count = 31, nzombies = 0
warp 29 zombie count = 32, nzombies = 0
warp 12 zombie count = 32, nzombies = 0
warp 18 zombie count = 32, nzombies = 0
warp 10 zombie count = 32, nzombies = 0
warp 28 zombie count = 31, nzombies = 0
warp 23 zombie count = 32, nzombies = 0
warp 0 zombie count = 32, nzombies = 0
 Czombie = 64
 Czombie = 95
 Czombie = 127
 Czombie = 127
 Czombie = 191
 Czombie = 254
 Czombie = 254
 Czombie = 254
 Czombie = 349
 Czombie = 349
 Czombie = 349
 Czombie = 381
 Czombie = 444
 Czombie = 444
 Czombie = 540
 Czombie = 540
 Czombie = 540
 Czombie = 636
 Czombie = 636
 Czombie = 636
 Czombie = 668
 Czombie = 731
 Czombie = 731
warp 8 zombie count = 31, nzombies = 668
 Czombie = 762
 Czombie = 857
 Czombie = 857
 Czombie = 857
 Czombie = 953
 Czombie = 953
 Czombie = 953
 Czombie = 985
 Czombie = 1016
Printing bucketp
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
Done.
returned from kernel 1.59642ms

  1024x1024 GraphBLAS int32_t matrix, sparse (jumbled) by row
  sparsity control: sparse only
  C GPU, 1024 entries, memory: 28.2 KB
  pending tuples: 0 max pending: 0 zombies: 1016

    (0,478) zombie
    (0,574) zombie
    (2,376) zombie
    (5,560) zombie
    (6,996) zombie
    (7,183) zombie
    (7,666) zombie
    (8,896) zombie
    (9,187) zombie
    (10,446) zombie
    (11,46) zombie
    (11,955) zombie
    (12,397) zombie
    (12,953) zombie
    (13,192) zombie
    (14,421) zombie
    (15,568) zombie
    (16,788) zombie
    (16,904) zombie
    (17,928) zombie
    (18,103) zombie
    (19,821) zombie
    (19,886) zombie
    (20,474) zombie
    (21,479) zombie
    (21,975) zombie
    (22,569) zombie
    (23,310) zombie
    (24,905) zombie
    ...
 rmm_wrap_alloc 256 bytes
Not using cuda path. M_is_hypersparse: 0, A->iso: 0, B->iso: 0, A_BITMAP: 0, B_BITMAP: 0, GB_IS_FULL(A): 0, GB_IS_FULL(B): 0, semiring header size: 32
 rmm_wrap_alloc 16384 bytes

  1024x1024 GraphBLAS int32_t matrix, sparse by row
  sparsity control: sparse only
  M actual, 1024 entries, memory: 28.2 KB

    (0,478)   0
    (0,574)   0
    (2,376)   1
    (5,560)   0
    (6,996)   0
    (7,183)   1
    (7,666)   1
    (8,896)   0
    (9,187)   0
    (10,446)   1
    (11,46)   1
    (11,955)   1
    (12,397)   0
    (12,953)   1
    (13,192)   1
    (14,421)   0
    (15,568)   1
    (16,788)   1
    (16,904)   1
    (17,928)   0
    (18,103)   1
    (19,821)   0
    (19,886)   0
    (20,474)   0
    (21,479)   1
    (21,975)   0
    (22,569)   1
    (23,310)   0
    (24,905)   1
    ...
 rmm_wrap_alloc 16384 bytes
 rmm_wrap_alloc 256 bytes
 rmm_wrap_alloc 256 bytes

  1024x1024 GraphBLAS int32_t matrix, sparse by row
  sparsity control: sparse only
  C GPU, 8 entries, memory: 16.3 KB

    (235,522)   1
    (309,328)   1
    (417,366)   0
    (565,490)   0
    (611,759)   0
    (714,475)   1
    (766,915)   0
    (877,722)   0


  1024x1024 GraphBLAS int32_t matrix, hypersparse by row
  C_actual, 8 entries, memory: 544 bytes

    (235,522)   1
    (309,328)   1
    (417,366)   0
    (565,490)   0
    (611,759)   0
    (714,475)   1
    (766,915)   0
    (877,722)   0

 rmm_wrap_alloc 256 bytes
 rmm_wrap_alloc 256 bytes
 rmm_wrap_alloc 256 bytes
 rmm_wrap_alloc 256 bytes
 rmm_wrap_alloc 256 bytes
 rmm_wrap_alloc 256 bytes
 rmm_wrap_alloc 256 bytes

  1024x1024 GraphBLAS double matrix, hypersparse by row
  Diff actual, 8 entries, memory: 576 bytes

    (235,522)    0
    (309,328)    0
    (417,366)    0
    (565,490)    0
    (611,759)    0
    (714,475)    0
    (766,915)    0
    (877,722)    0


  1024x1024 GraphBLAS bool matrix, hypersparse by row
  T actual, 8 entries, memory: 520 bytes

    (235,522)   1
    (309,328)   1
    (417,366)   1
    (565,490)   1
    (611,759)   1
    (714,475)   1
    (766,915)   1
    (877,722)   1
 work:8 gpus:0 [       OK ] AxB_dot3_tests_PLUS_TIMES_3.smallxsmallPLUS_TIMES_Cint32_tMint32_tAint32_tBint32_tXint32_tYint32_tZint32_t (480 ms)
[----------] 4 tests from AxB_dot3_tests_PLUS_TIMES_3 (3226 ms total)

[----------] 4 tests from AxB_dot3_tests_PLUS_TIMES_4
[ RUN      ] AxB_dot3_tests_PLUS_TIMES_4.tinyxtinyPLUS_TIMES_Cint32_tMboolAint32_tBint32_tXint32_tYint32_tZint32_t
 rmm_wrap_alloc 256 bytes
 rmm_wrap_alloc 256 bytes
 rmm_wrap_alloc 256 bytes
 rmm_wrap_alloc 256 bytes

  32x32 GraphBLAS int32_t matrix, sparse by row
  sparsity control: sparse only
  my mat, 32 entries, memory: 1.5 KB

    (0,1)   0
    (1,1)   1
    (2,1)   2
    (3,1)   3
    (4,1)   4
    (5,1)   5
    (6,1)   6
    (7,1)   7
    (8,1)   8
    (9,1)   9
    (10,1)   10
    (11,1)   11
    (12,1)   12
    (13,1)   13
    (14,1)   14
    (15,1)   15
    (16,1)   16
    (17,1)   17
    (18,1)   18
    (19,1)   19
    (20,1)   20
    (21,1)   21
    (22,1)   22
    (23,1)   23
    (24,1)   24
    (25,1)   25
    (26,1)   26
    (27,1)   27
    (28,1)   28
    ...

  32x32 GraphBLAS int32_t matrix, sparse by row
  sparsity control: sparse only
  A, 32 entries, memory: 1.5 KB

    (0,1)   0
    (1,1)   1
    (2,1)   2
    (3,1)   3
    (4,1)   4
    (5,1)   5
    (6,1)   6
    (7,1)   7
    (8,1)   8
    (9,1)   9
    (10,1)   10
    (11,1)   11
    (12,1)   12
    (13,1)   13
    (14,1)   14
    (15,1)   15
    (16,1)   16
    (17,1)   17
    (18,1)   18
    (19,1)   19
    (20,1)   20
    (21,1)   21
    (22,1)   22
    (23,1)   23
    (24,1)   24
    (25,1)   25
    (26,1)   26
    (27,1)   27
    (28,1)   28
    (29,1)   29
    (30,1)   30
    (31,1)   31

 jit_cache get program GB_jit_reduceNonZombiesWarp
about to close
 read cache file /home/cjnolet/.SuiteSparse/GraphBLAS/6.3.0/GB_jit_reduceNonZombiesWarp
 got kernel instance reduceNonZombiesWarp_int32_t_int32_t_true
about to close
 read cache file /home/cjnolet/.SuiteSparse/GraphBLAS/6.3.0/reduceNonZombiesWarp_int32_t_int32_t_true
---------------------------------------
--- Linker for void reduceNonZombiesWarp<int, int, true>(GB_Matrix_opaque*, GB_Scalar_opaque*, unsigned int) ---
---------------------------------------
info    : 0 bytes gmem
info    : Function properties for '_Z20reduceNonZombiesWarpIiiLb1EEvP16GB_Matrix_opaqueP16GB_Scalar_opaquej':
info    : used 32 registers, 328 stack, 128 bytes smem, 372 bytes cmem[0], 0 bytes lmem


---------------------------------------
Launching _Z20reduceNonZombiesWarpIiiLb1EEvP16GB_Matrix_opaqueP16GB_Scalar_opaquej<<<1,128,0,0>>>(GB_Matrix_opaque*,GB_Scalar_opaque*,unsigned int)
Sum: 496
Invoking grb reduce
 work:32 gpus:0 Done.
Results matched!
[       OK ] AxB_dot3_tests_PLUS_TIMES_4.tinyxtinyPLUS_TIMES_Cint32_tMboolAint32_tBint32_tXint32_tYint32_tZint32_t (2 ms)
[ RUN      ] AxB_dot3_tests_PLUS_TIMES_4.smallxsmallPLUS_TIMES_Cint32_tMboolAint32_tBint32_tXint32_tYint32_tZint32_t
 rmm_wrap_alloc 256 bytes
 rmm_wrap_alloc 512 bytes

  1024x1024 GraphBLAS int32_t matrix, sparse by row
  sparsity control: sparse only
  my mat, 1024 entries, memory: 40.2 KB

    (0,1)   0
    (1,1)   1
    (2,1)   2
    (3,1)   3
    (4,1)   4
    (5,1)   5
    (6,1)   6
    (7,1)   7
    (8,1)   8
    (9,1)   9
    (10,1)   10
    (11,1)   11
    (12,1)   12
    (13,1)   13
    (14,1)   14
    (15,1)   15
    (16,1)   16
    (17,1)   17
    (18,1)   18
    (19,1)   19
    (20,1)   20
    (21,1)   21
    (22,1)   22
    (23,1)   23
    (24,1)   24
    (25,1)   25
    (26,1)   26
    (27,1)   27
    (28,1)   28
    ...

  1024x1024 GraphBLAS int32_t matrix, sparse by row
  sparsity control: sparse only
  A, 1024 entries, memory: 40.2 KB

    (0,1)   0
    (1,1)   1
    (2,1)   2
    (3,1)   3
    (4,1)   4
    (5,1)   5
    (6,1)   6
    (7,1)   7
    (8,1)   8
    (9,1)   9
    (10,1)   10
    (11,1)   11
    (12,1)   12
    (13,1)   13
    (14,1)   14
    (15,1)   15
    (16,1)   16
    (17,1)   17
    (18,1)   18
    (19,1)   19
    (20,1)   20
    (21,1)   21
    (22,1)   22
    (23,1)   23
    (24,1)   24
    (25,1)   25
    (26,1)   26
    (27,1)   27
    (28,1)   28
    (29,1)   29
    (30,1)   30
    (31,1)   31
    (32,1)   32
    (33,1)   33
    (34,1)   34
    (35,1)   35
    (36,1)   36
    (37,1)   37
    (38,1)   38
    (39,1)   39
    (40,1)   40
    (41,1)   41
    (42,1)   42
    (43,1)   43
    (44,1)   44
    (45,1)   45
    (46,1)   46
    (47,1)   47
    (48,1)   48
    (49,1)   49
    (50,1)   50
    (51,1)   51
    (52,1)   52
    (53,1)   53
    (54,1)   54
    (55,1)   55
    (56,1)   56
    (57,1)   57
    (58,1)   58
    (59,1)   59
    (60,1)   60
    (61,1)   61
    (62,1)   62
    (63,1)   63
    (64,1)   64
    (65,1)   65
    (66,1)   66
    (67,1)   67
    (68,1)   68
    (69,1)   69
    (70,1)   70
    (71,1)   71
    (72,1)   72
    (73,1)   73
    (74,1)   74
    (75,1)   75
    (76,1)   76
    (77,1)   77
    (78,1)   78
    (79,1)   79
    (80,1)   80
    (81,1)   81
    (82,1)   82
    (83,1)   83
    (84,1)   84
    (85,1)   85
    (86,1)   86
    (87,1)   87
    (88,1)   88
    (89,1)   89
    (90,1)   90
    (91,1)   91
    (92,1)   92
    (93,1)   93
    (94,1)   94
    (95,1)   95
    (96,1)   96
    (97,1)   97
    (98,1)   98
    (99,1)   99
    (100,1)   100
    (101,1)   101
    (102,1)   102
    (103,1)   103
    (104,1)   104
    (105,1)   105
    (106,1)   106
    (107,1)   107
    (108,1)   108
    (109,1)   109
    (110,1)   110
    (111,1)   111
    (112,1)   112
    (113,1)   113
    (114,1)   114
    (115,1)   115
    (116,1)   116
    (117,1)   117
    (118,1)   118
    (119,1)   119
    (120,1)   120
    (121,1)   121
    (122,1)   122
    (123,1)   123
    (124,1)   124
    (125,1)   125
    (126,1)   126
    (127,1)   127
    (128,1)   128
    (129,1)   129
    (130,1)   130
    (131,1)   131
    (132,1)   132
    (133,1)   133
    (134,1)   134
    (135,1)   135
    (136,1)   136
    (137,1)   137
    (138,1)   138
    (139,1)   139
    (140,1)   140
    (141,1)   141
    (142,1)   142
    (143,1)   143
    (144,1)   144
    (145,1)   145
    (146,1)   146
    (147,1)   147
    (148,1)   148
    (149,1)   149
    (150,1)   150
    (151,1)   151
    (152,1)   152
    (153,1)   153
    (154,1)   154
    (155,1)   155
    (156,1)   156
    (157,1)   157
    (158,1)   158
    (159,1)   159
    (160,1)   160
    (161,1)   161
    (162,1)   162
    (163,1)   163
    (164,1)   164
    (165,1)   165
    (166,1)   166
    (167,1)   167
    (168,1)   168
    (169,1)   169
    (170,1)   170
    (171,1)   171
    (172,1)   172
    (173,1)   173
    (174,1)   174
    (175,1)   175
    (176,1)   176
    (177,1)   177
    (178,1)   178
    (179,1)   179
    (180,1)   180
    (181,1)   181
    (182,1)   182
    (183,1)   183
    (184,1)   184
    (185,1)   185
    (186,1)   186
    (187,1)   187
    (188,1)   188
    (189,1)   189
    (190,1)   190
    (191,1)   191
    (192,1)   192
    (193,1)   193
    (194,1)   194
    (195,1)   195
    (196,1)   196
    (197,1)   197
    (198,1)   198
    (199,1)   199
    (200,1)   200
    (201,1)   201
    (202,1)   202
    (203,1)   203
    (204,1)   204
    (205,1)   205
    (206,1)   206
    (207,1)   207
    (208,1)   208
    (209,1)   209
    (210,1)   210
    (211,1)   211
    (212,1)   212
    (213,1)   213
    (214,1)   214
    (215,1)   215
    (216,1)   216
    (217,1)   217
    (218,1)   218
    (219,1)   219
    (220,1)   220
    (221,1)   221
    (222,1)   222
    (223,1)   223
    (224,1)   224
    (225,1)   225
    (226,1)   226
    (227,1)   227
    (228,1)   228
    (229,1)   229
    (230,1)   230
    (231,1)   231
    (232,1)   232
    (233,1)   233
    (234,1)   234
    (235,1)   235
    (236,1)   236
    (237,1)   237
    (238,1)   238
    (239,1)   239
    (240,1)   240
    (241,1)   241
    (242,1)   242
    (243,1)   243
    (244,1)   244
    (245,1)   245
    (246,1)   246
    (247,1)   247
    (248,1)   248
    (249,1)   249
    (250,1)   250
    (251,1)   251
    (252,1)   252
    (253,1)   253
    (254,1)   254
    (255,1)   255
    (256,1)   256
    (257,1)   257
    (258,1)   258
    (259,1)   259
    (260,1)   260
    (261,1)   261
    (262,1)   262
    (263,1)   263
    (264,1)   264
    (265,1)   265
    (266,1)   266
    (267,1)   267
    (268,1)   268
    (269,1)   269
    (270,1)   270
    (271,1)   271
    (272,1)   272
    (273,1)   273
    (274,1)   274
    (275,1)   275
    (276,1)   276
    (277,1)   277
    (278,1)   278
    (279,1)   279
    (280,1)   280
    (281,1)   281
    (282,1)   282
    (283,1)   283
    (284,1)   284
    (285,1)   285
    (286,1)   286
    (287,1)   287
    (288,1)   288
    (289,1)   289
    (290,1)   290
    (291,1)   291
    (292,1)   292
    (293,1)   293
    (294,1)   294
    (295,1)   295
    (296,1)   296
    (297,1)   297
    (298,1)   298
    (299,1)   299
    (300,1)   300
    (301,1)   301
    (302,1)   302
    (303,1)   303
    (304,1)   304
    (305,1)   305
    (306,1)   306
    (307,1)   307
    (308,1)   308
    (309,1)   309
    (310,1)   310
    (311,1)   311
    (312,1)   312
    (313,1)   313
    (314,1)   314
    (315,1)   315
    (316,1)   316
    (317,1)   317
    (318,1)   318
    (319,1)   319
    (320,1)   320
    (321,1)   321
    (322,1)   322
    (323,1)   323
    (324,1)   324
    (325,1)   325
    (326,1)   326
    (327,1)   327
    (328,1)   328
    (329,1)   329
    (330,1)   330
    (331,1)   331
    (332,1)   332
    (333,1)   333
    (334,1)   334
    (335,1)   335
    (336,1)   336
    (337,1)   337
    (338,1)   338
    (339,1)   339
    (340,1)   340
    (341,1)   341
    (342,1)   342
    (343,1)   343
    (344,1)   344
    (345,1)   345
    (346,1)   346
    (347,1)   347
    (348,1)   348
    (349,1)   349
    (350,1)   350
    (351,1)   351
    (352,1)   352
    (353,1)   353
    (354,1)   354
    (355,1)   355
    (356,1)   356
    (357,1)   357
    (358,1)   358
    (359,1)   359
    (360,1)   360
    (361,1)   361
    (362,1)   362
    (363,1)   363
    (364,1)   364
    (365,1)   365
    (366,1)   366
    (367,1)   367
    (368,1)   368
    (369,1)   369
    (370,1)   370
    (371,1)   371
    (372,1)   372
    (373,1)   373
    (374,1)   374
    (375,1)   375
    (376,1)   376
    (377,1)   377
    (378,1)   378
    (379,1)   379
    (380,1)   380
    (381,1)   381
    (382,1)   382
    (383,1)   383
    (384,1)   384
    (385,1)   385
    (386,1)   386
    (387,1)   387
    (388,1)   388
    (389,1)   389
    (390,1)   390
    (391,1)   391
    (392,1)   392
    (393,1)   393
    (394,1)   394
    (395,1)   395
    (396,1)   396
    (397,1)   397
    (398,1)   398
    (399,1)   399
    (400,1)   400
    (401,1)   401
    (402,1)   402
    (403,1)   403
    (404,1)   404
    (405,1)   405
    (406,1)   406
    (407,1)   407
    (408,1)   408
    (409,1)   409
    (410,1)   410
    (411,1)   411
    (412,1)   412
    (413,1)   413
    (414,1)   414
    (415,1)   415
    (416,1)   416
    (417,1)   417
    (418,1)   418
    (419,1)   419
    (420,1)   420
    (421,1)   421
    (422,1)   422
    (423,1)   423
    (424,1)   424
    (425,1)   425
    (426,1)   426
    (427,1)   427
    (428,1)   428
    (429,1)   429
    (430,1)   430
    (431,1)   431
    (432,1)   432
    (433,1)   433
    (434,1)   434
    (435,1)   435
    (436,1)   436
    (437,1)   437
    (438,1)   438
    (439,1)   439
    (440,1)   440
    (441,1)   441
    (442,1)   442
    (443,1)   443
    (444,1)   444
    (445,1)   445
    (446,1)   446
    (447,1)   447
    (448,1)   448
    (449,1)   449
    (450,1)   450
    (451,1)   451
    (452,1)   452
    (453,1)   453
    (454,1)   454
    (455,1)   455
    (456,1)   456
    (457,1)   457
    (458,1)   458
    (459,1)   459
    (460,1)   460
    (461,1)   461
    (462,1)   462
    (463,1)   463
    (464,1)   464
    (465,1)   465
    (466,1)   466
    (467,1)   467
    (468,1)   468
    (469,1)   469
    (470,1)   470
    (471,1)   471
    (472,1)   472
    (473,1)   473
    (474,1)   474
    (475,1)   475
    (476,1)   476
    (477,1)   477
    (478,1)   478
    (479,1)   479
    (480,1)   480
    (481,1)   481
    (482,1)   482
    (483,1)   483
    (484,1)   484
    (485,1)   485
    (486,1)   486
    (487,1)   487
    (488,1)   488
    (489,1)   489
    (490,1)   490
    (491,1)   491
    (492,1)   492
    (493,1)   493
    (494,1)   494
    (495,1)   495
    (496,1)   496
    (497,1)   497
    (498,1)   498
    (499,1)   499
    (500,1)   500
    (501,1)   501
    (502,1)   502
    (503,1)   503
    (504,1)   504
    (505,1)   505
    (506,1)   506
    (507,1)   507
    (508,1)   508
    (509,1)   509
    (510,1)   510
    (511,1)   511
    (512,1)   512
    (513,1)   513
    (514,1)   514
    (515,1)   515
    (516,1)   516
    (517,1)   517
    (518,1)   518
    (519,1)   519
    (520,1)   520
    (521,1)   521
    (522,1)   522
    (523,1)   523
    (524,1)   524
    (525,1)   525
    (526,1)   526
    (527,1)   527
    (528,1)   528
    (529,1)   529
    (530,1)   530
    (531,1)   531
    (532,1)   532
    (533,1)   533
    (534,1)   534
    (535,1)   535
    (536,1)   536
    (537,1)   537
    (538,1)   538
    (539,1)   539
    (540,1)   540
    (541,1)   541
    (542,1)   542
    (543,1)   543
    (544,1)   544
    (545,1)   545
    (546,1)   546
    (547,1)   547
    (548,1)   548
    (549,1)   549
    (550,1)   550
    (551,1)   551
    (552,1)   552
    (553,1)   553
    (554,1)   554
    (555,1)   555
    (556,1)   556
    (557,1)   557
    (558,1)   558
    (559,1)   559
    (560,1)   560
    (561,1)   561
    (562,1)   562
    (563,1)   563
    (564,1)   564
    (565,1)   565
    (566,1)   566
    (567,1)   567
    (568,1)   568
    (569,1)   569
    (570,1)   570
    (571,1)   571
    (572,1)   572
    (573,1)   573
    (574,1)   574
    (575,1)   575
    (576,1)   576
    (577,1)   577
    (578,1)   578
    (579,1)   579
    (580,1)   580
    (581,1)   581
    (582,1)   582
    (583,1)   583
    (584,1)   584
    (585,1)   585
    (586,1)   586
    (587,1)   587
    (588,1)   588
    (589,1)   589
    (590,1)   590
    (591,1)   591
    (592,1)   592
    (593,1)   593
    (594,1)   594
    (595,1)   595
    (596,1)   596
    (597,1)   597
    (598,1)   598
    (599,1)   599
    (600,1)   600
    (601,1)   601
    (602,1)   602
    (603,1)   603
    (604,1)   604
    (605,1)   605
    (606,1)   606
    (607,1)   607
    (608,1)   608
    (609,1)   609
    (610,1)   610
    (611,1)   611
    (612,1)   612
    (613,1)   613
    (614,1)   614
    (615,1)   615
    (616,1)   616
    (617,1)   617
    (618,1)   618
    (619,1)   619
    (620,1)   620
    (621,1)   621
    (622,1)   622
    (623,1)   623
    (624,1)   624
    (625,1)   625
    (626,1)   626
    (627,1)   627
    (628,1)   628
    (629,1)   629
    (630,1)   630
    (631,1)   631
    (632,1)   632
    (633,1)   633
    (634,1)   634
    (635,1)   635
    (636,1)   636
    (637,1)   637
    (638,1)   638
    (639,1)   639
    (640,1)   640
    (641,1)   641
    (642,1)   642
    (643,1)   643
    (644,1)   644
    (645,1)   645
    (646,1)   646
    (647,1)   647
    (648,1)   648
    (649,1)   649
    (650,1)   650
    (651,1)   651
    (652,1)   652
    (653,1)   653
    (654,1)   654
    (655,1)   655
    (656,1)   656
    (657,1)   657
    (658,1)   658
    (659,1)   659
    (660,1)   660
    (661,1)   661
    (662,1)   662
    (663,1)   663
    (664,1)   664
    (665,1)   665
    (666,1)   666
    (667,1)   667
    (668,1)   668
    (669,1)   669
    (670,1)   670
    (671,1)   671
    (672,1)   672
    (673,1)   673
    (674,1)   674
    (675,1)   675
    (676,1)   676
    (677,1)   677
    (678,1)   678
    (679,1)   679
    (680,1)   680
    (681,1)   681
    (682,1)   682
    (683,1)   683
    (684,1)   684
    (685,1)   685
    (686,1)   686
    (687,1)   687
    (688,1)   688
    (689,1)   689
    (690,1)   690
    (691,1)   691
    (692,1)   692
    (693,1)   693
    (694,1)   694
    (695,1)   695
    (696,1)   696
    (697,1)   697
    (698,1)   698
    (699,1)   699
    (700,1)   700
    (701,1)   701
    (702,1)   702
    (703,1)   703
    (704,1)   704
    (705,1)   705
    (706,1)   706
    (707,1)   707
    (708,1)   708
    (709,1)   709
    (710,1)   710
    (711,1)   711
    (712,1)   712
    (713,1)   713
    (714,1)   714
    (715,1)   715
    (716,1)   716
    (717,1)   717
    (718,1)   718
    (719,1)   719
    (720,1)   720
    (721,1)   721
    (722,1)   722
    (723,1)   723
    (724,1)   724
    (725,1)   725
    (726,1)   726
    (727,1)   727
    (728,1)   728
    (729,1)   729
    (730,1)   730
    (731,1)   731
    (732,1)   732
    (733,1)   733
    (734,1)   734
    (735,1)   735
    (736,1)   736
    (737,1)   737
    (738,1)   738
    (739,1)   739
    (740,1)   740
    (741,1)   741
    (742,1)   742
    (743,1)   743
    (744,1)   744
    (745,1)   745
    (746,1)   746
    (747,1)   747
    (748,1)   748
    (749,1)   749
    (750,1)   750
    (751,1)   751
    (752,1)   752
    (753,1)   753
    (754,1)   754
    (755,1)   755
    (756,1)   756
    (757,1)   757
    (758,1)   758
    (759,1)   759
    (760,1)   760
    (761,1)   761
    (762,1)   762
    (763,1)   763
    (764,1)   764
    (765,1)   765
    (766,1)   766
    (767,1)   767
    (768,1)   768
    (769,1)   769
    (770,1)   770
    (771,1)   771
    (772,1)   772
    (773,1)   773
    (774,1)   774
    (775,1)   775
    (776,1)   776
    (777,1)   777
    (778,1)   778
    (779,1)   779
    (780,1)   780
    (781,1)   781
    (782,1)   782
    (783,1)   783
    (784,1)   784
    (785,1)   785
    (786,1)   786
    (787,1)   787
    (788,1)   788
    (789,1)   789
    (790,1)   790
    (791,1)   791
    (792,1)   792
    (793,1)   793
    (794,1)   794
    (795,1)   795
    (796,1)   796
    (797,1)   797
    (798,1)   798
    (799,1)   799
    (800,1)   800
    (801,1)   801
    (802,1)   802
    (803,1)   803
    (804,1)   804
    (805,1)   805
    (806,1)   806
    (807,1)   807
    (808,1)   808
    (809,1)   809
    (810,1)   810
    (811,1)   811
    (812,1)   812
    (813,1)   813
    (814,1)   814
    (815,1)   815
    (816,1)   816
    (817,1)   817
    (818,1)   818
    (819,1)   819
    (820,1)   820
    (821,1)   821
    (822,1)   822
    (823,1)   823
    (824,1)   824
    (825,1)   825
    (826,1)   826
    (827,1)   827
    (828,1)   828
    (829,1)   829
    (830,1)   830
    (831,1)   831
    (832,1)   832
    (833,1)   833
    (834,1)   834
    (835,1)   835
    (836,1)   836
    (837,1)   837
    (838,1)   838
    (839,1)   839
    (840,1)   840
    (841,1)   841
    (842,1)   842
    (843,1)   843
    (844,1)   844
    (845,1)   845
    (846,1)   846
    (847,1)   847
    (848,1)   848
    (849,1)   849
    (850,1)   850
    (851,1)   851
    (852,1)   852
    (853,1)   853
    (854,1)   854
    (855,1)   855
    (856,1)   856
    (857,1)   857
    (858,1)   858
    (859,1)   859
    (860,1)   860
    (861,1)   861
    (862,1)   862
    (863,1)   863
    (864,1)   864
    (865,1)   865
    (866,1)   866
    (867,1)   867
    (868,1)   868
    (869,1)   869
    (870,1)   870
    (871,1)   871
    (872,1)   872
    (873,1)   873
    (874,1)   874
    (875,1)   875
    (876,1)   876
    (877,1)   877
    (878,1)   878
    (879,1)   879
    (880,1)   880
    (881,1)   881
    (882,1)   882
    (883,1)   883
    (884,1)   884
    (885,1)   885
    (886,1)   886
    (887,1)   887
    (888,1)   888
    (889,1)   889
    (890,1)   890
    (891,1)   891
    (892,1)   892
    (893,1)   893
    (894,1)   894
    (895,1)   895
    (896,1)   896
    (897,1)   897
    (898,1)   898
    (899,1)   899
    (900,1)   900
    (901,1)   901
    (902,1)   902
    (903,1)   903
    (904,1)   904
    (905,1)   905
    (906,1)   906
    (907,1)   907
    (908,1)   908
    (909,1)   909
    (910,1)   910
    (911,1)   911
    (912,1)   912
    (913,1)   913
    (914,1)   914
    (915,1)   915
    (916,1)   916
    (917,1)   917
    (918,1)   918
    (919,1)   919
    (920,1)   920
    (921,1)   921
    (922,1)   922
    (923,1)   923
    (924,1)   924
    (925,1)   925
    (926,1)   926
    (927,1)   927
    (928,1)   928
    (929,1)   929
    (930,1)   930
    (931,1)   931
    (932,1)   932
    (933,1)   933
    (934,1)   934
    (935,1)   935
    (936,1)   936
    (937,1)   937
    (938,1)   938
    (939,1)   939
    (940,1)   940
    (941,1)   941
    (942,1)   942
    (943,1)   943
    (944,1)   944
    (945,1)   945
    (946,1)   946
    (947,1)   947
    (948,1)   948
    (949,1)   949
    (950,1)   950
    (951,1)   951
    (952,1)   952
    (953,1)   953
    (954,1)   954
    (955,1)   955
    (956,1)   956
    (957,1)   957
    (958,1)   958
    (959,1)   959
    (960,1)   960
    (961,1)   961
    (962,1)   962
    (963,1)   963
    (964,1)   964
    (965,1)   965
    (966,1)   966
    (967,1)   967
    (968,1)   968
    (969,1)   969
    (970,1)   970
    (971,1)   971
    (972,1)   972
    (973,1)   973
    (974,1)   974
    (975,1)   975
    (976,1)   976
    (977,1)   977
    (978,1)   978
    (979,1)   979
    (980,1)   980
    (981,1)   981
    (982,1)   982
    (983,1)   983
    (984,1)   984
    (985,1)   985
    (986,1)   986
    (987,1)   987
    (988,1)   988
    (989,1)   989
    (990,1)   990
    (991,1)   991
    (992,1)   992
    (993,1)   993
    (994,1)   994
    (995,1)   995
    (996,1)   996
    (997,1)   997
    (998,1)   998
    (999,1)   999
    (1000,1)   1000
    (1001,1)   1001
    (1002,1)   1002
    (1003,1)   1003
    (1004,1)   1004
    (1005,1)   1005
    (1006,1)   1006
    (1007,1)   1007
    (1008,1)   1008
    (1009,1)   1009
    (1010,1)   1010
    (1011,1)   1011
    (1012,1)   1012
    (1013,1)   1013
    (1014,1)   1014
    (1015,1)   1015
    (1016,1)   1016
    (1017,1)   1017
    (1018,1)   1018
    (1019,1)   1019
    (1020,1)   1020
    (1021,1)   1021
    (1022,1)   1022
    (1023,1)   1023

 jit_cache get program GB_jit_reduceNonZombiesWarp
found memory-cached prog GB_jit_reduceNonZombiesWarp
 got kernel instance reduceNonZombiesWarp_int32_t_int32_t_true
found memory-cached prog reduceNonZombiesWarp_int32_t_int32_t_true
Launching _Z20reduceNonZombiesWarpIiiLb1EEvP16GB_Matrix_opaqueP16GB_Scalar_opaquej<<<8,128,0,0>>>(GB_Matrix_opaque*,GB_Scalar_opaque*,unsigned int)
Sum: 523776
Invoking grb reduce
 rmm_wrap_alloc 256 bytes
 work:1024 gpus:0 Done.
Results matched!
[       OK ] AxB_dot3_tests_PLUS_TIMES_4.smallxsmallPLUS_TIMES_Cint32_tMboolAint32_tBint32_tXint32_tYint32_tZint32_t (5 ms)
[ RUN      ] AxB_dot3_tests_PLUS_TIMES_4.tinyxtinyPLUS_TIMES_Cint32_tMint32_tAint32_tBint32_tXint32_tYint32_tZint32_t
 rmm_wrap_alloc 256 bytes
 rmm_wrap_alloc 256 bytes
 rmm_wrap_alloc 256 bytes
 rmm_wrap_alloc 256 bytes
 rmm_wrap_alloc 256 bytes
 rmm_wrap_alloc 256 bytes
 rmm_wrap_alloc 256 bytes
 rmm_wrap_alloc 512 bytes

  32x32 GraphBLAS int32_t matrix, sparse by row
  sparsity control: sparse only
  my mat, 32 entries, memory: 1.5 KB

    (0,1)   0
    (1,1)   1
    (2,1)   2
    (3,1)   3
    (4,1)   4
    (5,1)   5
    (6,1)   6
    (7,1)   7
    (8,1)   8
    (9,1)   9
    (10,1)   10
    (11,1)   11
    (12,1)   12
    (13,1)   13
    (14,1)   14
    (15,1)   15
    (16,1)   16
    (17,1)   17
    (18,1)   18
    (19,1)   19
    (20,1)   20
    (21,1)   21
    (22,1)   22
    (23,1)   23
    (24,1)   24
    (25,1)   25
    (26,1)   26
    (27,1)   27
    (28,1)   28
    ...

  32x32 GraphBLAS int32_t matrix, sparse by row
  sparsity control: sparse only
  A, 32 entries, memory: 1.5 KB

    (0,1)   0
    (1,1)   1
    (2,1)   2
    (3,1)   3
    (4,1)   4
    (5,1)   5
    (6,1)   6
    (7,1)   7
    (8,1)   8
    (9,1)   9
    (10,1)   10
    (11,1)   11
    (12,1)   12
    (13,1)   13
    (14,1)   14
    (15,1)   15
    (16,1)   16
    (17,1)   17
    (18,1)   18
    (19,1)   19
    (20,1)   20
    (21,1)   21
    (22,1)   22
    (23,1)   23
    (24,1)   24
    (25,1)   25
    (26,1)   26
    (27,1)   27
    (28,1)   28
    (29,1)   29
    (30,1)   30
    (31,1)   31

 jit_cache get program GB_jit_reduceNonZombiesWarp
found memory-cached prog GB_jit_reduceNonZombiesWarp
 got kernel instance reduceNonZombiesWarp_int32_t_int32_t_true
found memory-cached prog reduceNonZombiesWarp_int32_t_int32_t_true
Launching _Z20reduceNonZombiesWarpIiiLb1EEvP16GB_Matrix_opaqueP16GB_Scalar_opaquej<<<1,128,0,0>>>(GB_Matrix_opaque*,GB_Scalar_opaque*,unsigned int)
Sum: 496
Invoking grb reduce
 work:32 gpus:0 Done.
Results matched!
[       OK ] AxB_dot3_tests_PLUS_TIMES_4.tinyxtinyPLUS_TIMES_Cint32_tMint32_tAint32_tBint32_tXint32_tYint32_tZint32_t (0 ms)
[ RUN      ] AxB_dot3_tests_PLUS_TIMES_4.smallxsmallPLUS_TIMES_Cint32_tMint32_tAint32_tBint32_tXint32_tYint32_tZint32_t
 rmm_wrap_alloc 256 bytes
 rmm_wrap_alloc 512 bytes
 rmm_wrap_alloc 16384 bytes

  1024x1024 GraphBLAS int32_t matrix, sparse by row
  sparsity control: sparse only
  my mat, 1024 entries, memory: 40.2 KB

    (0,1)   0
    (1,1)   1
    (2,1)   2
    (3,1)   3
    (4,1)   4
    (5,1)   5
    (6,1)   6
    (7,1)   7
    (8,1)   8
    (9,1)   9
    (10,1)   10
    (11,1)   11
    (12,1)   12
    (13,1)   13
    (14,1)   14
    (15,1)   15
    (16,1)   16
    (17,1)   17
    (18,1)   18
    (19,1)   19
    (20,1)   20
    (21,1)   21
    (22,1)   22
    (23,1)   23
    (24,1)   24
    (25,1)   25
    (26,1)   26
    (27,1)   27
    (28,1)   28
    ...

  1024x1024 GraphBLAS int32_t matrix, sparse by row
  sparsity control: sparse only
  A, 1024 entries, memory: 40.2 KB

    (0,1)   0
    (1,1)   1
    (2,1)   2
    (3,1)   3
    (4,1)   4
    (5,1)   5
    (6,1)   6
    (7,1)   7
    (8,1)   8
    (9,1)   9
    (10,1)   10
    (11,1)   11
    (12,1)   12
    (13,1)   13
    (14,1)   14
    (15,1)   15
    (16,1)   16
    (17,1)   17
    (18,1)   18
    (19,1)   19
    (20,1)   20
    (21,1)   21
    (22,1)   22
    (23,1)   23
    (24,1)   24
    (25,1)   25
    (26,1)   26
    (27,1)   27
    (28,1)   28
    (29,1)   29
    (30,1)   30
    (31,1)   31
    (32,1)   32
    (33,1)   33
    (34,1)   34
    (35,1)   35
    (36,1)   36
    (37,1)   37
    (38,1)   38
    (39,1)   39
    (40,1)   40
    (41,1)   41
    (42,1)   42
    (43,1)   43
    (44,1)   44
    (45,1)   45
    (46,1)   46
    (47,1)   47
    (48,1)   48
    (49,1)   49
    (50,1)   50
    (51,1)   51
    (52,1)   52
    (53,1)   53
    (54,1)   54
    (55,1)   55
    (56,1)   56
    (57,1)   57
    (58,1)   58
    (59,1)   59
    (60,1)   60
    (61,1)   61
    (62,1)   62
    (63,1)   63
    (64,1)   64
    (65,1)   65
    (66,1)   66
    (67,1)   67
    (68,1)   68
    (69,1)   69
    (70,1)   70
    (71,1)   71
    (72,1)   72
    (73,1)   73
    (74,1)   74
    (75,1)   75
    (76,1)   76
    (77,1)   77
    (78,1)   78
    (79,1)   79
    (80,1)   80
    (81,1)   81
    (82,1)   82
    (83,1)   83
    (84,1)   84
    (85,1)   85
    (86,1)   86
    (87,1)   87
    (88,1)   88
    (89,1)   89
    (90,1)   90
    (91,1)   91
    (92,1)   92
    (93,1)   93
    (94,1)   94
    (95,1)   95
    (96,1)   96
    (97,1)   97
    (98,1)   98
    (99,1)   99
    (100,1)   100
    (101,1)   101
    (102,1)   102
    (103,1)   103
    (104,1)   104
    (105,1)   105
    (106,1)   106
    (107,1)   107
    (108,1)   108
    (109,1)   109
    (110,1)   110
    (111,1)   111
    (112,1)   112
    (113,1)   113
    (114,1)   114
    (115,1)   115
    (116,1)   116
    (117,1)   117
    (118,1)   118
    (119,1)   119
    (120,1)   120
    (121,1)   121
    (122,1)   122
    (123,1)   123
    (124,1)   124
    (125,1)   125
    (126,1)   126
    (127,1)   127
    (128,1)   128
    (129,1)   129
    (130,1)   130
    (131,1)   131
    (132,1)   132
    (133,1)   133
    (134,1)   134
    (135,1)   135
    (136,1)   136
    (137,1)   137
    (138,1)   138
    (139,1)   139
    (140,1)   140
    (141,1)   141
    (142,1)   142
    (143,1)   143
    (144,1)   144
    (145,1)   145
    (146,1)   146
    (147,1)   147
    (148,1)   148
    (149,1)   149
    (150,1)   150
    (151,1)   151
    (152,1)   152
    (153,1)   153
    (154,1)   154
    (155,1)   155
    (156,1)   156
    (157,1)   157
    (158,1)   158
    (159,1)   159
    (160,1)   160
    (161,1)   161
    (162,1)   162
    (163,1)   163
    (164,1)   164
    (165,1)   165
    (166,1)   166
    (167,1)   167
    (168,1)   168
    (169,1)   169
    (170,1)   170
    (171,1)   171
    (172,1)   172
    (173,1)   173
    (174,1)   174
    (175,1)   175
    (176,1)   176
    (177,1)   177
    (178,1)   178
    (179,1)   179
    (180,1)   180
    (181,1)   181
    (182,1)   182
    (183,1)   183
    (184,1)   184
    (185,1)   185
    (186,1)   186
    (187,1)   187
    (188,1)   188
    (189,1)   189
    (190,1)   190
    (191,1)   191
    (192,1)   192
    (193,1)   193
    (194,1)   194
    (195,1)   195
    (196,1)   196
    (197,1)   197
    (198,1)   198
    (199,1)   199
    (200,1)   200
    (201,1)   201
    (202,1)   202
    (203,1)   203
    (204,1)   204
    (205,1)   205
    (206,1)   206
    (207,1)   207
    (208,1)   208
    (209,1)   209
    (210,1)   210
    (211,1)   211
    (212,1)   212
    (213,1)   213
    (214,1)   214
    (215,1)   215
    (216,1)   216
    (217,1)   217
    (218,1)   218
    (219,1)   219
    (220,1)   220
    (221,1)   221
    (222,1)   222
    (223,1)   223
    (224,1)   224
    (225,1)   225
    (226,1)   226
    (227,1)   227
    (228,1)   228
    (229,1)   229
    (230,1)   230
    (231,1)   231
    (232,1)   232
    (233,1)   233
    (234,1)   234
    (235,1)   235
    (236,1)   236
    (237,1)   237
    (238,1)   238
    (239,1)   239
    (240,1)   240
    (241,1)   241
    (242,1)   242
    (243,1)   243
    (244,1)   244
    (245,1)   245
    (246,1)   246
    (247,1)   247
    (248,1)   248
    (249,1)   249
    (250,1)   250
    (251,1)   251
    (252,1)   252
    (253,1)   253
    (254,1)   254
    (255,1)   255
    (256,1)   256
    (257,1)   257
    (258,1)   258
    (259,1)   259
    (260,1)   260
    (261,1)   261
    (262,1)   262
    (263,1)   263
    (264,1)   264
    (265,1)   265
    (266,1)   266
    (267,1)   267
    (268,1)   268
    (269,1)   269
    (270,1)   270
    (271,1)   271
    (272,1)   272
    (273,1)   273
    (274,1)   274
    (275,1)   275
    (276,1)   276
    (277,1)   277
    (278,1)   278
    (279,1)   279
    (280,1)   280
    (281,1)   281
    (282,1)   282
    (283,1)   283
    (284,1)   284
    (285,1)   285
    (286,1)   286
    (287,1)   287
    (288,1)   288
    (289,1)   289
    (290,1)   290
    (291,1)   291
    (292,1)   292
    (293,1)   293
    (294,1)   294
    (295,1)   295
    (296,1)   296
    (297,1)   297
    (298,1)   298
    (299,1)   299
    (300,1)   300
    (301,1)   301
    (302,1)   302
    (303,1)   303
    (304,1)   304
    (305,1)   305
    (306,1)   306
    (307,1)   307
    (308,1)   308
    (309,1)   309
    (310,1)   310
    (311,1)   311
    (312,1)   312
    (313,1)   313
    (314,1)   314
    (315,1)   315
    (316,1)   316
    (317,1)   317
    (318,1)   318
    (319,1)   319
    (320,1)   320
    (321,1)   321
    (322,1)   322
    (323,1)   323
    (324,1)   324
    (325,1)   325
    (326,1)   326
    (327,1)   327
    (328,1)   328
    (329,1)   329
    (330,1)   330
    (331,1)   331
    (332,1)   332
    (333,1)   333
    (334,1)   334
    (335,1)   335
    (336,1)   336
    (337,1)   337
    (338,1)   338
    (339,1)   339
    (340,1)   340
    (341,1)   341
    (342,1)   342
    (343,1)   343
    (344,1)   344
    (345,1)   345
    (346,1)   346
    (347,1)   347
    (348,1)   348
    (349,1)   349
    (350,1)   350
    (351,1)   351
    (352,1)   352
    (353,1)   353
    (354,1)   354
    (355,1)   355
    (356,1)   356
    (357,1)   357
    (358,1)   358
    (359,1)   359
    (360,1)   360
    (361,1)   361
    (362,1)   362
    (363,1)   363
    (364,1)   364
    (365,1)   365
    (366,1)   366
    (367,1)   367
    (368,1)   368
    (369,1)   369
    (370,1)   370
    (371,1)   371
    (372,1)   372
    (373,1)   373
    (374,1)   374
    (375,1)   375
    (376,1)   376
    (377,1)   377
    (378,1)   378
    (379,1)   379
    (380,1)   380
    (381,1)   381
    (382,1)   382
    (383,1)   383
    (384,1)   384
    (385,1)   385
    (386,1)   386
    (387,1)   387
    (388,1)   388
    (389,1)   389
    (390,1)   390
    (391,1)   391
    (392,1)   392
    (393,1)   393
    (394,1)   394
    (395,1)   395
    (396,1)   396
    (397,1)   397
    (398,1)   398
    (399,1)   399
    (400,1)   400
    (401,1)   401
    (402,1)   402
    (403,1)   403
    (404,1)   404
    (405,1)   405
    (406,1)   406
    (407,1)   407
    (408,1)   408
    (409,1)   409
    (410,1)   410
    (411,1)   411
    (412,1)   412
    (413,1)   413
    (414,1)   414
    (415,1)   415
    (416,1)   416
    (417,1)   417
    (418,1)   418
    (419,1)   419
    (420,1)   420
    (421,1)   421
    (422,1)   422
    (423,1)   423
    (424,1)   424
    (425,1)   425
    (426,1)   426
    (427,1)   427
    (428,1)   428
    (429,1)   429
    (430,1)   430
    (431,1)   431
    (432,1)   432
    (433,1)   433
    (434,1)   434
    (435,1)   435
    (436,1)   436
    (437,1)   437
    (438,1)   438
    (439,1)   439
    (440,1)   440
    (441,1)   441
    (442,1)   442
    (443,1)   443
    (444,1)   444
    (445,1)   445
    (446,1)   446
    (447,1)   447
    (448,1)   448
    (449,1)   449
    (450,1)   450
    (451,1)   451
    (452,1)   452
    (453,1)   453
    (454,1)   454
    (455,1)   455
    (456,1)   456
    (457,1)   457
    (458,1)   458
    (459,1)   459
    (460,1)   460
    (461,1)   461
    (462,1)   462
    (463,1)   463
    (464,1)   464
    (465,1)   465
    (466,1)   466
    (467,1)   467
    (468,1)   468
    (469,1)   469
    (470,1)   470
    (471,1)   471
    (472,1)   472
    (473,1)   473
    (474,1)   474
    (475,1)   475
    (476,1)   476
    (477,1)   477
    (478,1)   478
    (479,1)   479
    (480,1)   480
    (481,1)   481
    (482,1)   482
    (483,1)   483
    (484,1)   484
    (485,1)   485
    (486,1)   486
    (487,1)   487
    (488,1)   488
    (489,1)   489
    (490,1)   490
    (491,1)   491
    (492,1)   492
    (493,1)   493
    (494,1)   494
    (495,1)   495
    (496,1)   496
    (497,1)   497
    (498,1)   498
    (499,1)   499
    (500,1)   500
    (501,1)   501
    (502,1)   502
    (503,1)   503
    (504,1)   504
    (505,1)   505
    (506,1)   506
    (507,1)   507
    (508,1)   508
    (509,1)   509
    (510,1)   510
    (511,1)   511
    (512,1)   512
    (513,1)   513
    (514,1)   514
    (515,1)   515
    (516,1)   516
    (517,1)   517
    (518,1)   518
    (519,1)   519
    (520,1)   520
    (521,1)   521
    (522,1)   522
    (523,1)   523
    (524,1)   524
    (525,1)   525
    (526,1)   526
    (527,1)   527
    (528,1)   528
    (529,1)   529
    (530,1)   530
    (531,1)   531
    (532,1)   532
    (533,1)   533
    (534,1)   534
    (535,1)   535
    (536,1)   536
    (537,1)   537
    (538,1)   538
    (539,1)   539
    (540,1)   540
    (541,1)   541
    (542,1)   542
    (543,1)   543
    (544,1)   544
    (545,1)   545
    (546,1)   546
    (547,1)   547
    (548,1)   548
    (549,1)   549
    (550,1)   550
    (551,1)   551
    (552,1)   552
    (553,1)   553
    (554,1)   554
    (555,1)   555
    (556,1)   556
    (557,1)   557
    (558,1)   558
    (559,1)   559
    (560,1)   560
    (561,1)   561
    (562,1)   562
    (563,1)   563
    (564,1)   564
    (565,1)   565
    (566,1)   566
    (567,1)   567
    (568,1)   568
    (569,1)   569
    (570,1)   570
    (571,1)   571
    (572,1)   572
    (573,1)   573
    (574,1)   574
    (575,1)   575
    (576,1)   576
    (577,1)   577
    (578,1)   578
    (579,1)   579
    (580,1)   580
    (581,1)   581
    (582,1)   582
    (583,1)   583
    (584,1)   584
    (585,1)   585
    (586,1)   586
    (587,1)   587
    (588,1)   588
    (589,1)   589
    (590,1)   590
    (591,1)   591
    (592,1)   592
    (593,1)   593
    (594,1)   594
    (595,1)   595
    (596,1)   596
    (597,1)   597
    (598,1)   598
    (599,1)   599
    (600,1)   600
    (601,1)   601
    (602,1)   602
    (603,1)   603
    (604,1)   604
    (605,1)   605
    (606,1)   606
    (607,1)   607
    (608,1)   608
    (609,1)   609
    (610,1)   610
    (611,1)   611
    (612,1)   612
    (613,1)   613
    (614,1)   614
    (615,1)   615
    (616,1)   616
    (617,1)   617
    (618,1)   618
    (619,1)   619
    (620,1)   620
    (621,1)   621
    (622,1)   622
    (623,1)   623
    (624,1)   624
    (625,1)   625
    (626,1)   626
    (627,1)   627
    (628,1)   628
    (629,1)   629
    (630,1)   630
    (631,1)   631
    (632,1)   632
    (633,1)   633
    (634,1)   634
    (635,1)   635
    (636,1)   636
    (637,1)   637
    (638,1)   638
    (639,1)   639
    (640,1)   640
    (641,1)   641
    (642,1)   642
    (643,1)   643
    (644,1)   644
    (645,1)   645
    (646,1)   646
    (647,1)   647
    (648,1)   648
    (649,1)   649
    (650,1)   650
    (651,1)   651
    (652,1)   652
    (653,1)   653
    (654,1)   654
    (655,1)   655
    (656,1)   656
    (657,1)   657
    (658,1)   658
    (659,1)   659
    (660,1)   660
    (661,1)   661
    (662,1)   662
    (663,1)   663
    (664,1)   664
    (665,1)   665
    (666,1)   666
    (667,1)   667
    (668,1)   668
    (669,1)   669
    (670,1)   670
    (671,1)   671
    (672,1)   672
    (673,1)   673
    (674,1)   674
    (675,1)   675
    (676,1)   676
    (677,1)   677
    (678,1)   678
    (679,1)   679
    (680,1)   680
    (681,1)   681
    (682,1)   682
    (683,1)   683
    (684,1)   684
    (685,1)   685
    (686,1)   686
    (687,1)   687
    (688,1)   688
    (689,1)   689
    (690,1)   690
    (691,1)   691
    (692,1)   692
    (693,1)   693
    (694,1)   694
    (695,1)   695
    (696,1)   696
    (697,1)   697
    (698,1)   698
    (699,1)   699
    (700,1)   700
    (701,1)   701
    (702,1)   702
    (703,1)   703
    (704,1)   704
    (705,1)   705
    (706,1)   706
    (707,1)   707
    (708,1)   708
    (709,1)   709
    (710,1)   710
    (711,1)   711
    (712,1)   712
    (713,1)   713
    (714,1)   714
    (715,1)   715
    (716,1)   716
    (717,1)   717
    (718,1)   718
    (719,1)   719
    (720,1)   720
    (721,1)   721
    (722,1)   722
    (723,1)   723
    (724,1)   724
    (725,1)   725
    (726,1)   726
    (727,1)   727
    (728,1)   728
    (729,1)   729
    (730,1)   730
    (731,1)   731
    (732,1)   732
    (733,1)   733
    (734,1)   734
    (735,1)   735
    (736,1)   736
    (737,1)   737
    (738,1)   738
    (739,1)   739
    (740,1)   740
    (741,1)   741
    (742,1)   742
    (743,1)   743
    (744,1)   744
    (745,1)   745
    (746,1)   746
    (747,1)   747
    (748,1)   748
    (749,1)   749
    (750,1)   750
    (751,1)   751
    (752,1)   752
    (753,1)   753
    (754,1)   754
    (755,1)   755
    (756,1)   756
    (757,1)   757
    (758,1)   758
    (759,1)   759
    (760,1)   760
    (761,1)   761
    (762,1)   762
    (763,1)   763
    (764,1)   764
    (765,1)   765
    (766,1)   766
    (767,1)   767
    (768,1)   768
    (769,1)   769
    (770,1)   770
    (771,1)   771
    (772,1)   772
    (773,1)   773
    (774,1)   774
    (775,1)   775
    (776,1)   776
    (777,1)   777
    (778,1)   778
    (779,1)   779
    (780,1)   780
    (781,1)   781
    (782,1)   782
    (783,1)   783
    (784,1)   784
    (785,1)   785
    (786,1)   786
    (787,1)   787
    (788,1)   788
    (789,1)   789
    (790,1)   790
    (791,1)   791
    (792,1)   792
    (793,1)   793
    (794,1)   794
    (795,1)   795
    (796,1)   796
    (797,1)   797
    (798,1)   798
    (799,1)   799
    (800,1)   800
    (801,1)   801
    (802,1)   802
    (803,1)   803
    (804,1)   804
    (805,1)   805
    (806,1)   806
    (807,1)   807
    (808,1)   808
    (809,1)   809
    (810,1)   810
    (811,1)   811
    (812,1)   812
    (813,1)   813
    (814,1)   814
    (815,1)   815
    (816,1)   816
    (817,1)   817
    (818,1)   818
    (819,1)   819
    (820,1)   820
    (821,1)   821
    (822,1)   822
    (823,1)   823
    (824,1)   824
    (825,1)   825
    (826,1)   826
    (827,1)   827
    (828,1)   828
    (829,1)   829
    (830,1)   830
    (831,1)   831
    (832,1)   832
    (833,1)   833
    (834,1)   834
    (835,1)   835
    (836,1)   836
    (837,1)   837
    (838,1)   838
    (839,1)   839
    (840,1)   840
    (841,1)   841
    (842,1)   842
    (843,1)   843
    (844,1)   844
    (845,1)   845
    (846,1)   846
    (847,1)   847
    (848,1)   848
    (849,1)   849
    (850,1)   850
    (851,1)   851
    (852,1)   852
    (853,1)   853
    (854,1)   854
    (855,1)   855
    (856,1)   856
    (857,1)   857
    (858,1)   858
    (859,1)   859
    (860,1)   860
    (861,1)   861
    (862,1)   862
    (863,1)   863
    (864,1)   864
    (865,1)   865
    (866,1)   866
    (867,1)   867
    (868,1)   868
    (869,1)   869
    (870,1)   870
    (871,1)   871
    (872,1)   872
    (873,1)   873
    (874,1)   874
    (875,1)   875
    (876,1)   876
    (877,1)   877
    (878,1)   878
    (879,1)   879
    (880,1)   880
    (881,1)   881
    (882,1)   882
    (883,1)   883
    (884,1)   884
    (885,1)   885
    (886,1)   886
    (887,1)   887
    (888,1)   888
    (889,1)   889
    (890,1)   890
    (891,1)   891
    (892,1)   892
    (893,1)   893
    (894,1)   894
    (895,1)   895
    (896,1)   896
    (897,1)   897
    (898,1)   898
    (899,1)   899
    (900,1)   900
    (901,1)   901
    (902,1)   902
    (903,1)   903
    (904,1)   904
    (905,1)   905
    (906,1)   906
    (907,1)   907
    (908,1)   908
    (909,1)   909
    (910,1)   910
    (911,1)   911
    (912,1)   912
    (913,1)   913
    (914,1)   914
    (915,1)   915
    (916,1)   916
    (917,1)   917
    (918,1)   918
    (919,1)   919
    (920,1)   920
    (921,1)   921
    (922,1)   922
    (923,1)   923
    (924,1)   924
    (925,1)   925
    (926,1)   926
    (927,1)   927
    (928,1)   928
    (929,1)   929
    (930,1)   930
    (931,1)   931
    (932,1)   932
    (933,1)   933
    (934,1)   934
    (935,1)   935
    (936,1)   936
    (937,1)   937
    (938,1)   938
    (939,1)   939
    (940,1)   940
    (941,1)   941
    (942,1)   942
    (943,1)   943
    (944,1)   944
    (945,1)   945
    (946,1)   946
    (947,1)   947
    (948,1)   948
    (949,1)   949
    (950,1)   950
    (951,1)   951
    (952,1)   952
    (953,1)   953
    (954,1)   954
    (955,1)   955
    (956,1)   956
    (957,1)   957
    (958,1)   958
    (959,1)   959
    (960,1)   960
    (961,1)   961
    (962,1)   962
    (963,1)   963
    (964,1)   964
    (965,1)   965
    (966,1)   966
    (967,1)   967
    (968,1)   968
    (969,1)   969
    (970,1)   970
    (971,1)   971
    (972,1)   972
    (973,1)   973
    (974,1)   974
    (975,1)   975
    (976,1)   976
    (977,1)   977
    (978,1)   978
    (979,1)   979
    (980,1)   980
    (981,1)   981
    (982,1)   982
    (983,1)   983
    (984,1)   984
    (985,1)   985
    (986,1)   986
    (987,1)   987
    (988,1)   988
    (989,1)   989
    (990,1)   990
    (991,1)   991
    (992,1)   992
    (993,1)   993
    (994,1)   994
    (995,1)   995
    (996,1)   996
    (997,1)   997
    (998,1)   998
    (999,1)   999
    (1000,1)   1000
    (1001,1)   1001
    (1002,1)   1002
    (1003,1)   1003
    (1004,1)   1004
    (1005,1)   1005
    (1006,1)   1006
    (1007,1)   1007
    (1008,1)   1008
    (1009,1)   1009
    (1010,1)   1010
    (1011,1)   1011
    (1012,1)   1012
    (1013,1)   1013
    (1014,1)   1014
    (1015,1)   1015
    (1016,1)   1016
    (1017,1)   1017
    (1018,1)   1018
    (1019,1)   1019
    (1020,1)   1020
    (1021,1)   1021
    (1022,1)   1022
    (1023,1)   1023

 jit_cache get program GB_jit_reduceNonZombiesWarp
found memory-cached prog GB_jit_reduceNonZombiesWarp
 got kernel instance reduceNonZombiesWarp_int32_t_int32_t_true
found memory-cached prog reduceNonZombiesWarp_int32_t_int32_t_true
Launching _Z20reduceNonZombiesWarpIiiLb1EEvP16GB_Matrix_opaqueP16GB_Scalar_opaquej<<<8,128,0,0>>>(GB_Matrix_opaque*,GB_Scalar_opaque*,unsigned int)
Sum: 523776
Invoking grb reduce
 rmm_wrap_alloc 256 bytes
 work:1024 gpus:0 Done.
Results matched!
[       OK ] AxB_dot3_tests_PLUS_TIMES_4.smallxsmallPLUS_TIMES_Cint32_tMint32_tAint32_tBint32_tXint32_tYint32_tZint32_t (5 ms)
[----------] 4 tests from AxB_dot3_tests_PLUS_TIMES_4 (14 ms total)

[----------] Global test environment tear-down
[==========] 16 tests from 4 test suites ran. (4206 ms total)
[  PASSED  ] 16 tests.
Tests complete
